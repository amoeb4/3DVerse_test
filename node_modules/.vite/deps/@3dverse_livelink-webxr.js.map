{
  "version": 3,
  "sources": ["../../threejs-math/build/threejs-math.module.js", "../../@3dverse/livelink-webxr/sources/WebXRHelper.ts", "../../@3dverse/node_modules/gl-matrix/esm/common.js", "../../@3dverse/node_modules/gl-matrix/esm/mat3.js", "../../@3dverse/node_modules/gl-matrix/esm/mat4.js", "../../@3dverse/node_modules/gl-matrix/esm/quat.js", "../../@3dverse/node_modules/gl-matrix/esm/vec3.js", "../../@3dverse/node_modules/gl-matrix/esm/vec4.js", "../../@3dverse/node_modules/gl-matrix/esm/vec2.js", "../../@3dverse/livelink-webxr/sources/XRContext.ts", "../../@3dverse/livelink-webxr/sources/react/WebXR.tsx", "../../@3dverse/livelink-webxr/sources/index.ts"],
  "sourcesContent": ["const REVISION = '144dev';\r\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\nconst CullFaceNone = 0;\r\nconst CullFaceBack = 1;\r\nconst CullFaceFront = 2;\r\nconst CullFaceFrontBack = 3;\r\nconst BasicShadowMap = 0;\r\nconst PCFShadowMap = 1;\r\nconst PCFSoftShadowMap = 2;\r\nconst VSMShadowMap = 3;\r\nconst FrontSide = 0;\r\nconst BackSide = 1;\r\nconst DoubleSide = 2;\r\nconst NoBlending = 0;\r\nconst NormalBlending = 1;\r\nconst AdditiveBlending = 2;\r\nconst SubtractiveBlending = 3;\r\nconst MultiplyBlending = 4;\r\nconst CustomBlending = 5;\r\nconst AddEquation = 100;\r\nconst SubtractEquation = 101;\r\nconst ReverseSubtractEquation = 102;\r\nconst MinEquation = 103;\r\nconst MaxEquation = 104;\r\nconst ZeroFactor = 200;\r\nconst OneFactor = 201;\r\nconst SrcColorFactor = 202;\r\nconst OneMinusSrcColorFactor = 203;\r\nconst SrcAlphaFactor = 204;\r\nconst OneMinusSrcAlphaFactor = 205;\r\nconst DstAlphaFactor = 206;\r\nconst OneMinusDstAlphaFactor = 207;\r\nconst DstColorFactor = 208;\r\nconst OneMinusDstColorFactor = 209;\r\nconst SrcAlphaSaturateFactor = 210;\r\nconst NeverDepth = 0;\r\nconst AlwaysDepth = 1;\r\nconst LessDepth = 2;\r\nconst LessEqualDepth = 3;\r\nconst EqualDepth = 4;\r\nconst GreaterEqualDepth = 5;\r\nconst GreaterDepth = 6;\r\nconst NotEqualDepth = 7;\r\nconst MultiplyOperation = 0;\r\nconst MixOperation = 1;\r\nconst AddOperation = 2;\r\nconst NoToneMapping = 0;\r\nconst LinearToneMapping = 1;\r\nconst ReinhardToneMapping = 2;\r\nconst CineonToneMapping = 3;\r\nconst ACESFilmicToneMapping = 4;\r\nconst CustomToneMapping = 5;\r\n\r\nconst UVMapping = 300;\r\nconst CubeReflectionMapping = 301;\r\nconst CubeRefractionMapping = 302;\r\nconst EquirectangularReflectionMapping = 303;\r\nconst EquirectangularRefractionMapping = 304;\r\nconst CubeUVReflectionMapping = 306;\r\nconst RepeatWrapping = 1000;\r\nconst ClampToEdgeWrapping = 1001;\r\nconst MirroredRepeatWrapping = 1002;\r\nconst NearestFilter = 1003;\r\nconst NearestMipmapNearestFilter = 1004;\r\nconst NearestMipMapNearestFilter = 1004;\r\nconst NearestMipmapLinearFilter = 1005;\r\nconst NearestMipMapLinearFilter = 1005;\r\nconst LinearFilter = 1006;\r\nconst LinearMipmapNearestFilter = 1007;\r\nconst LinearMipMapNearestFilter = 1007;\r\nconst LinearMipmapLinearFilter = 1008;\r\nconst LinearMipMapLinearFilter = 1008;\r\nconst UnsignedByteType = 1009;\r\nconst ByteType = 1010;\r\nconst ShortType = 1011;\r\nconst UnsignedShortType = 1012;\r\nconst IntType = 1013;\r\nconst UnsignedIntType = 1014;\r\nconst FloatType = 1015;\r\nconst HalfFloatType = 1016;\r\nconst UnsignedShort4444Type = 1017;\r\nconst UnsignedShort5551Type = 1018;\r\nconst UnsignedInt248Type = 1020;\r\nconst AlphaFormat = 1021;\r\nconst RGBFormat = 1022; // @deprecated since r137\r\nconst RGBAFormat = 1023;\r\nconst LuminanceFormat = 1024;\r\nconst LuminanceAlphaFormat = 1025;\r\nconst DepthFormat = 1026;\r\nconst DepthStencilFormat = 1027;\r\nconst RedFormat = 1028;\r\nconst RedIntegerFormat = 1029;\r\nconst RGFormat = 1030;\r\nconst RGIntegerFormat = 1031;\r\nconst RGBAIntegerFormat = 1033;\r\n\r\nconst RGB_S3TC_DXT1_Format = 33776;\r\nconst RGBA_S3TC_DXT1_Format = 33777;\r\nconst RGBA_S3TC_DXT3_Format = 33778;\r\nconst RGBA_S3TC_DXT5_Format = 33779;\r\nconst RGB_PVRTC_4BPPV1_Format = 35840;\r\nconst RGB_PVRTC_2BPPV1_Format = 35841;\r\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\r\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\r\nconst RGB_ETC1_Format = 36196;\r\nconst RGB_ETC2_Format = 37492;\r\nconst RGBA_ETC2_EAC_Format = 37496;\r\nconst RGBA_ASTC_4x4_Format = 37808;\r\nconst RGBA_ASTC_5x4_Format = 37809;\r\nconst RGBA_ASTC_5x5_Format = 37810;\r\nconst RGBA_ASTC_6x5_Format = 37811;\r\nconst RGBA_ASTC_6x6_Format = 37812;\r\nconst RGBA_ASTC_8x5_Format = 37813;\r\nconst RGBA_ASTC_8x6_Format = 37814;\r\nconst RGBA_ASTC_8x8_Format = 37815;\r\nconst RGBA_ASTC_10x5_Format = 37816;\r\nconst RGBA_ASTC_10x6_Format = 37817;\r\nconst RGBA_ASTC_10x8_Format = 37818;\r\nconst RGBA_ASTC_10x10_Format = 37819;\r\nconst RGBA_ASTC_12x10_Format = 37820;\r\nconst RGBA_ASTC_12x12_Format = 37821;\r\nconst RGBA_BPTC_Format = 36492;\r\nconst LoopOnce = 2200;\r\nconst LoopRepeat = 2201;\r\nconst LoopPingPong = 2202;\r\nconst InterpolateDiscrete = 2300;\r\nconst InterpolateLinear = 2301;\r\nconst InterpolateSmooth = 2302;\r\nconst ZeroCurvatureEnding = 2400;\r\nconst ZeroSlopeEnding = 2401;\r\nconst WrapAroundEnding = 2402;\r\nconst NormalAnimationBlendMode = 2500;\r\nconst AdditiveAnimationBlendMode = 2501;\r\nconst TrianglesDrawMode = 0;\r\nconst TriangleStripDrawMode = 1;\r\nconst TriangleFanDrawMode = 2;\r\nconst LinearEncoding = 3000;\r\nconst sRGBEncoding = 3001;\r\nconst BasicDepthPacking = 3200;\r\nconst RGBADepthPacking = 3201;\r\nconst TangentSpaceNormalMap = 0;\r\nconst ObjectSpaceNormalMap = 1;\r\n\r\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\r\nconst NoColorSpace = '';\r\nconst SRGBColorSpace = 'srgb';\r\nconst LinearSRGBColorSpace = 'srgb-linear';\r\n\r\nconst ZeroStencilOp = 0;\r\nconst KeepStencilOp = 7680;\r\nconst ReplaceStencilOp = 7681;\r\nconst IncrementStencilOp = 7682;\r\nconst DecrementStencilOp = 7683;\r\nconst IncrementWrapStencilOp = 34055;\r\nconst DecrementWrapStencilOp = 34056;\r\nconst InvertStencilOp = 5386;\r\n\r\nconst NeverStencilFunc = 512;\r\nconst LessStencilFunc = 513;\r\nconst EqualStencilFunc = 514;\r\nconst LessEqualStencilFunc = 515;\r\nconst GreaterStencilFunc = 516;\r\nconst NotEqualStencilFunc = 517;\r\nconst GreaterEqualStencilFunc = 518;\r\nconst AlwaysStencilFunc = 519;\r\n\r\nconst StaticDrawUsage = 35044;\r\nconst DynamicDrawUsage = 35048;\r\nconst StreamDrawUsage = 35040;\r\nconst StaticReadUsage = 35045;\r\nconst DynamicReadUsage = 35049;\r\nconst StreamReadUsage = 35041;\r\nconst StaticCopyUsage = 35046;\r\nconst DynamicCopyUsage = 35050;\r\nconst StreamCopyUsage = 35042;\r\n\r\nconst GLSL1 = '100';\r\nconst GLSL3 = '300 es';\r\n\r\nconst _SRGBAFormat = 1035; // fallback for WebGL 1\n\nclass Vector2 {\r\n\r\n\tconstructor( x = 0, y = 0 ) {\r\n\r\n\t\tVector2.prototype.isVector2 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t}\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t}\r\n\r\n\tset( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t}\r\n\r\n\tcross( v ) {\r\n\r\n\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tangle() {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t// fromBufferAttribute( attribute, index ) {\r\n\r\n\t// \tthis.x = attribute.getX( index );\r\n\t// \tthis.y = attribute.getY( index );\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\trotateAround( center, angle ) {\r\n\r\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tconst x = this.x - center.x;\r\n\t\tconst y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\r\n\t}\r\n\r\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\r\n\r\nlet _seed = 1234567;\r\n\r\n\r\nconst DEG2RAD = Math.PI / 180;\r\nconst RAD2DEG = 180 / Math.PI;\r\n\r\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\nfunction generateUUID() {\r\n\r\n\tconst d0 = Math.random() * 0xffffffff | 0;\r\n\tconst d1 = Math.random() * 0xffffffff | 0;\r\n\tconst d2 = Math.random() * 0xffffffff | 0;\r\n\tconst d3 = Math.random() * 0xffffffff | 0;\r\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\r\n\r\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\r\n\treturn uuid.toLowerCase();\r\n\r\n}\r\n\r\nfunction clamp( value, min, max ) {\r\n\r\n\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n}\r\n\r\n// compute euclidean modulo of m % n\r\n// https://en.wikipedia.org/wiki/Modulo_operation\r\nfunction euclideanModulo( n, m ) {\r\n\r\n\treturn ( ( n % m ) + m ) % m;\r\n\r\n}\r\n\r\n// Linear mapping from range <a1, a2> to range <b1, b2>\r\nfunction mapLinear( x, a1, a2, b1, b2 ) {\r\n\r\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n}\r\n\r\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\r\nfunction inverseLerp( x, y, value ) {\r\n\r\n\tif ( x !== y ) {\r\n\r\n\t\treturn ( value - x ) / ( y - x );\r\n\r\n\t} else {\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// https://en.wikipedia.org/wiki/Linear_interpolation\r\nfunction lerp( x, y, t ) {\r\n\r\n\treturn ( 1 - t ) * x + t * y;\r\n\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nfunction damp( x, y, lambda, dt ) {\r\n\r\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\r\n\r\n}\r\n\r\n// https://www.desmos.com/calculator/vcsjnyz7x4\r\nfunction pingpong( x, length = 1 ) {\r\n\r\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\r\n\r\n}\r\n\r\n// http://en.wikipedia.org/wiki/Smoothstep\r\nfunction smoothstep( x, min, max ) {\r\n\r\n\tif ( x <= min ) return 0;\r\n\tif ( x >= max ) return 1;\r\n\r\n\tx = ( x - min ) / ( max - min );\r\n\r\n\treturn x * x * ( 3 - 2 * x );\r\n\r\n}\r\n\r\nfunction smootherstep( x, min, max ) {\r\n\r\n\tif ( x <= min ) return 0;\r\n\tif ( x >= max ) return 1;\r\n\r\n\tx = ( x - min ) / ( max - min );\r\n\r\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n}\r\n\r\n// Random integer from <low, high> interval\r\nfunction randInt( low, high ) {\r\n\r\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n}\r\n\r\n// Random float from <low, high> interval\r\nfunction randFloat( low, high ) {\r\n\r\n\treturn low + Math.random() * ( high - low );\r\n\r\n}\r\n\r\n// Random float from <-range/2, range/2> interval\r\nfunction randFloatSpread( range ) {\r\n\r\n\treturn range * ( 0.5 - Math.random() );\r\n\r\n}\r\n\r\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\r\nfunction seededRandom( s ) {\r\n\r\n\tif ( s !== undefined ) _seed = s;\r\n\r\n\t// Mulberry32 generator\r\n\r\n\tlet t = _seed += 0x6D2B79F5;\r\n\r\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\r\n\r\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\r\n\r\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\r\n\r\n}\r\n\r\nfunction degToRad( degrees ) {\r\n\r\n\treturn degrees * DEG2RAD;\r\n\r\n}\r\n\r\nfunction radToDeg( radians ) {\r\n\r\n\treturn radians * RAD2DEG;\r\n\r\n}\r\n\r\nfunction isPowerOfTwo( value ) {\r\n\r\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n}\r\n\r\nfunction ceilPowerOfTwo( value ) {\r\n\r\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n}\r\n\r\nfunction floorPowerOfTwo( value ) {\r\n\r\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n}\r\n\r\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\r\n\r\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\r\n\r\n\t// rotations are applied to the axes in the order specified by 'order'\r\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\r\n\t// angles are in radians\r\n\r\n\tconst cos = Math.cos;\r\n\tconst sin = Math.sin;\r\n\r\n\tconst c2 = cos( b / 2 );\r\n\tconst s2 = sin( b / 2 );\r\n\r\n\tconst c13 = cos( ( a + c ) / 2 );\r\n\tconst s13 = sin( ( a + c ) / 2 );\r\n\r\n\tconst c1_3 = cos( ( a - c ) / 2 );\r\n\tconst s1_3 = sin( ( a - c ) / 2 );\r\n\r\n\tconst c3_1 = cos( ( c - a ) / 2 );\r\n\tconst s3_1 = sin( ( c - a ) / 2 );\r\n\r\n\tswitch ( order ) {\r\n\r\n\t\tcase 'XYX':\r\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'YZY':\r\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ZXZ':\r\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'XZX':\r\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'YXY':\r\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ZYZ':\r\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction denormalize( value, array ) {\r\n\r\n\tswitch ( array.constructor ) {\r\n\r\n\t\tcase Float32Array:\r\n\r\n\t\t\treturn value;\r\n\r\n\t\tcase Uint16Array:\r\n\r\n\t\t\treturn value / 65535.0;\r\n\r\n\t\tcase Uint8Array:\r\n\r\n\t\t\treturn value / 255.0;\r\n\r\n\t\tcase Int16Array:\r\n\r\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\r\n\r\n\t\tcase Int8Array:\r\n\r\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthrow new Error( 'Invalid component type.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction normalize( value, array ) {\r\n\r\n\tswitch ( array.constructor ) {\r\n\r\n\t\tcase Float32Array:\r\n\r\n\t\t\treturn value;\r\n\r\n\t\tcase Uint16Array:\r\n\r\n\t\t\treturn Math.round( value * 65535.0 );\r\n\r\n\t\tcase Uint8Array:\r\n\r\n\t\t\treturn Math.round( value * 255.0 );\r\n\r\n\t\tcase Int16Array:\r\n\r\n\t\t\treturn Math.round( value * 32767.0 );\r\n\r\n\t\tcase Int8Array:\r\n\r\n\t\t\treturn Math.round( value * 127.0 );\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthrow new Error( 'Invalid component type.' );\r\n\r\n\t}\r\n\r\n}\n\nvar MathUtils$1 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize\n});\n\nclass Quaternion {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tthis.isQuaternion = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t}\r\n\r\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( t === 0 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x1;\r\n\t\t\tdst[ dstOffset + 1 ] = y1;\r\n\t\t\tdst[ dstOffset + 2 ] = z1;\r\n\t\t\tdst[ dstOffset + 3 ] = w1;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tlet s = 1 - t;\r\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\r\n\r\n\t\tconst x0 = src0[ srcOffset0 ];\r\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\r\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\r\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 ];\r\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\r\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\r\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\r\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\r\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\r\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget w() {\r\n\r\n\t\treturn this._w;\r\n\r\n\t}\r\n\r\n\tset w( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t}\r\n\r\n\tcopy( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromEuler( euler, update ) {\r\n\r\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tconst cos = Math.cos;\r\n\t\tconst sin = Math.sin;\r\n\r\n\t\tconst c1 = cos( x / 2 );\r\n\t\tconst c2 = cos( y / 2 );\r\n\t\tconst c3 = cos( z / 2 );\r\n\r\n\t\tconst s1 = sin( x / 2 );\r\n\t\tconst s2 = sin( y / 2 );\r\n\t\tconst s3 = sin( z / 2 );\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tlet r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\tif ( r < Number.EPSILON ) {\r\n\r\n\t\t\t// vFrom and vTo point in opposite directions\r\n\r\n\t\t\tr = 0;\r\n\r\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tangleTo( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t}\r\n\r\n\trotateTowards( q, step ) {\r\n\r\n\t\tconst angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tconst t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\treturn this.set( 0, 0, 0, 1 );\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// quaternion is assumed to have unit length\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t}\r\n\r\n\tconjugate() {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\tlet l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t}\r\n\r\n\tpremultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t}\r\n\r\n\tmultiplyQuaternions( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerp( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tconst s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\tthis.normalize();\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tslerpQuaternions( qa, qb, t ) {\r\n\r\n\t\treturn this.copy( qa ).slerp( qb, t );\r\n\r\n\t}\r\n\r\n\trandom() {\r\n\r\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\r\n\t\t// Note, this source uses w, x, y, z ordering,\r\n\t\t// so we swap the order below.\r\n\r\n\t\tconst u1 = Math.random();\r\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\r\n\t\tconst sqrtu1 = Math.sqrt( u1 );\r\n\r\n\t\tconst u2 = 2 * Math.PI * Math.random();\r\n\r\n\t\tconst u3 = 2 * Math.PI * Math.random();\r\n\r\n\t\treturn this.set(\r\n\t\t\tsqrt1u1 * Math.cos( u2 ),\r\n\t\t\tsqrtu1 * Math.sin( u3 ),\r\n\t\t\tsqrtu1 * Math.cos( u3 ),\r\n\t\t\tsqrt1u1 * Math.sin( u2 ),\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tequals( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t// fromBufferAttribute( attribute, index ) {\r\n\r\n\t// \tthis._x = attribute.getX( index );\r\n\t// \tthis._y = attribute.getY( index );\r\n\t// \tthis._z = attribute.getZ( index );\r\n\t// \tthis._w = attribute.getW( index );\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._w;\r\n\r\n\t}\r\n\r\n}\n\nclass Vector3 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0 ) {\r\n\r\n\t\tVector3.prototype.isVector3 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t}\r\n\r\n\tset( x, y, z ) {\r\n\r\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyEuler( euler ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion$1.setFromEuler( euler ) );\r\n\r\n\t}\r\n\r\n\tapplyAxisAngle( axis, angle ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion$1.setFromAxisAngle( axis, angle ) );\r\n\r\n\t}\r\n\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tconst ix = qw * x + qy * z - qz * y;\r\n\t\tconst iy = qw * y + qz * x - qx * z;\r\n\t\tconst iz = qw * z + qx * y - qy * x;\r\n\t\tconst iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// project( camera ) {\r\n\r\n\t// \treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t// }\r\n\r\n\t// unproject( camera ) {\r\n\r\n\t// \treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t// }\r\n\r\n\ttransformDirection( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t}\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcross( v ) {\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t}\r\n\r\n\tcrossVectors( a, b ) {\r\n\r\n\t\tconst ax = a.x, ay = a.y, az = a.z;\r\n\t\tconst bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tprojectOnVector( v ) {\r\n\r\n\t\tconst denominator = v.lengthSq();\r\n\r\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\r\n\r\n\t\tconst scalar = v.dot( this ) / denominator;\r\n\r\n\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t}\r\n\r\n\tprojectOnPlane( planeNormal ) {\r\n\r\n\t\t_vector$3.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\treturn this.sub( _vector$3 );\r\n\r\n\t}\r\n\r\n\treflect( normal ) {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\treturn this.sub( _vector$3.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t}\r\n\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t}\r\n\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t}\r\n\r\n\tsetFromSpherical( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t}\r\n\r\n\tsetFromSphericalCoords( radius, phi, theta ) {\r\n\r\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCylindrical( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t}\r\n\r\n\tsetFromCylindricalCoords( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixScale( m ) {\r\n\r\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrixColumn( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3Column( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 3 );\r\n\r\n\t}\r\n\r\n\tsetFromEuler( e ) {\r\n\r\n\t\tthis.x = e._x;\r\n\t\tthis.y = e._y;\r\n\t\tthis.z = e._z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t// fromBufferAttribute( attribute, index ) {\r\n\r\n\t// \tthis.x = attribute.getX( index );\r\n\t// \tthis.y = attribute.getY( index );\r\n\t// \tthis.z = attribute.getZ( index );\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trandomDirection() {\r\n\r\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\r\n\r\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\r\n\t\tconst t = Math.random() * Math.PI * 2;\r\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\r\n\r\n\t\tthis.x = f * Math.cos( t );\r\n\t\tthis.y = f * Math.sin( t );\r\n\t\tthis.z = u;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _vector$3 = /*@__PURE__*/ new Vector3();\r\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\n\nconst _vector$2 = /*@__PURE__*/ new Vector2();\r\n\r\nclass Box2 {\r\n\r\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\r\n\r\n\t\tthis.isBox2 = true;\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tset( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCenterAndSize( center, size ) {\r\n\r\n\t\tconst halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t}\r\n\r\n\tgetCenter( target = new Vector2() ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tgetSize( target = new Vector2() ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByVector( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByScalar( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\r\n\r\n\t}\r\n\r\n\tcontainsBox( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\r\n\r\n\t}\r\n\r\n\tgetParameter( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\t// using 4 splitting planes to rule out intersections\r\n\r\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\tconst clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t}\r\n\r\n\tintersect( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n}\n\nclass Box3 {\r\n\r\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\r\n\r\n\t\tthis.isBox3 = true;\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tset( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromArray( array ) {\r\n\r\n\t\tlet minX = + Infinity;\r\n\t\tlet minY = + Infinity;\r\n\t\tlet minZ = + Infinity;\r\n\r\n\t\tlet maxX = - Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\t\tlet maxZ = - Infinity;\r\n\r\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\tconst x = array[ i ];\r\n\t\t\tconst y = array[ i + 1 ];\r\n\t\t\tconst z = array[ i + 2 ];\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// setFromBufferAttribute( attribute ) {\r\n\r\n\t// \tlet minX = + Infinity;\r\n\t// \tlet minY = + Infinity;\r\n\t// \tlet minZ = + Infinity;\r\n\r\n\t// \tlet maxX = - Infinity;\r\n\t// \tlet maxY = - Infinity;\r\n\t// \tlet maxZ = - Infinity;\r\n\r\n\t// \tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t// \t\tconst x = attribute.getX( i );\r\n\t// \t\tconst y = attribute.getY( i );\r\n\t// \t\tconst z = attribute.getZ( i );\r\n\r\n\t// \t\tif ( x < minX ) minX = x;\r\n\t// \t\tif ( y < minY ) minY = y;\r\n\t// \t\tif ( z < minZ ) minZ = z;\r\n\r\n\t// \t\tif ( x > maxX ) maxX = x;\r\n\t// \t\tif ( y > maxY ) maxY = y;\r\n\t// \t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t// \t}\r\n\r\n\t// \tthis.min.set( minX, minY, minZ );\r\n\t// \tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCenterAndSize( center, size ) {\r\n\r\n\t\tconst halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromObject( object, precise = false ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\treturn this.expandByObject( object, precise );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t}\r\n\r\n\tgetCenter( target = new Vector3() ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tgetSize( target = new Vector3() ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByVector( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByScalar( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// expandByObject( object, precise = false ) {\r\n\r\n\t// \t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t// \t// accounting for both the object's, and children's, world transforms\r\n\r\n\t// \tobject.updateWorldMatrix( false, false );\r\n\r\n\t// \tconst geometry = object.geometry;\r\n\r\n\t// \tif ( geometry !== undefined ) {\r\n\r\n\t// \t\tif ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {\r\n\r\n\t// \t\t\tconst position = geometry.attributes.position;\r\n\t// \t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\r\n\r\n\t// \t\t\t\t_vector.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\r\n\t// \t\t\t\tthis.expandByPoint( _vector );\r\n\r\n\t// \t\t\t}\r\n\r\n\t// \t\t} else {\r\n\r\n\t// \t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t// \t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t// \t\t\t}\r\n\r\n\t// \t\t\t_box.copy( geometry.boundingBox );\r\n\t// \t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t// \t\t\tthis.union( _box );\r\n\r\n\t// \t\t}\r\n\r\n\t// \t}\r\n\r\n\t// \tconst children = object.children;\r\n\r\n\t// \tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t// \t\tthis.expandByObject( children[ i ], precise );\r\n\r\n\t// \t}\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t}\r\n\r\n\tcontainsBox( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\tgetParameter( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\tthis.clampPoint( sphere.center, _vector$1 );\r\n\r\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tlet min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t}\r\n\r\n\tintersectsTriangle( triangle ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// compute box center and extents\r\n\t\tthis.getCenter( _center );\r\n\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t// translate triangle to aabb origin\r\n\t\t_v0$1.subVectors( triangle.a, _center );\r\n\t\t_v1$3.subVectors( triangle.b, _center );\r\n\t\t_v2$1.subVectors( triangle.c, _center );\r\n\r\n\t\t// compute edge vectors for triangle\r\n\t\t_f0.subVectors( _v1$3, _v0$1 );\r\n\t\t_f1.subVectors( _v2$1, _v1$3 );\r\n\t\t_f2.subVectors( _v0$1, _v2$1 );\r\n\r\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\tlet axes = [\r\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t];\r\n\t\tif ( ! satForAxes( axes, _v0$1, _v1$3, _v2$1, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// test 3 face normals from the aabb\r\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\tif ( ! satForAxes( axes, _v0$1, _v1$3, _v2$1, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// finally testing the face normal of the triangle\r\n\t\t// use already existing triangle edge vectors here\r\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\treturn satForAxes( axes, _v0$1, _v1$3, _v2$1, _extents );\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\tconst clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t}\r\n\r\n\tgetBoundingSphere( target ) {\r\n\r\n\t\tthis.getCenter( target.center );\r\n\r\n\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tintersect( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\t// transform of empty box is an empty box.\r\n\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\tthis.setFromPoints( _points );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _points = [\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3()\r\n];\r\n\r\nconst _vector$1 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _box$1 = /*@__PURE__*/ new Box3();\r\n\r\n// triangle centered vertices\r\n\r\nconst _v0$1 = /*@__PURE__*/ new Vector3();\r\nconst _v1$3 = /*@__PURE__*/ new Vector3();\r\nconst _v2$1 = /*@__PURE__*/ new Vector3();\r\n\r\n// triangle edge vectors\r\n\r\nconst _f0 = /*@__PURE__*/ new Vector3();\r\nconst _f1 = /*@__PURE__*/ new Vector3();\r\nconst _f2 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _center = /*@__PURE__*/ new Vector3();\r\nconst _extents = /*@__PURE__*/ new Vector3();\r\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\r\nconst _testAxis = /*@__PURE__*/ new Vector3();\r\n\r\nfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t_testAxis.fromArray( axes, i );\r\n\t\t// project the aabb onto the separating axis\r\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t// project all 3 vertices of the triangle onto the separating axis\r\n\t\tconst p0 = v0.dot( _testAxis );\r\n\t\tconst p1 = v1.dot( _testAxis );\r\n\t\tconst p2 = v2.dot( _testAxis );\r\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t// the axis is separating and we can exit\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\n\nfunction SRGBToLinear( c ) {\r\n\r\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n}\r\n\r\nfunction LinearToSRGB( c ) {\r\n\r\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n}\r\n\r\n// JavaScript RGB-to-RGB transforms, defined as\r\n// FN[InputColorSpace][OutputColorSpace] callback functions.\r\nconst FN = {\r\n\t[ SRGBColorSpace ]: { [ LinearSRGBColorSpace ]: SRGBToLinear },\r\n\t[ LinearSRGBColorSpace ]: { [ SRGBColorSpace ]: LinearToSRGB },\r\n};\r\n\r\nconst ColorManagement = {\r\n\r\n\tlegacyMode: true,\r\n\r\n\tget workingColorSpace() {\r\n\r\n\t\treturn LinearSRGBColorSpace;\r\n\r\n\t},\r\n\r\n\tset workingColorSpace( colorSpace ) {\r\n\r\n\t\tconsole.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );\r\n\r\n\t},\r\n\r\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\r\n\r\n\t\tif ( this.legacyMode || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t}\r\n\r\n\t\tif ( FN[ sourceColorSpace ] && FN[ sourceColorSpace ][ targetColorSpace ] !== undefined ) {\r\n\r\n\t\t\tconst fn = FN[ sourceColorSpace ][ targetColorSpace ];\r\n\r\n\t\t\tcolor.r = fn( color.r );\r\n\t\t\tcolor.g = fn( color.g );\r\n\t\t\tcolor.b = fn( color.b );\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( 'Unsupported color space conversion.' );\r\n\r\n\t},\r\n\r\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\r\n\r\n\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\r\n\r\n\t},\r\n\r\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\r\n\r\n\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\r\n\r\n\t},\r\n\r\n};\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\nconst _rgb = { r: 0, g: 0, b: 0 };\r\nconst _hslA = { h: 0, s: 0, l: 0 };\r\nconst _hslB = { h: 0, s: 0, l: 0 };\r\n\r\nfunction hue2rgb( p, q, t ) {\r\n\r\n\tif ( t < 0 ) t += 1;\r\n\tif ( t > 1 ) t -= 1;\r\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\tif ( t < 1 / 2 ) return q;\r\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\treturn p;\r\n\r\n}\r\n\r\nfunction toComponents( source, target ) {\r\n\r\n\ttarget.r = source.r;\r\n\ttarget.g = source.g;\r\n\ttarget.b = source.b;\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nclass Color {\r\n\r\n\tconstructor( r, g, b ) {\r\n\r\n\t\tthis.isColor = true;\r\n\r\n\t\tthis.r = 1;\r\n\t\tthis.g = 1;\r\n\t\tthis.b = 1;\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\t\t\treturn this.set( r );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.setRGB( r, g, b );\r\n\r\n\t}\r\n\r\n\tset( value ) {\r\n\r\n\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\tthis.copy( value );\r\n\r\n\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\tthis.setHex( value );\r\n\r\n\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\tthis.setStyle( value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\th = euclideanModulo( h, 1 );\r\n\t\ts = clamp( s, 0, 1 );\r\n\t\tl = clamp( l, 0, 1 );\r\n\r\n\t\tif ( s === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\tconst q = ( 2 * l ) - p;\r\n\r\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t}\r\n\r\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tlet m;\r\n\r\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tlet color;\r\n\t\t\tconst name = m[ 1 ];\r\n\t\t\tconst components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\tconst s = parseFloat( color[ 2 ] ) / 100;\r\n\t\t\t\t\t\tconst l = parseFloat( color[ 3 ] ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL( h, s, l, colorSpace );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tconst hex = m[ 1 ];\r\n\t\t\tconst size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\treturn this.setColorName( style, colorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\t// color keywords\r\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\r\n\r\n\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t// red\r\n\t\t\tthis.setHex( hex, colorSpace );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// unknown color\r\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n\tcopy( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopySRGBToLinear( color ) {\r\n\r\n\t\tthis.r = SRGBToLinear( color.r );\r\n\t\tthis.g = SRGBToLinear( color.g );\r\n\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyLinearToSRGB( color ) {\r\n\r\n\t\tthis.r = LinearToSRGB( color.r );\r\n\t\tthis.g = LinearToSRGB( color.g );\r\n\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconvertSRGBToLinear() {\r\n\r\n\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tconvertLinearToSRGB() {\r\n\r\n\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetHex( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\r\n\r\n\t\treturn clamp( _rgb.r * 255, 0, 255 ) << 16 ^ clamp( _rgb.g * 255, 0, 255 ) << 8 ^ clamp( _rgb.b * 255, 0, 255 ) << 0;\r\n\r\n\t}\r\n\r\n\tgetHexString( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\r\n\r\n\t}\r\n\r\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\r\n\r\n\t\tconst r = _rgb.r, g = _rgb.g, b = _rgb.b;\r\n\r\n\t\tconst max = Math.max( r, g, b );\r\n\t\tconst min = Math.min( r, g, b );\r\n\r\n\t\tlet hue, saturation;\r\n\t\tconst lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.h = hue;\r\n\t\ttarget.s = saturation;\r\n\t\ttarget.l = lightness;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\r\n\r\n\t\ttarget.r = _rgb.r;\r\n\t\ttarget.g = _rgb.g;\r\n\t\ttarget.b = _rgb.b;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetStyle( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.fromWorkingColorSpace( toComponents( this, _rgb ), colorSpace );\r\n\r\n\t\tif ( colorSpace !== SRGBColorSpace ) {\r\n\r\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\r\n\t\t\treturn `color(${ colorSpace } ${ _rgb.r } ${ _rgb.g } ${ _rgb.b })`;\r\n\r\n\t\t}\r\n\r\n\t\treturn `rgb(${( _rgb.r * 255 ) | 0},${( _rgb.g * 255 ) | 0},${( _rgb.b * 255 ) | 0})`;\r\n\r\n\t}\r\n\r\n\toffsetHSL( h, s, l ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\r\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\r\n\r\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddColors( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( color ) {\r\n\r\n\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerp( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpColors( color1, color2, alpha ) {\r\n\r\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\r\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\r\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpHSL( color, alpha ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\t\tcolor.getHSL( _hslB );\r\n\r\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\r\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\r\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\tthis.setHSL( h, s, l );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t// fromBufferAttribute( attribute, index ) {\r\n\r\n\t// \tthis.r = attribute.getX( index );\r\n\t// \tthis.g = attribute.getY( index );\r\n\t// \tthis.b = attribute.getZ( index );\r\n\r\n\t// \tif ( attribute.normalized === true ) {\r\n\r\n\t// \t\t// assuming Uint8Array\r\n\r\n\t// \t\tthis.r /= 255;\r\n\t// \t\tthis.g /= 255;\r\n\t// \t\tthis.b /= 255;\r\n\r\n\t// \t}\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.getHex();\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.r;\r\n\t\tyield this.g;\r\n\t\tyield this.b;\r\n\r\n\t}\r\n\r\n}\r\n\r\nColor.NAMES = _colorKeywords;\n\n/**\r\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n */\r\n\r\nclass Cylindrical {\r\n\r\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\r\n\r\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\r\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\t\tthis.y = y; // height above the x-z plane\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( radius, theta, y ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.theta = theta;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tthis.radius = other.radius;\r\n\t\tthis.theta = other.theta;\r\n\t\tthis.y = other.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v ) {\r\n\r\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t}\r\n\r\n\tsetFromCartesianCoords( x, y, z ) {\r\n\r\n\t\tthis.radius = Math.sqrt( x * x + z * z );\r\n\t\tthis.theta = Math.atan2( x, z );\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\n\nclass Matrix4 {\r\n\r\n\tconstructor() {\r\n\r\n\t\tMatrix4.prototype.isMatrix4 = true;\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopyPosition( m ) {\r\n\r\n\t\tconst te = this.elements, me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrix3( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractRotation( m ) {\r\n\r\n\t\t// this method does not support reflection matrices\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tconst scaleX = 1 / _v1$2.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst scaleY = 1 / _v1$2.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst scaleZ = 1 / _v1$2.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationFromEuler( euler ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\r\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\r\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\r\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// bottom row\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// last column\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationFromQuaternion( q ) {\r\n\r\n\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t}\r\n\r\n\tlookAt( eye, target, up ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\t_z.subVectors( eye, target );\r\n\r\n\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t_z.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\t_z.normalize();\r\n\t\t_x.crossVectors( up, _z );\r\n\r\n\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t// up and z are parallel\r\n\r\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t}\r\n\r\n\t\t_x.normalize();\r\n\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\ttranspose() {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tlet tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetPosition( x, y, z ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tte[ 12 ] = x.x;\r\n\t\t\tte[ 13 ] = x.y;\r\n\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tte[ 12 ] = x;\r\n\t\t\tte[ 13 ] = y;\r\n\t\t\tte[ 14 ] = z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\r\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\r\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\r\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tscale( v ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetMaxScaleOnAxis() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t}\r\n\r\n\tmakeTranslation( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationX( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s, c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationY( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationZ( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts, c, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotationAxis( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tconst c = Math.cos( angle );\r\n\t\tconst s = Math.sin( angle );\r\n\t\tconst t = 1 - c;\r\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\r\n\t\tconst tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeScale( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, yx, zx, 0,\r\n\t\t\txy, 1, zy, 0,\r\n\t\t\txz, yz, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = position.x;\r\n\t\tte[ 13 ] = position.y;\r\n\t\tte[ 14 ] = position.z;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdecompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tlet sx = _v1$2.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\tconst sy = _v1$2.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\tconst sz = _v1$2.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t// if determine is negative, we need to invert one scale\r\n\t\tconst det = this.determinant();\r\n\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\tposition.x = te[ 12 ];\r\n\t\tposition.y = te[ 13 ];\r\n\t\tposition.z = te[ 14 ];\r\n\r\n\t\t// scale the rotation part\r\n\t\t_m1.copy( this );\r\n\r\n\t\tconst invSX = 1 / sx;\r\n\t\tconst invSY = 1 / sy;\r\n\t\tconst invSZ = 1 / sz;\r\n\r\n\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tscale.x = sx;\r\n\t\tscale.y = sy;\r\n\t\tscale.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakePerspective( left, right, top, bottom, near, far ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = 2 * near / ( right - left );\r\n\t\tconst y = 2 * near / ( top - bottom );\r\n\r\n\t\tconst a = ( right + left ) / ( right - left );\r\n\t\tconst b = ( top + bottom ) / ( top - bottom );\r\n\t\tconst c = - ( far + near ) / ( far - near );\r\n\t\tconst d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst w = 1.0 / ( right - left );\r\n\t\tconst h = 1.0 / ( top - bottom );\r\n\t\tconst p = 1.0 / ( far - near );\r\n\r\n\t\tconst x = ( right + left ) * w;\r\n\t\tconst y = ( top + bottom ) * h;\r\n\t\tconst z = ( far + near ) * p;\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _v1$2 = /*@__PURE__*/ new Vector3();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\r\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\r\nconst _x = /*@__PURE__*/ new Vector3();\r\nconst _y = /*@__PURE__*/ new Vector3();\r\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nclass Euler {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\r\n\r\n\t\tthis.isEuler = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t}\r\n\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tget order() {\r\n\r\n\t\treturn this._order;\r\n\r\n\t}\r\n\r\n\tset order( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\tset( x, y, z, order = this._order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t}\r\n\r\n\tcopy( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements;\r\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromQuaternion( q, order, update ) {\r\n\r\n\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v, order = this._order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order );\r\n\r\n\t}\r\n\r\n\treorder( newOrder ) {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t_quaternion.setFromEuler( this );\r\n\r\n\t\treturn this.setFromQuaternion( _quaternion, newOrder );\r\n\r\n\t}\r\n\r\n\tequals( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t}\r\n\r\n\tfromArray( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._order;\r\n\r\n\t}\r\n\r\n\t// @deprecated since r138, 02cf0df1cb4575d5842fef9c85bb5a89fe020d53\r\n\r\n\ttoVector3() {\r\n\r\n\t\tconsole.error( 'THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nEuler.DefaultOrder = 'XYZ';\r\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n */\r\n\r\nclass Interpolant {\r\n\r\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t\tthis.settings = null;\r\n\t\tthis.DefaultSettings_ = {};\r\n\r\n\t}\r\n\r\n\tevaluate( t ) {\r\n\r\n\t\tconst pp = this.parameterPositions;\r\n\t\tlet i1 = this._cachedIndex,\r\n\t\t\tt1 = pp[ i1 ],\r\n\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\tvalidate_interval: {\r\n\r\n\t\t\tseek: {\r\n\r\n\t\t\t\tlet right;\r\n\r\n\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t//-\r\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t// binary search\r\n\r\n\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\treturn this.copySampleValue_( 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // seek\r\n\r\n\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t} // validate_interval\r\n\r\n\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t}\r\n\r\n\tgetSettings_() {\r\n\r\n\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t}\r\n\r\n\tcopySampleValue_( index ) {\r\n\r\n\t\t// copies a sample value to the result buffer\r\n\r\n\t\tconst result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = index * stride;\r\n\r\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// Template methods for derived classes:\r\n\r\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\tthrow new Error( 'call to abstract method' );\r\n\t\t// implementations shall return this.resultBuffer\r\n\r\n\t}\r\n\r\n\tintervalChanged_( /* i1, t0, t1 */ ) {\r\n\r\n\t\t// empty\r\n\r\n\t}\r\n\r\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\r\nconst _startEnd = /*@__PURE__*/ new Vector3();\r\n\r\nclass Line3 {\r\n\r\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t}\r\n\r\n\tset( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\tdelta( target ) {\r\n\r\n\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t}\r\n\r\n\tdistanceSq() {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t}\r\n\r\n\tdistance() {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t}\r\n\r\n\tat( t, target ) {\r\n\r\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t}\r\n\r\n\tclosestPointToPointParameter( point, clampToLine ) {\r\n\r\n\t\t_startP.subVectors( point, this.start );\r\n\t\t_startEnd.subVectors( this.end, this.start );\r\n\r\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\r\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\r\n\r\n\t\tlet t = startEnd_startP / startEnd2;\r\n\r\n\t\tif ( clampToLine ) {\r\n\r\n\t\t\tt = clamp( t, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn t;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, clampToLine, target ) {\r\n\r\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\n\nclass Matrix3 {\r\n\r\n\tconstructor() {\r\n\r\n\t\tMatrix3.prototype.isMatrix3 = true;\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrix3Column( this, 0 );\r\n\t\tyAxis.setFromMatrix3Column( this, 1 );\r\n\t\tzAxis.setFromMatrix3Column( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromMatrix4( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\r\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\r\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranspose() {\r\n\r\n\t\tlet tmp;\r\n\t\tconst m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetNormalMatrix( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\r\n\r\n\t}\r\n\r\n\ttransposeIntoArray( r ) {\r\n\r\n\t\tconst m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\tconst c = Math.cos( rotation );\r\n\t\tconst s = Math.sin( rotation );\r\n\r\n\t\tthis.set(\r\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tscale( sx, sy ) {\r\n\r\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trotate( theta ) {\r\n\r\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( tx, ty ) {\r\n\r\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// for 2D Transforms\r\n\r\n\tmakeTranslation( x, y ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, x,\r\n\t\t\t0, 1, y,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeRotation( theta ) {\r\n\r\n\t\t// counterclockwise\r\n\r\n\t\tconst c = Math.cos( theta );\r\n\t\tconst s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0,\r\n\t\t\ts, c, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmakeScale( x, y ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0,\r\n\t\t\t0, y, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector3();\r\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\r\n\r\nclass Plane {\r\n\r\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\r\n\r\n\t\tthis.isPlane = true;\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = normal;\r\n\t\tthis.constant = constant;\r\n\r\n\t}\r\n\r\n\tset( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponents( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromCoplanarPoints( a, b, c ) {\r\n\r\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t}\r\n\r\n\tdistanceToSphere( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t}\r\n\r\n\tprojectPoint( point, target ) {\r\n\r\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\r\n\r\n\t}\r\n\r\n\tintersectLine( line, target ) {\r\n\r\n\t\tconst direction = line.delta( _vector1 );\r\n\r\n\t\tconst denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t}\r\n\r\n\tintersectsLine( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tconst startSign = this.distanceToPoint( line.start );\r\n\t\tconst endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\tcoplanarPoint( target ) {\r\n\r\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\r\n\r\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _segCenter = /*@__PURE__*/ new Vector3();\r\nconst _segDir = /*@__PURE__*/ new Vector3();\r\nconst _diff = /*@__PURE__*/ new Vector3();\r\n\r\nconst _edge1 = /*@__PURE__*/ new Vector3();\r\nconst _edge2 = /*@__PURE__*/ new Vector3();\r\nconst _normal = /*@__PURE__*/ new Vector3();\r\n\r\nclass Ray {\r\n\r\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\r\n\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction;\r\n\r\n\t}\r\n\r\n\tset( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tat( t, target = new Vector3()) {\r\n\r\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t}\r\n\r\n\tlookAt( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\trecast( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, _vector ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( point, target = new Vector3() ) {\r\n\r\n\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\tconst directionDistance = target.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t}\r\n\r\n\tdistanceSqToPoint( point ) {\r\n\r\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t// point behind the ray\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t}\r\n\r\n\t\t_vector.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\treturn _vector.distanceToSquared( point );\r\n\r\n\t}\r\n\r\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t// It returns the min distance between the ray and the segment\r\n\t\t// defined by v0 and v1\r\n\t\t// It can also set two optional targets :\r\n\t\t// - The closest point on the ray\r\n\t\t// - The closest point on the segment\r\n\r\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\tconst a01 = - this.direction.dot( _segDir );\r\n\t\tconst b0 = _diff.dot( this.direction );\r\n\t\tconst b1 = - _diff.dot( _segDir );\r\n\t\tconst c = _diff.lengthSq();\r\n\t\tconst det = Math.abs( 1 - a01 * a01 );\r\n\t\tlet s0, s1, sqrDist, extDet;\r\n\r\n\t\tif ( det > 0 ) {\r\n\r\n\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\textDet = segExtent * det;\r\n\r\n\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\tconst invDet = 1 / det;\r\n\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\r\n\r\n\t\t}\r\n\r\n\t\treturn sqrDist;\r\n\r\n\t}\r\n\r\n\tintersectSphere( sphere, target = new Vector3()) {\r\n\r\n\t\t_vector.subVectors( sphere.center, this.origin );\r\n\t\tconst tca = _vector.dot( this.direction );\r\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\r\n\t\tconst radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\tconst thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\tconst t0 = tca - thc;\r\n\r\n\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\tconst t1 = tca + thc;\r\n\r\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t// test to see if t0 is behind the ray:\r\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\tif ( t0 < 0 ) return this.at( t1, target );\r\n\r\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\treturn this.at( t0, target );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\tdistanceToPlane( plane ) {\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t : null;\r\n\r\n\t}\r\n\r\n\tintersectPlane( plane, target ) {\r\n\r\n\t\tconst t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, target );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tintersectBox( box, target ) {\r\n\r\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tconst invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tconst origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn this.intersectBox( box, _vector ) !== null;\r\n\r\n\t}\r\n\r\n\tintersectTriangle( a, b, c, backfaceCulling, target) {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t_edge1.subVectors( b, a );\r\n\t\t_edge2.subVectors( c, a );\r\n\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\tlet DdN = this.direction.dot( _normal );\r\n\t\tlet sign;\r\n\r\n\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\tsign = 1;\r\n\r\n\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\tsign = - 1;\r\n\t\t\tDdN = - DdN;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t_diff.subVectors( this.origin, a );\r\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t// b1 < 0, no intersection\r\n\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t// b2 < 0, no intersection\r\n\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// b1+b2 > 1, no intersection\r\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Line intersects triangle, check if ray does.\r\n\t\tconst QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t// t < 0, no intersection\r\n\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Ray intersects triangle.\r\n\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix4 ) {\r\n\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\n\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _v1$1 = /*@__PURE__*/ new Vector3();\r\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\r\nconst _toPoint = /*@__PURE__*/ new Vector3();\r\n\r\nclass Sphere {\r\n\r\n\tconstructor( center = new Vector3(), radius = - 1 ) {\r\n\r\n\t\tthis.center = center;\r\n\t\tthis.radius = radius;\r\n\r\n\t}\r\n\r\n\tset( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( points, optionalCenter ) {\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_box.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t}\r\n\r\n\t\tlet maxRadiusSq = 0;\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tisEmpty() {\r\n\r\n\t\treturn ( this.radius < 0 );\r\n\r\n\t}\r\n\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.center.set( 0, 0, 0 );\r\n\t\tthis.radius = - 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t}\r\n\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t}\r\n\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t}\r\n\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t}\r\n\r\n\tclampPoint( point, target ) {\r\n\r\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\ttarget.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tgetBoundingBox( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t// Empty sphere produces empty bounding box\r\n\t\t\ttarget.makeEmpty();\r\n\t\t\treturn target;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.set( this.center, this.center );\r\n\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\texpandByPoint( point ) {\r\n\r\n    if ( this.isEmpty() ) {\r\n\t\t\tthis.center.copy( point );\r\n\t\t\tthis.radius = 0;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\r\n\r\n\t\t_toPoint.subVectors( point, this.center );\r\n\r\n\t\tconst lengthSq = _toPoint.lengthSq();\r\n\r\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tconst length = Math.sqrt( lengthSq );\r\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\r\n\r\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\r\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\r\n\t\t\t// the whole missing distance were just added to radius.\r\n\r\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\r\n\t\t\tthis.radius += missingRadiusHalf;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tunion( sphere ) {\r\n\r\n    // handle empty sphere cases\r\n\t\tif ( sphere.isEmpty() ) {\r\n\t\t\treturn;\r\n\t\t} else if ( this.isEmpty() ) {\r\n\t\t\tthis.copy( sphere );\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\r\n\r\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\r\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\r\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\r\n\r\n\t\t if ( this.center.equals( sphere.center ) === true ) {\r\n\r\n\t\t\t _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\r\n\r\n\t\t}\r\n\r\n\t\tthis.expandByPoint( _v1$1.copy( sphere.center ).add( _toFarthestPoint ) );\r\n\t\tthis.expandByPoint( _v1$1.copy( sphere.center ).sub( _toFarthestPoint ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\n\n/**\r\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n *\r\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\r\n * The azimuthal angle (theta) is measured from the positive z-axis.\r\n */\r\n\r\nclass Spherical {\r\n\r\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi; // polar angle\r\n\t\tthis.theta = theta; // azimuthal angle\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tset( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi;\r\n\t\tthis.theta = theta;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tthis.radius = other.radius;\r\n\t\tthis.phi = other.phi;\r\n\t\tthis.theta = other.theta;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// restrict phi to be between EPS and PI-EPS\r\n\tmakeSafe() {\r\n\r\n\t\tconst EPS = 0.000001;\r\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromVector3( v ) {\r\n\r\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t}\r\n\r\n\tsetFromCartesianCoords( x, y, z ) {\r\n\r\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\tthis.theta = 0;\r\n\t\t\tthis.phi = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vab = /*@__PURE__*/ new Vector3();\r\nconst _vac = /*@__PURE__*/ new Vector3();\r\nconst _vbc = /*@__PURE__*/ new Vector3();\r\nconst _vap = /*@__PURE__*/ new Vector3();\r\nconst _vbp = /*@__PURE__*/ new Vector3();\r\nconst _vcp = /*@__PURE__*/ new Vector3();\r\n\r\nclass Triangle {\r\n\r\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t}\r\n\r\n\tstatic getNormal( a, b, c, target ) {\r\n\r\n\t\ttarget.subVectors( c, b );\r\n\t\t_v0.subVectors( a, b );\r\n\t\ttarget.cross( _v0 );\r\n\r\n\t\tconst targetLengthSq = target.lengthSq();\r\n\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t}\r\n\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tstatic getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t_v0.subVectors( c, a );\r\n\t\t_v1.subVectors( b, a );\r\n\t\t_v2.subVectors( point, a );\r\n\r\n\t\tconst dot00 = _v0.dot( _v0 );\r\n\t\tconst dot01 = _v0.dot( _v1 );\r\n\t\tconst dot02 = _v0.dot( _v2 );\r\n\t\tconst dot11 = _v1.dot( _v1 );\r\n\t\tconst dot12 = _v1.dot( _v2 );\r\n\r\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tconst invDenom = 1 / denom;\r\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t}\r\n\r\n\tstatic containsPoint( point, a, b, c ) {\r\n\r\n\t\tthis.getBarycoord( point, a, b, c, _v3 );\r\n\r\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t}\r\n\r\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\r\n\r\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\r\n\r\n\t\ttarget.set( 0, 0 );\r\n\t\ttarget.addScaledVector( uv1, _v3.x );\r\n\t\ttarget.addScaledVector( uv2, _v3.y );\r\n\t\ttarget.addScaledVector( uv3, _v3.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\tstatic isFrontFacing( a, b, c, direction ) {\r\n\r\n\t\t_v0.subVectors( c, b );\r\n\t\t_v1.subVectors( a, b );\r\n\r\n\t\t// strictly front facing\r\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t}\r\n\r\n\tset( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// setFromAttributeAndIndices( attribute, i0, i1, i2 ) {\r\n\r\n\t// \tthis.a.fromBufferAttribute( attribute, i0 );\r\n\t// \tthis.b.fromBufferAttribute( attribute, i1 );\r\n\t// \tthis.c.fromBufferAttribute( attribute, i2 );\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\tcopy( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetArea() {\r\n\r\n\t\t_v0.subVectors( this.c, this.b );\r\n\t\t_v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\r\n\r\n\t}\r\n\r\n\tgetMidpoint( target ) {\r\n\r\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t}\r\n\r\n\tgetNormal( target ) {\r\n\r\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetPlane( target ) {\r\n\r\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tgetBarycoord( point, target ) {\r\n\r\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\tgetUV( point, uv1, uv2, uv3, target ) {\r\n\r\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\r\n\r\n\t}\r\n\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\tisFrontFacing( direction ) {\r\n\r\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t}\r\n\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsTriangle( this );\r\n\r\n\t}\r\n\r\n\tclosestPointToPoint( p, target ) {\r\n\r\n\t\tconst a = this.a, b = this.b, c = this.c;\r\n\t\tlet v, w;\r\n\r\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t_vab.subVectors( b, a );\r\n\t\t_vac.subVectors( c, a );\r\n\t\t_vap.subVectors( p, a );\r\n\t\tconst d1 = _vab.dot( _vap );\r\n\t\tconst d2 = _vac.dot( _vap );\r\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\treturn target.copy( a );\r\n\r\n\t\t}\r\n\r\n\t\t_vbp.subVectors( p, b );\r\n\t\tconst d3 = _vab.dot( _vbp );\r\n\t\tconst d4 = _vac.dot( _vbp );\r\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\treturn target.copy( b );\r\n\r\n\t\t}\r\n\r\n\t\tconst vc = d1 * d4 - d3 * d2;\r\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t}\r\n\r\n\t\t_vcp.subVectors( p, c );\r\n\t\tconst d5 = _vab.dot( _vcp );\r\n\t\tconst d6 = _vac.dot( _vcp );\r\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\treturn target.copy( c );\r\n\r\n\t\t}\r\n\r\n\t\tconst vb = d5 * d2 - d1 * d6;\r\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t}\r\n\r\n\t\tconst va = d3 * d6 - d5 * d4;\r\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t_vbc.subVectors( c, b );\r\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t}\r\n\r\n\t\t// face region\r\n\t\tconst denom = 1 / ( va + vb + vc );\r\n\t\t// u = va * denom\r\n\t\tv = vb * denom;\r\n\t\tw = vc * denom;\r\n\r\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t}\r\n\r\n\tequals( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n}\n\nclass Vector4 {\r\n\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\tVector4.prototype.isVector4 = true;\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t}\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.z;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.z = value;\r\n\r\n\t}\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.w;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.w = value;\r\n\r\n\t}\r\n\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetW( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\t\tthis.w *= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\tthis.w *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\tsetAxisAngleFromQuaternion( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\tthis.x = 1;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = q.x / s;\r\n\t\t\tthis.y = q.y / s;\r\n\t\t\tthis.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetAxisAngleFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tlet angle, x, y, z; // variables for result\r\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tconst xx = ( m11 + 1 ) / 2;\r\n\t\t\tconst yy = ( m22 + 1 ) / 2;\r\n\t\t\tconst zz = ( m33 + 1 ) / 2;\r\n\t\t\tconst xy = ( m12 + m21 ) / 4;\r\n\t\t\tconst xz = ( m13 + m31 ) / 4;\r\n\t\t\tconst yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t}\r\n\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\troundToZero() {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t}\r\n\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t}\r\n\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t}\r\n\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t}\r\n\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t}\r\n\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t// fromBufferAttribute( attribute, index ) {\r\n\r\n\t// \tthis.x = attribute.getX( index );\r\n\t// \tthis.y = attribute.getY( index );\r\n\t// \tthis.z = attribute.getZ( index );\r\n\t// \tthis.w = attribute.getW( index );\r\n\r\n\t// \treturn this;\r\n\r\n\t// }\r\n\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\t\tthis.w = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\t\tyield this.w;\r\n\r\n\t}\r\n\r\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, BackSide, BasicDepthPacking, BasicShadowMap, Box2, Box3, ByteType, CineonToneMapping, ClampToEdgeWrapping, Color, ColorManagement, CubeReflectionMapping, CubeRefractionMapping, CubeUVReflectionMapping, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, CustomBlending, CustomToneMapping, Cylindrical, DecrementStencilOp, DecrementWrapStencilOp, DepthFormat, DepthStencilFormat, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, FloatType, FrontSide, GLSL1, GLSL3, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, HalfFloatType, IncrementStencilOp, IncrementWrapStencilOp, IntType, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Line3, LinearEncoding, LinearFilter, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToSRGB, LinearToneMapping, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, MathUtils$1 as MathUtils, Matrix3, Matrix4, MaxEquation, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, ObjectSpaceNormalMap, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, PCFShadowMap, PCFSoftShadowMap, Plane, Quaternion, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBFormat, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, Ray, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, SRGBColorSpace, SRGBToLinear, ShortType, Sphere, Spherical, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, UVMapping, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, sRGBEncoding };\n", "//------------------------------------------------------------------------------\nimport {\n    Livelink,\n    OffscreenSurface,\n    RelativeRect,\n    Viewport,\n    Vec3,\n    Quat,\n    Entity,\n    CameraProjection,\n    RenderGraphDataObject,\n    Transform,\n} from \"@3dverse/livelink\";\nimport { XRContext } from \"./XRContext\";\nimport { Quaternion, Vector3, Matrix4 } from \"threejs-math\";\n\n//------------------------------------------------------------------------------\ntype XRViewports = Array<{ xr_view: XRView; xr_viewport: XRViewport; livelink_viewport: Viewport }>;\n\n//------------------------------------------------------------------------------\nfunction createPromiseWithResolvers<T>(): {\n    promise: Promise<T>;\n    resolve: (value: T) => void;\n    reject: (reason?: unknown) => void;\n} {\n    let resolve: (value: T) => void;\n    let reject: (reason?: unknown) => void;\n    const promise = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return { promise, resolve: resolve!, reject: reject! };\n}\n\n//------------------------------------------------------------------------------\n/**\n * @experimental\n */\nexport class WebXRHelper {\n    //--------------------------------------------------------------------------\n    // TODO: a better approach (cameras with a parent entity) than relying on\n    // cameras_origin & center_eye. It'd be static because to be used from\n    // WebXRCamera.onCreate() but it's not the right interface, we'd need a way\n    // to create an entity and set parent after creation (does not work so far),\n    // or place cameras_origin inside the Viewport to make it accessible from\n    // WebXRCamera.onCreate().\n    // static cameras_origin: Entity | null = null;\n    //--------------------------------------------------------------------------\n    /**\n     * Use cameras origin to shift the pose of the XRView\n     */\n    cameras_origin: Omit<Transform, \"eulerOrientation\"> | null = null;\n    #cameras_origin_apply: (cameras: readonly Entity[]) => void;\n    #cameras_origin_unapply: (frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[]) => void;\n\n    //--------------------------------------------------------------------------\n    // References to livelink core\n    #core: Livelink | null = null;\n\n    //--------------------------------------------------------------------------\n    #surface: OffscreenSurface<\"webgl\", { xrCompatible: boolean }>;\n    #overriden_near_plane?: number;\n    #overridden_fovy?: number;\n    #viewports: XRViewports = [];\n    #context: XRContext;\n\n    //--------------------------------------------------------------------------\n    // WebXR API references\n    #session: XRSession | null = null;\n    #mode: XRSessionMode = \"inline\";\n    #forceSingleView: boolean = false;\n    #reference_space: XRReferenceSpace | null = null;\n    #xr_viewports: XRViewport[] = [];\n    #animationFrameRequestId: number = 0;\n\n    //--------------------------------------------------------------------------\n    /**\n     * Test if the provided XR session mode is supported by this browser.\n     * @param mode defines the XR session mode to test\n     * @returns Resolves with boolean indicating if the provided session mode is\n     * supported.\n     */\n    public static async isSessionSupported(mode: XRSessionMode): Promise<boolean> {\n        if (!navigator.xr) {\n            return false;\n        }\n        // When the specs are final, remove supportsSession!\n        // https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/isSessionSupported\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const isSessionSupportedFunction = navigator.xr.isSessionSupported || (navigator.xr as any).supportsSession;\n        if (!isSessionSupportedFunction) {\n            return false;\n        }\n        const isSupported = await isSessionSupportedFunction.call(navigator.xr, mode).catch(console.warn);\n        return isSupported ?? false;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XRSession\n     */\n    get session(): XRSession | null {\n        return this.#session;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XRSessionMode\n     */\n    get mode(): XRSessionMode {\n        return this.#mode;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XRReferenceSpace used to get the pose of the XRView\n     */\n    get reference_space(): XRReferenceSpace | null {\n        return this.#reference_space;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * True if exactly 2 XRView instances are available in the XRSession.\n     */\n    get is_stereo_vision(): boolean {\n        return this.#xr_viewports.length === 2;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Use to override the near plane provided by the projection matrix of the\n     * xr views. Might be useful in the webxr emulator to see things close to\n     * the eyes.\n     */\n    set overriden_near_plane(value: number | undefined) {\n        this.#overriden_near_plane = value;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Disable the application of the transform of the cameras origin\n     */\n    set cameras_origin_transform_enabled(value: boolean) {\n        if (value) {\n            this.#applyCamerasOrigin = this.#cameras_origin_apply;\n            this.#unapplyCamerasOrigin = this.#cameras_origin_unapply;\n        } else {\n            this.#applyCamerasOrigin = () => {};\n            this.#unapplyCamerasOrigin = () => {};\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    constructor(resolution_scale: number = 1.0) {\n        this.#surface = new OffscreenSurface({\n            width: window.innerWidth, // Not sure\n            height: window.innerHeight, // Really not sure\n            context_constructor: XRContext,\n            context_type: \"webgl\",\n            context_options: { xrCompatible: true },\n            resolution_scale,\n        });\n        this.#context = this.#surface.context as XRContext;\n        this.#cameras_origin_apply = this.#applyCamerasOrigin;\n        this.#cameras_origin_unapply = this.#unapplyCamerasOrigin;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Release the XRSession and the rendering OffscreenSurface.\n     */\n    public async release(): Promise<void> {\n        if (this.#session) {\n            this.stop();\n            await this.#session.end().catch(error => console.warn(\"Could not end XR session:\", error));\n        }\n\n        if (this.#core) {\n            for (const { livelink_viewport } of this.#viewports) {\n                this.#core.removeViewport({ viewport: livelink_viewport });\n            }\n        }\n\n        this.#surface.release();\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Get the fake alpha mode flag of the XRContext. If enabled: the alpha\n     * channel is set highest intensity among rgb channels for all pixels with\n     * all rgb intensities inferior than 0.1.\n     */\n    get fakeAlpha(): boolean {\n        return this.#context.fake_alpha_enabled;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Set the fake alpha mode flag of the XRContext. If enabled: the alpha\n     * channel is set highest intensity among rgb channels for all pixels with\n     * all rgb intensities inferior than 0.1.\n     */\n    set fakeAlpha(value: boolean) {\n        this.#context.fake_alpha_enabled = value;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Get fake alpha scale value of the XRContext used to remap fragment\n     * opacity from [0..1] to [0..fakeAlphaScale] if inferior to 1.\n     */\n    get fakeAlphaScale(): number {\n        return this.#context.fake_alpha_scale;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Set fake alpha scale value of the XRContext used to remap fragment\n     * opacity from [0..1] to [0..fakeAlphaScale] if inferior to 1.\n     */\n    set fakeAlphaScale(value: number) {\n        if (value < 0 || value > 1) {\n            throw new Error(\"Fake alpha scale must be between 0 and 1\");\n        }\n        this.#context.fake_alpha_scale = value;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Initialize the XRSession.\n     * @param mode\n     * @param options\n     */\n    public async initialize(\n        mode: XRSessionMode,\n        { xrSessionInit = {}, forceSingleView = false }: { xrSessionInit?: XRSessionInit; forceSingleView?: boolean },\n    ): Promise<XRSession> {\n        this.#mode = mode;\n        this.#forceSingleView = forceSingleView;\n\n        if (!WebXRHelper.isSessionSupported(mode)) {\n            throw new Error(`WebXR \"${mode}\" not supported`);\n        }\n\n        if (this.#session) {\n            console.warn(\"Releasing previous XR session\");\n            await this.release();\n        }\n\n        const spaceTypes: Array<XRReferenceSpaceType | undefined> = [\"local-floor\", \"local\"];\n        let lastError: unknown;\n\n        for (const spaceType of spaceTypes) {\n            const sessionOptions: XRSessionInit = spaceType\n                ? { ...xrSessionInit, requiredFeatures: [...(xrSessionInit.requiredFeatures || []), spaceType] }\n                : xrSessionInit;\n\n            try {\n                this.#session = await navigator.xr!.requestSession(mode, sessionOptions);\n                await this.updateRenderState();\n                await this.setReferenceSpaceType(spaceType);\n                break;\n            } catch (error) {\n                console.warn(\n                    \"Failed to request XR session\",\n                    { spaceType, requiredFeatures: sessionOptions.requiredFeatures },\n                    error,\n                );\n                this.#session?.end();\n                lastError = error;\n            }\n        }\n\n        if (!this.#session) {\n            throw lastError;\n        }\n\n        return this.#session;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Configure the size and scale of the livelink viewports based on the XR views.\n     * @param livelink\n     * @param overscan_fov_factor\n     * @param enable_overscan_surface_scale\n     */\n    public async configureViewports({\n        livelink,\n        overscan_fov_factor,\n        enable_overscan_surface_scale,\n        enable_fake_alpha,\n    }: {\n        livelink: Livelink;\n        overscan_fov_factor?: number;\n        enable_overscan_surface_scale?: boolean;\n        enable_fake_alpha?: boolean;\n    }): Promise<void> {\n        if (this.#core) {\n            this.releaseLivelinkViewports();\n        }\n\n        this.#core = livelink;\n        const xr_views = await this.#getXRViews();\n        if (xr_views.length > 2) {\n            console.error(\"WebXRHelper doesn't support more than 2 eyes yet\");\n            // Though it's not supported we still try to configure all viewports for each views and deal with the 2\n            // first views cameras inside `this.#onXRFrame`.\n        }\n        this.#configureLivelinkViewports(xr_views);\n        this.#configureOverscan({\n            xr_views,\n            fov_factor: overscan_fov_factor,\n            enable_surface_scale: enable_overscan_surface_scale,\n        });\n\n        // AR session needs the FTL background to be pure black for the XRContext shader to simulate the background\n        // transparency while the feature to send the background mask frame from FTL to the client is not implemented.\n        const isAR = this.#mode === \"immersive-ar\";\n        this.fakeAlpha = enable_fake_alpha ?? isAR;\n        const dataJSON = isAR ? { grid: false, displayBackground: false } : undefined;\n\n        this.#core.addViewports({ viewports: this.#viewports.map(({ livelink_viewport }) => livelink_viewport) });\n        for (const index in this.#viewports) {\n            const { xr_view, xr_viewport, livelink_viewport } = this.#viewports[index];\n            await this.#createViewportCamera({ index, xr_view, xr_viewport, viewport: livelink_viewport, dataJSON });\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Obtains a single set of XR views from the XR session.\n     * @returns {Promise<Readonly<XRView[]>>} Resolves with an array of XRView\n     * of the XRSession obtained from the next XRFrame.\n     */\n    #getXRViews(): Promise<Readonly<Array<XRView>>> {\n        const { promise, resolve, reject } = createPromiseWithResolvers<Readonly<Array<XRView>>>();\n\n        let remaining_attempts = 200;\n        const onFirstXRFrame = async (_: DOMHighResTimeStamp, frame: XRFrame): Promise<Array<XRView> | undefined> => {\n            const xr_views = frame.getViewerPose(this.#reference_space!)?.views;\n            if (!xr_views) {\n                if (--remaining_attempts > 0) {\n                    this.#session!.requestAnimationFrame(onFirstXRFrame);\n                } else {\n                    reject(new Error(\"Failed to get XR views.\"));\n                }\n                return;\n            }\n\n            if (this.#forceSingleView && xr_views.length > 1) {\n                console.log(\"WebXRHelper: forcing single view\");\n                resolve(xr_views.slice(0, 1));\n            } else {\n                resolve(xr_views);\n            }\n        };\n\n        this.#animationFrameRequestId = this.#session!.requestAnimationFrame(onFirstXRFrame);\n        return promise;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Compute the rendering OffscreenSurface & XRContext resolution scale and\n     * the camera fovy.\n     * @param xr_views\n     * @param fov_factor\n     * @param enable_surface_scale\n     */\n    #configureOverscan({\n        xr_views,\n        fov_factor = 1.5,\n        enable_surface_scale = true,\n    }: {\n        xr_views: Readonly<Array<XRView>>;\n        fov_factor?: number;\n        enable_surface_scale?: boolean;\n    }): void {\n        if (fov_factor === 1.0) {\n            return;\n        }\n        // `enable_surface_scale` is exposed because there is a bug on iphone with Variant Launch App Clip:\n        //     - react dev tools raises an error inside `Livelink.#onFrameReceived`.\n        //     - debugging shows the error actually throws inside `WebCodecsDecoder.consumeEncodedFrame`, where\n        //       `this.#decoder!.decode(chunk)` throws with \"DataError: Key frame is required\".\n        // So surface scale needs to be disabled on iphone Variant Launch App Clip. Also on XR headsets, too high\n        // resolution kills the performance.\n        // `fov_factor` is exposed for testing purpose from apps.\n        // TODO: `fov_factor` shall probably be adjusted automatically based on the streaming latency.\n        if (enable_surface_scale) {\n            this.#surface.resolution_scale = fov_factor;\n            this.#context.scale_factor = this.#surface.resolution_scale;\n        } else {\n            this.#context.scale_factor = fov_factor;\n        }\n\n        const fovY = xr_views[0].projectionMatrix[5];\n        const original_fov = 2 * Math.atan(1 / fovY);\n        const new_fov = 2 * Math.atan(Math.tan(original_fov / 2) * fov_factor);\n        this.#overridden_fovy = new_fov * (180 / Math.PI);\n\n        console.debug(\n            `%cFOV: ${original_fov * (180 / Math.PI)} -> ${this.#overridden_fovy}, scale factor: ${this.#context.scale_factor}, resolution scale: ${this.#surface.resolution_scale}`,\n            \"color: orange; font-weight: bold; font-size: 1.5em\",\n        );\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Start the XRFrame animation loop.\n     */\n    public start(): void {\n        this.#session!.requestAnimationFrame(this.#onXRFrame);\n    }\n\n    /**\n     * Stop the XRFrame animation loop.\n     */\n    stop(): void {\n        if (this.#animationFrameRequestId && this.#session) {\n            this.#session.cancelAnimationFrame(this.#animationFrameRequestId);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Sets the reference space of the XR session\n     * @param type - https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestReferenceSpace#type\n     * @returns {Promise<XRReferenceSpace>} Resolves with the reference to the new reference space.\n     */\n    public async setReferenceSpaceType(type: XRReferenceSpaceType = \"local\"): Promise<XRReferenceSpace> {\n        this.#reference_space = await this.#session!.requestReferenceSpace(type).catch(async error => {\n            console.error(`Failed to request XR reference space of type ${type}:`, error);\n            throw error;\n        });\n        return this.#reference_space;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Update the XRSesssion render state with the native WebGLREnderingContext\n     * of the viewport's ContextWebGL.\n     * @param layer_init\n     * @returns Resolves when the render state is updated.\n     */\n    public async updateRenderState(layer_init: XRWebGLLayerInit = {}): Promise<void> {\n        const session = this.#session!;\n        const baseLayer = new XRWebGLLayer(session, this.#context.native, layer_init);\n        await session.updateRenderState({ baseLayer });\n        this.#context.frame_buffer = baseLayer.framebuffer;\n        this.#surface.resize(baseLayer.framebufferWidth, baseLayer.framebufferHeight);\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Apply `this.cameras_origin` transformation on the eye(s) to shift the\n     * eye(s) transform in the world.\n     * @param cameras\n     */\n    #applyCamerasOrigin = (cameras: readonly Entity[]): void => {\n        if (!this.cameras_origin) {\n            return;\n        }\n\n        const origin_position = new Vector3().fromArray(this.cameras_origin.position);\n        const origin_quat = new Quaternion().fromArray(this.cameras_origin.orientation);\n        const origin_scale = new Vector3().fromArray(this.cameras_origin.scale);\n        const reversed_origin_matrix = new Matrix4().compose(origin_position, origin_quat, origin_scale).invert();\n\n        const origin_quat_conjugate = origin_quat.conjugate();\n\n        for (const camera of cameras) {\n            const { position, orientation } = camera.global_transform;\n            const transformed_position = new Vector3().fromArray(position);\n            transformed_position.applyMatrix4(reversed_origin_matrix);\n            transformed_position.toArray(position);\n\n            const quaternion = new Quaternion().fromArray(orientation);\n            const transformed_orientation = new Quaternion().multiplyQuaternions(origin_quat_conjugate, quaternion);\n            transformed_orientation.toArray(orientation);\n        }\n    };\n\n    //--------------------------------------------------------------------------\n    /**\n     * Unapply this.cameras_origin transformation on the eye(s) to shift back\n     * the eye(s) transform in the world. This is to find back the original\n     * transform of the headset eyes to place the billboard. We must apply this\n     * inverse transform because we want to use the frame_camera_transform and\n     * not the XRView.transform to place the billboard.\n     * @param views\n     */\n    #unapplyCamerasOrigin = (frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[]): void => {\n        if (!this.cameras_origin) {\n            return;\n        }\n\n        const origin_position = new Vector3().fromArray(this.cameras_origin.position);\n        const origin_quat = new Quaternion().fromArray(this.cameras_origin.orientation);\n        const origin_scale = new Vector3().fromArray(this.cameras_origin.scale);\n        const transform = new Matrix4().compose(origin_position, origin_quat, origin_scale);\n\n        for (const frame_camera_transform of frame_camera_transforms) {\n            const { position, orientation } = frame_camera_transform;\n            const transformed_position = new Vector3().fromArray(position);\n            transformed_position.applyMatrix4(transform);\n            transformed_position.toArray(position);\n\n            const quaternion = new Quaternion().fromArray(orientation);\n            const transformed_orientation = new Quaternion().multiplyQuaternions(origin_quat, quaternion);\n            transformed_orientation.toArray(orientation);\n        }\n    };\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XR session's animation frame loop.\n     * @param time\n     * @param frame\n     */\n    #onXRFrame = (_: DOMHighResTimeStamp, frame: XRFrame): void => {\n        const session = this.#session!;\n        const gl_layer = session.renderState.baseLayer!;\n        const readonly_xr_views = frame.getViewerPose(this.#reference_space!)?.views;\n\n        if (!readonly_xr_views) {\n            session.requestAnimationFrame(this.#onXRFrame);\n            return;\n        }\n\n        let xr_views: XRView[] = [...readonly_xr_views];\n        let xr_viewports: XRViewport[] = [];\n        xr_views.forEach(xr_view => {\n            // TODO: getViewport might return undefined according to typing\n            xr_viewports.push(gl_layer.getViewport(xr_view)!);\n        });\n\n        if (this.#forceSingleView) {\n            xr_views = xr_views.splice(0, 1);\n            xr_viewports = xr_viewports.splice(0, 1);\n        }\n\n        if (this.#xrViewportsHaveChanged(xr_viewports)) {\n            // For now, we end the session if the viewports have changed\n            // TODO: do we really want to waste time checkuing this...?\n            console.error(\"XRViewports have changed, ending the XRSession\");\n            session.end();\n        }\n\n        this.#updateLiveLinkCameras(xr_views);\n        this.#applyCamerasOrigin(this.#surface.cameras);\n\n        const frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[] = xr_viewports.map((_, index) => {\n            const viewport = this.#surface.viewports[index];\n            const { world_position, world_orientation } = viewport.camera_projection!;\n            return {\n                // Copy the transform array to prevent future mutations of the original arrays\n                position: Array.from(world_position) as Vec3,\n                orientation: Array.from(world_orientation) as Quat,\n            } as Pick<Transform, \"position\" | \"orientation\">;\n        });\n\n        this.#unapplyCamerasOrigin(frame_camera_transforms);\n        this.#context.drawXRFrame({ xr_views, xr_viewports, frame_camera_transforms });\n\n        session.requestAnimationFrame(this.#onXRFrame);\n    };\n\n    //--------------------------------------------------------------------------\n    /**\n     * Update the cameras of the LiveLink instance.\n     * @param xr_views\n     */\n    #updateLiveLinkCameras(xr_views: XRView[]): void {\n        this.#surface.cameras.forEach((camera, index) => {\n            const xr_view = xr_views[index];\n            const { position: pos, orientation: quat } = xr_view.transform;\n            const { livelink_viewport } = this.#viewports[index];\n            const position = [pos.x, pos.y, pos.z] as Vec3;\n            const orientation = [quat.x, quat.y, quat.z, quat.w] as Quat;\n\n            camera.local_transform = { position, orientation };\n\n            const new_perspective_lens = this.#computePerspectiveLens(\n                xr_view.projectionMatrix,\n                livelink_viewport.width,\n                livelink_viewport.height,\n            );\n            const { fovy, nearPlane, farPlane, offset } = new_perspective_lens;\n            const has_changed =\n                !camera.perspective_lens ||\n                camera.perspective_lens.fovy !== fovy ||\n                camera.perspective_lens.nearPlane !== nearPlane ||\n                camera.perspective_lens.farPlane !== farPlane ||\n                camera.perspective_lens.offset !== offset;\n            if (has_changed) {\n                // TODO: verify this change check is really necessary or if livelink handles it\n                camera.perspective_lens = new_perspective_lens;\n            }\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Configure the livelink viewports based on the XR views.\n     * @param xr_views\n     */\n    #configureLivelinkViewports(xr_views: readonly XRView[]): void {\n        const gl_layer = this.#session!.renderState.baseLayer!;\n        const xr_eyes = xr_views.map(view => ({ view, viewport: gl_layer.getViewport(view)! }));\n        const xr_viewports = xr_eyes.map(xr_eye => xr_eye.viewport);\n\n        console.debug(\"XR views:\", xr_views);\n        console.debug(\"XR viewports:\", xr_viewports);\n        this.#xr_viewports = xr_viewports;\n\n        const are_xr_viewport_normalized = xr_eyes.every(({ viewport: v }) => {\n            return v.x <= 1 && v.y <= 1 && v.width <= 1 && v.height <= 1;\n        });\n\n        for (const xr_eye of xr_eyes) {\n            const xrViewport = xr_eye.viewport;\n            const rect = new RelativeRect(\n                are_xr_viewport_normalized\n                    ? { left: xrViewport.x, top: xrViewport.y, width: xrViewport.width, height: xrViewport.height }\n                    : {\n                          left: xrViewport.x / gl_layer.framebufferWidth,\n                          top: xrViewport.y / gl_layer.framebufferHeight,\n                          width: xrViewport.width / gl_layer.framebufferWidth,\n                          height: xrViewport.height / gl_layer.framebufferHeight,\n                      },\n            );\n            console.debug(`Viewport for ${xr_eye.view.eye} eye:`, rect);\n            const viewport = new Viewport({ core: this.#core!, rendering_surface: this.#surface, options: { rect } });\n\n            this.#viewports.push({ xr_view: xr_eye.view, xr_viewport: xrViewport, livelink_viewport: viewport });\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     *\n     */\n    releaseLivelinkViewports(): void {\n        for (const viewport of this.#viewports) {\n            this.#surface.removeViewport({ viewport: viewport.livelink_viewport });\n        }\n        this.#viewports.length = 0;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Create the livelink camera with its lens & set the viewport camera projection.\n     * @return Resolves with the created WebXRCamera instances\n     */\n    async #createViewportCamera({\n        index,\n        xr_view,\n        xr_viewport,\n        viewport,\n        dataJSON,\n    }: {\n        index: number | string;\n        xr_view: XRView;\n        xr_viewport: XRViewport;\n        viewport: Viewport;\n        dataJSON?: RenderGraphDataObject;\n    }): Promise<void> {\n        const camera_entity = await this.#core!.scene.newEntity({\n            name: `XR_camera_${xr_view.eye}_${index}`,\n            components: {\n                local_transform: {},\n                perspective_lens: this.#computePerspectiveLens(\n                    xr_view.projectionMatrix,\n                    viewport.width,\n                    viewport.height,\n                ),\n                camera: { renderGraphRef: \"398ee642-030a-45e7-95df-7147f6c43392\", dataJSON },\n                tags: {\n                    value: [\n                        `viewport_x = ${xr_viewport.x.toString()}`,\n                        `viewport_y = ${xr_viewport.y.toString()}`,\n                        `viewport_width = ${xr_viewport.width.toString()}`,\n                        `viewport_height = ${xr_viewport.height.toString()}`,\n                        `recommanded_scale = ${xr_view.recommendedViewportScale?.toString() || \"?\"}`,\n                    ],\n                },\n            },\n            options: { delete_on_client_disconnection: true, auto_broadcast: false },\n        });\n\n        viewport.camera_projection = new CameraProjection({ camera_entity, viewport });\n        console.debug(`Created camera entity for ${xr_view.eye} eye:`, viewport);\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Extract the attributes of the perspective lens component from a\n     * projection matrix and a viewport size.\n     * @param projectionMatrix\n     * @param viewportWidth\n     * @param viewportHeight\n     * @returns {object} { fovy, aspectRatio, nearPlane, farPlane }\n     */\n    #computePerspectiveLens(\n        projectionMatrix: Float32Array,\n        viewportWidth: number,\n        viewportHeight: number,\n    ): { fovy: number; aspectRatio: number; nearPlane: number; farPlane: number; offset: [number, number] } {\n        const aspectRatio = viewportWidth / viewportHeight;\n        const fovy = this.#overridden_fovy ?? Math.atan(1 / projectionMatrix[5]) * (180 / Math.PI) * 2;\n        let nearPlane = projectionMatrix[14] / (projectionMatrix[10] - 1);\n        if (this.is_stereo_vision && this.cameras_origin && this.cameras_origin.scale[0] !== 1) {\n            // if using stereo vision and the cameras origin has a scale then use it\n            nearPlane *= 1 / this.cameras_origin.scale[0];\n        }\n\n        const farPlane = projectionMatrix[14] / (projectionMatrix[10] + 1);\n        const offset = [projectionMatrix[8], projectionMatrix[9] * -1] as [number, number];\n        return { fovy, aspectRatio, nearPlane: this.#overriden_near_plane || nearPlane, farPlane, offset };\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Check if the XRViewport instances passed as parameters are distinct from\n     * the ones of the last XRFrame.\n     * @param xr_views\n     * @returns True if the XR viewports have changed\n     */\n    #xrViewportsHaveChanged(xr_viewports: XRViewport[]): boolean {\n        if (this.#xr_viewports.length === 0) {\n            return true;\n        }\n        return xr_viewports.some((xr_viewport, index) => {\n            const previous_xr_viewport = this.#xr_viewports[index];\n            if (!previous_xr_viewport) {\n                return true;\n            }\n            return (\n                previous_xr_viewport.width !== xr_viewport.width ||\n                previous_xr_viewport.height !== xr_viewport.height ||\n                previous_xr_viewport.x !== xr_viewport.x ||\n                previous_xr_viewport.y !== xr_viewport.y\n            );\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     *\n     */\n    get resolution_scale(): number {\n        return this.#surface.resolution_scale;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     *\n     */\n    set resolution_scale(value: number) {\n        this.#surface.resolution_scale = value;\n    }\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "//------------------------------------------------------------------------------\nimport type { Quat, Vec3 } from \"@3dverse/livelink.core\";\n\n//------------------------------------------------------------------------------\nimport { mat4, quat, vec2, vec3 } from \"gl-matrix\";\n\n//------------------------------------------------------------------------------\nimport { ContextProvider, FrameMetaData, FrameSection, Transform } from \"@3dverse/livelink\";\n\n/**\n * @experimental\n * @category Rendering Contexts\n */\nexport class XRContext extends ContextProvider {\n    /**\n     *\n     */\n    #context: WebGLRenderingContext | WebGL2RenderingContext;\n\n    /**\n     * The WebGLRenderingContext of the canvas\n     */\n    #texture_ref: WebGLTexture | null = null;\n\n    /**\n     * The WebGLRenderingContext of the canvas\n     */\n    #shader_program: WebGLProgram | null = null;\n\n    /**\n     * The alternative frame buffer to draw on.\n     */\n    #frame_buffer: WebGLFramebuffer | null = null;\n\n    /**\n     *\n     */\n    #last_frame_section: FrameSection | null = null;\n\n    /**\n     *\n     */\n    screen_distance: number = 25;\n\n    /**\n     *\n     */\n    scale_factor: number = 1;\n\n    /**\n     *\n     */\n    fake_alpha_enabled: boolean = false;\n\n    /**\n     *\n     */\n    fake_alpha_scale: number = 1;\n\n    /**\n     *\n     */\n    readonly #neutral_direction: vec3 = vec3.fromValues(0, 0, -1);\n\n    /**\n     *\n     */\n    #billboard_position: vec3 = vec3.create();\n    #billboard_model_matrix: mat4 = mat4.create();\n    #projection_offset: vec2 = vec2.create();\n\n    /**\n     *\n     */\n    #camera_position: vec3 = vec3.create();\n    #camera_orientation: quat = quat.create();\n    #camera_direction: vec3 = vec3.create();\n\n    /**\n     *\n     */\n    get native(): WebGLRenderingContext | WebGL2RenderingContext {\n        return this.#context;\n    }\n\n    /**\n     *\n     */\n    set frame_buffer(fb: WebGLFramebuffer) {\n        this.#frame_buffer = fb;\n    }\n\n    /**\n     *\n     */\n    constructor(\n        canvas: HTMLCanvasElement | OffscreenCanvas,\n        context_type: \"webgl\" | \"webgl2\" = \"webgl\",\n        context_attributes?: WebGLContextAttributes & { xrCompatible?: boolean },\n    ) {\n        super();\n\n        const context = canvas.getContext(context_type, context_attributes);\n        if (context === null) {\n            throw new Error(`Cannot create a ${context_type} context from canvas`);\n        }\n\n        this.#context =\n            context_type === \"webgl\" ? (context as WebGLRenderingContext) : (context as WebGL2RenderingContext);\n\n        this.#initShaderProgram();\n        this.#initBuffers();\n        this.#initTexture();\n    }\n\n    /**\n     *\n     */\n    drawFrameSection({ frame_section }: { frame_section: FrameSection }): void {\n        this.#last_frame_section = frame_section;\n    }\n\n    /**\n     *\n     */\n    get meta_data(): FrameMetaData | null {\n        return this.#last_frame_section?.meta_data || null;\n    }\n\n    /**\n     *\n     */\n    drawXRFrame({\n        xr_views,\n        xr_viewports,\n        frame_camera_transforms,\n    }: {\n        xr_views: XRView[];\n        xr_viewports: XRViewport[];\n        frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[];\n    }): void {\n        if (!this.#last_frame_section) {\n            return;\n        }\n\n        const gl = this.#context;\n\n        if (this.#frame_buffer !== null) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.#frame_buffer);\n        }\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n        const sizeLocation = gl.getUniformLocation(this.#shader_program!, \"size\");\n        const offsetLocation = gl.getUniformLocation(this.#shader_program!, \"offset\");\n        const viewMatrixLocation = gl.getUniformLocation(this.#shader_program!, \"viewMatrix\");\n        const viewOffsetLocation = gl.getUniformLocation(this.#shader_program!, \"viewOffset\");\n\n        const projectionMatrixLocation = gl.getUniformLocation(this.#shader_program!, \"projectionMatrix\");\n        const billboardMatrixLocation = gl.getUniformLocation(this.#shader_program!, \"billboardMatrix\");\n        const fakeAlphaEnabledLocation = gl.getUniformLocation(this.#shader_program!, \"fakeAlphaEnabled\");\n        const fakeAlphaScaleLocation = gl.getUniformLocation(this.#shader_program!, \"fakeAlphaScale\");\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.#texture_ref);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.#last_frame_section.pixels);\n\n        const fovY = Math.atan(1 / xr_views[0].projectionMatrix[5]) * 2;\n\n        const aspectRatio = xr_viewports[0].width / xr_viewports[0].height;\n        const scaleY = this.scale_factor * this.screen_distance * Math.tan(fovY * 0.5);\n        const scaleX = scaleY * aspectRatio;\n\n        const viewportWidth = this.#last_frame_section.section.width / xr_views.length;\n        const viewportHeight = this.#last_frame_section.section.height;\n\n        gl.uniform2fv(sizeLocation, [viewportWidth, viewportHeight]);\n\n        const combinedViewportWidth = xr_viewports.reduce((acc, { width }) => acc + width, 0);\n\n        for (let index = 0; index < xr_views.length; index++) {\n            const xr_view = xr_views[index];\n            const xr_viewport = xr_viewports[index];\n            const frame_camera_transform = frame_camera_transforms[index];\n            vec3.set(\n                this.#camera_position,\n                frame_camera_transform.position[0],\n                frame_camera_transform.position[1],\n                frame_camera_transform.position[2],\n            );\n\n            quat.set(\n                this.#camera_orientation,\n                frame_camera_transform.orientation[0],\n                frame_camera_transform.orientation[1],\n                frame_camera_transform.orientation[2],\n                frame_camera_transform.orientation[3],\n            );\n\n            // Compute the billboard position from the camera position and orientation\n            vec3.transformQuat(this.#camera_direction, this.#neutral_direction, this.#camera_orientation);\n            vec3.scaleAndAdd(\n                this.#billboard_position,\n                this.#camera_position,\n                this.#camera_direction,\n                this.screen_distance,\n            );\n\n            this.#projection_offset[0] = xr_view.projectionMatrix[8];\n            this.#projection_offset[1] = xr_view.projectionMatrix[9];\n\n            const billboardMatrix = this.#computeBillboardMatrix(this.#billboard_position, scaleX, scaleY);\n            gl.uniform2fv(viewOffsetLocation, this.#projection_offset);\n\n            gl.viewport(xr_viewport.x, xr_viewport.y, xr_viewport.width, xr_viewport.height);\n            gl.uniformMatrix4fv(viewMatrixLocation, false, xr_view.transform.inverse.matrix);\n            gl.uniformMatrix4fv(projectionMatrixLocation, false, xr_view.projectionMatrix);\n            gl.uniformMatrix4fv(billboardMatrixLocation, false, billboardMatrix);\n            gl.uniform1i(fakeAlphaEnabledLocation, this.fake_alpha_enabled ? 1 : 0);\n            gl.uniform1f(fakeAlphaScaleLocation, this.fake_alpha_scale);\n\n            const viewport_offset = xr_viewport.x / combinedViewportWidth;\n            const frame_offset =\n                this.#last_frame_section.section.left + viewport_offset * this.#last_frame_section.section.width;\n            gl.uniform2fv(offsetLocation, [frame_offset, this.#last_frame_section.section.top]);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        }\n    }\n\n    /**\n     *\n     */\n    override refreshSize(): void {}\n\n    /**\n     *\n     */\n    release(): void {\n        const gl = this.#context;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    /**\n     *\n     */\n    #computeBillboardMatrix(billboard_position: vec3, scaleX: number, scaleY: number): Float32Array {\n        mat4.fromRotationTranslationScale(\n            this.#billboard_model_matrix,\n            this.#camera_orientation,\n            billboard_position,\n            vec3.fromValues(scaleX, scaleY, 1),\n        );\n\n        return this.#billboard_model_matrix as Float32Array;\n    }\n\n    /**\n     *\n     */\n    #initShaderProgram(): void {\n        const gl = this.#context!;\n        // Vertex shader\n        const vertex_shader_source = `\n            attribute vec2 position;\n            varying vec2 texCoord;\n\n            uniform mat4 viewMatrix;\n            uniform mat4 projectionMatrix;\n            uniform vec2 scale;\n            uniform mat4 billboardMatrix;\n\n            uniform vec2 size;\n            uniform vec2 offset;\n            uniform vec2 viewOffset;\n\n            void main() {\n                texCoord = (position + 1.0) * 0.5;\n                texCoord.y = 1.0 - texCoord.y;\n                texCoord = size * texCoord + offset;\n                gl_Position = projectionMatrix * viewMatrix * billboardMatrix * vec4(position + viewOffset, 0.0, 1.0);\n            }`;\n        const vertex_shader = gl.createShader(gl.VERTEX_SHADER)!;\n        gl.shaderSource(vertex_shader, vertex_shader_source);\n        gl.compileShader(vertex_shader);\n        if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\n            console.error(\"Vertex shader failed to compile: \" + gl.getShaderInfoLog(vertex_shader));\n        }\n\n        // Fragment shader\n        const fragment_shader_source = `\n            precision mediump float;\n            varying vec2 texCoord;\n            uniform sampler2D texture;\n            uniform int fakeAlphaEnabled;\n            uniform float fakeAlphaScale;\n\n            float luminance(vec3 color) {\n                // sRGB luminance approximation\n                return dot(color, vec3(0.299, 0.587, 0.114));\n            }\n\n            void main() {\n                gl_FragColor = texture2D(texture, texCoord);\n                if(fakeAlphaEnabled == 1) {\n                    // Use luminance to determine alpha so values close to dark are transparent and smoothly fade\n                    // to prevent noise around object's edges\n                    float luma = luminance(gl_FragColor.rgb);\n                    float alpha = smoothstep(0.02, 0.1, luma);\n                    gl_FragColor.a = alpha;\n\n                    // remap [0..1] \u2192 [0..fakeAlphaScale] to see through opaque objects in AR\n                    if(fakeAlphaScale < 1.0) {\n                        gl_FragColor.a *= fakeAlphaScale;\n                    }\n\n                    // Premultiply RGB by alpha to avoid color bleeding on transparent edges\n                    // (required for correct blending in compositing / XR rendering)\n                    gl_FragColor.rgb *= alpha;\n                }\n            }`;\n        const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER)!;\n        gl.shaderSource(fragment_shader, fragment_shader_source);\n        gl.compileShader(fragment_shader);\n        if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\n            console.error(\"Fragment shader failed to compile: \" + gl.getShaderInfoLog(fragment_shader));\n        }\n\n        // Shader program\n        const shader_program = gl.createProgram()!;\n        gl.attachShader(shader_program, vertex_shader);\n        gl.attachShader(shader_program, fragment_shader);\n        gl.linkProgram(shader_program);\n        gl.useProgram(shader_program);\n        if (!gl.getProgramParameter(shader_program, gl.LINK_STATUS)) {\n            console.error(\"Program failed to compile: \" + gl.getProgramInfoLog(shader_program));\n        }\n        gl.useProgram(shader_program);\n        this.#shader_program = shader_program;\n    }\n\n    /**\n     *\n     */\n    #initBuffers(): void {\n        const gl = this.#context!;\n\n        const vertex_buffer = gl.createBuffer();\n        const vertices = new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n        const position_attribute_location = gl.getAttribLocation(this.#shader_program!, \"position\");\n        gl.enableVertexAttribArray(position_attribute_location);\n        gl.vertexAttribPointer(position_attribute_location, 2, gl.FLOAT, false, 0, 0);\n    }\n\n    /**\n     *\n     */\n    #initTexture(): void {\n        const gl = this.#context!;\n        this.#texture_ref = gl.createTexture()!;\n        gl.bindTexture(gl.TEXTURE_2D, this.#texture_ref);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        const texture_uniform_location = gl.getUniformLocation(this.#shader_program!, \"texture\");\n        gl.uniform1i(texture_uniform_location, 0);\n    }\n}\n", "//------------------------------------------------------------------------------\nimport React, {\n    JSX,\n    type PropsWithChildren,\n    createContext,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\n\n//------------------------------------------------------------------------------\nimport { LivelinkContext } from \"@3dverse/livelink-react\";\nimport { WebXRHelper } from \"../WebXRHelper\";\n\n//------------------------------------------------------------------------------\n/**\n * Context that provides utilities for WebXR.\n *\n * @category Contexts\n */\nexport const WebXRContext = createContext<{ webXRHelper: WebXRHelper | null; xrSession: XRSession | null }>({\n    webXRHelper: null,\n    xrSession: null,\n});\n\n//------------------------------------------------------------------------------\n/**\n * A component that provides a WebXR session\n *\n * @param params\n * @param params.mode - The mode of the XR session.\n * @param params.resolution_scale - The resolution scale of the XR session.\n * @param params.onSessionEnd - The callback to call when the XR session ends.\n * @param params.forceSingleView - Whether to force single view mode.\n * @param params.requiredFeatures - The required features for the XR session.\n * @param params.optionalFeatures - The optional features for the XR session.\n * @param params.domOverlayRoot - Specifies a custom DOM overlay root element.\n *\n * @category Components\n */\nexport function WebXR({\n    children,\n    mode,\n    resolutionScale = 1.0,\n    requiredFeatures = [],\n    optionalFeatures = [],\n    forceSingleView,\n    overscanFovFactor,\n    enableOverscanSurfaceScale,\n    enableFakeAlpha,\n    domOverlayRoot,\n    onSessionEnd,\n}: PropsWithChildren<{\n    mode: XRSessionMode;\n    resolutionScale?: number;\n    requiredFeatures?: string[];\n    optionalFeatures?: string[];\n    forceSingleView?: boolean;\n    overscanFovFactor?: number;\n    enableOverscanSurfaceScale?: boolean;\n    enableFakeAlpha?: boolean;\n    domOverlayRoot?: Element;\n    onSessionEnd?: () => void;\n}>): JSX.Element {\n    //--------------------------------------------------------------------------\n    const { instance } = useContext(LivelinkContext);\n\n    //--------------------------------------------------------------------------\n    const containerRef = useRef<HTMLDivElement>(null);\n    const webXRHelper = useMemo(\n        () => new WebXRHelper(resolutionScale),\n        [mode, requiredFeatures.join(\"-\"), optionalFeatures.join(\"-\"), forceSingleView, domOverlayRoot],\n    );\n    const initializationPromiseRef = useRef<Promise<void> | null>(null);\n    const [xrSession, setXrSession] = useState<XRSession | null>(null);\n\n    //--------------------------------------------------------------------------\n    useEffect(() => {\n        if (!webXRHelper) {\n            return;\n        }\n\n        webXRHelper.resolution_scale = resolutionScale;\n    }, [webXRHelper, resolutionScale]);\n\n    //--------------------------------------------------------------------------\n    useEffect(() => {\n        if (!xrSession || !onSessionEnd) {\n            return;\n        }\n\n        xrSession.addEventListener(\"end\", onSessionEnd);\n\n        return (): void => {\n            xrSession.removeEventListener(\"end\", onSessionEnd);\n        };\n    }, [xrSession, onSessionEnd]);\n\n    //--------------------------------------------------------------------------\n    useEffect(() => {\n        const rootDomOverlay = domOverlayRoot || containerRef.current;\n        if (!rootDomOverlay || !instance) {\n            return;\n        }\n\n        // Initialize the WebXR session is kept in a ref to avoid\n        // re-initializing it on every render, especially when on strict mode.\n        if (!initializationPromiseRef.current) {\n            console.debug(\"---- Initializing WebXR\");\n\n            initializationPromiseRef.current = webXRHelper\n                .initialize(mode, {\n                    xrSessionInit: {\n                        requiredFeatures,\n                        optionalFeatures: [\"dom-overlay\", ...optionalFeatures],\n                        domOverlay: { root: rootDomOverlay },\n                    },\n                    forceSingleView,\n                })\n                .then(session => {\n                    setXrSession(session);\n                    console.debug(\"---- Setting XR viewports\");\n                    return webXRHelper.configureViewports({\n                        livelink: instance,\n                        overscan_fov_factor: overscanFovFactor,\n                        enable_overscan_surface_scale: enableOverscanSurfaceScale,\n                        enable_fake_alpha: enableFakeAlpha,\n                    });\n                })\n                .then(() => {\n                    console.debug(\"---- WebXR initialized\");\n                    webXRHelper.start();\n                    initializationPromiseRef.current = null;\n                });\n        }\n\n        return (): void => {\n            // This function might be called before the initialization promise\n            // is resolved in strict mode. But this is not a problem since the\n            // webXRHelper cannot release anything before the initialization is done.\n            console.debug(\"---- Releasing WebXR\");\n            webXRHelper.release();\n            setXrSession(null);\n        };\n    }, [webXRHelper, instance]);\n\n    //--------------------------------------------------------------------------\n    return (\n        <WebXRContext.Provider value={{ webXRHelper, xrSession }}>\n            {!domOverlayRoot ? (\n                <div data-role=\"webxr-dom-overlay\" ref={containerRef}>\n                    {children}\n                </div>\n            ) : (\n                <>{children}</>\n            )}\n        </WebXRContext.Provider>\n    );\n}\n", "export * from \"./WebXRHelper\";\nexport * from \"./react\";\n\n//------------------------------------------------------------------------------\n/**\n * Version of the Livelink WebXR library, injected by the build system.\n * @internal\n */\ndeclare const LIVELINK_WEBXR_VERSION: string;\n\n/**\n * Name of the package, injected by the build system.\n * @internal\n */\ndeclare const PACKAGE_NAME: string;\n\n//------------------------------------------------------------------------------\ndeclare global {\n    interface Window {\n        __LIVELINK__: Record<string, string>;\n    }\n}\n//------------------------------------------------------------------------------\nif (typeof window !== \"undefined\") {\n    if (!window.__LIVELINK__) {\n        window.__LIVELINK__ = {};\n    }\n\n    if (Object.prototype.hasOwnProperty.call(window.__LIVELINK__, PACKAGE_NAME)) {\n        console.warn(\"\u26A0\uFE0F WARNING \u26A0\uFE0F Multiple instances of Livelink WebXR being imported.\");\n    } else {\n        window.__LIVELINK__[PACKAGE_NAME] = LIVELINK_WEBXR_VERSION;\n    }\n}\n"],
  "mappings": "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",
  "names": ["dt", "te", "qa", "u", "j", "fn", "te", "me", "ae", "be", "ce", "de", "te", "me", "ae", "be", "EPSILON", "ARRAY_TYPE", "RANDOM", "degree", "y", "i", "create", "out", "mat4_exports", "__export", "add", "adjoint", "clone", "copy", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromQuat2", "fromRotation", "fromRotationTranslation", "fromRotationTranslationScale", "fromRotationTranslationScaleOrigin", "fromScaling", "fromTranslation", "fromValues", "fromXRotation", "fromYRotation", "fromZRotation", "frustum", "getRotation", "getScaling", "getTranslation", "identity", "invert", "lookAt", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "ortho", "orthoNO", "orthoZO", "perspective", "perspectiveFromFieldOfView", "perspectiveNO", "perspectiveZO", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "targetTo", "translate", "transpose", "a", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "a01", "a02", "a03", "a12", "a13", "a23", "a00", "a10", "a11", "a20", "a21", "a22", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "b", "b0", "b1", "b2", "b3", "v", "x", "z", "rad", "axis", "len", "s", "c", "t", "b12", "b20", "b21", "b22", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "translation", "bx", "by", "bz", "bw", "ax", "ay", "az", "aw", "magnitude", "mat", "scaling", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "sx", "sy", "sz", "o", "ox", "oy", "oz", "out0", "out1", "out2", "out4", "out5", "out6", "out8", "out9", "out10", "yx", "zx", "zy", "left", "right", "bottom", "top", "near", "far", "rl", "tb", "nf", "fovy", "aspect", "f", "fov", "upTan", "downTan", "leftTan", "rightTan", "xScale", "yScale", "lr", "bt", "eye", "center", "up", "x0", "x1", "y0", "y1", "z0", "z1", "eyex", "eyey", "eyez", "upx", "upy", "upz", "centerx", "centery", "centerz", "target", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a14", "a15", "b4", "b5", "b6", "b7", "b8", "b9", "b13", "b14", "b15", "quat_exports", "calculateW", "conjugate", "dot", "exp", "fromEuler", "fromMat3", "getAngle", "getAxisAngle", "length", "lerp", "ln", "normalize", "pow", "random", "rotationTo", "setAxes", "setAxisAngle", "slerp", "sqlerp", "sqrLen", "squaredLength", "vec3_exports", "angle", "bezier", "ceil", "cross", "dist", "distance", "div", "divide", "floor", "forEach", "hermite", "inverse", "max", "min", "negate", "round", "scaleAndAdd", "sqrDist", "squaredDistance", "transformMat3", "transformMat4", "transformQuat", "zero", "d", "factorTimes2", "factor1", "factor2", "factor3", "factor4", "inverseFactor", "inverseFactorTimesTwo", "r", "zScale", "m", "qx", "qy", "qz", "qw", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "w2", "p", "mag1", "mag2", "mag", "cosine", "vec", "stride", "offset", "count", "fn", "arg", "l", "out_axis", "dotproduct", "et", "omega", "cosom", "sinom", "scale0", "scale1", "u1", "u2", "u3", "sqrt1MinusU1", "sqrtU1", "invDot", "fTrace", "fRoot", "j", "k", "halfToRad", "cx", "cy", "cz", "tmpvec3", "xUnitVec3", "yUnitVec3", "temp1", "temp2", "matr", "view", "vec2_exports", "transformMat2", "transformMat2d", "p0", "p1", "sinC", "cosC", "XRContext", "_a", "ContextProvider", "canvas", "context_type", "context_attributes", "#context", "#texture_ref", "#shader_program", "#frame_buffer", "#last_frame_section", "#neutral_direction", "#billboard_position", "#billboard_model_matrix", "#projection_offset", "#camera_position", "#camera_orientation", "#camera_direction", "context", "#initShaderProgram", "#initBuffers", "#initTexture", "fb", "frame_section", "xr_views", "xr_viewports", "frame_camera_transforms", "gl", "sizeLocation", "offsetLocation", "viewMatrixLocation", "viewOffsetLocation", "projectionMatrixLocation", "billboardMatrixLocation", "fakeAlphaEnabledLocation", "fakeAlphaScaleLocation", "fovY", "aspectRatio", "scaleY", "scaleX", "viewportWidth", "viewportHeight", "combinedViewportWidth", "acc", "width", "index", "xr_view", "xr_viewport", "frame_camera_transform", "billboardMatrix", "#computeBillboardMatrix", "viewport_offset", "frame_offset", "billboard_position", "vertex_shader_source", "vertex_shader", "fragment_shader_source", "fragment_shader", "shader_program", "vertex_buffer", "vertices", "position_attribute_location", "texture_uniform_location", "createPromiseWithResolvers", "resolve", "reject", "_resolve", "_reject", "WebXRHelper", "resolution_scale", "#cameras_origin_apply", "#cameras_origin_unapply", "#core", "#surface", "#overriden_near_plane", "#overridden_fovy", "#viewports", "#session", "#mode", "#forceSingleView", "#reference_space", "#xr_viewports", "#animationFrameRequestId", "#applyCamerasOrigin", "cameras", "origin_position", "Vector3", "origin_quat", "Quaternion", "origin_scale", "reversed_origin_matrix", "Matrix4", "origin_quat_conjugate", "camera", "position", "orientation", "transformed_position", "quaternion", "#unapplyCamerasOrigin", "transform", "#onXRFrame", "_", "frame", "session", "gl_layer", "readonly_xr_views", "#xrViewportsHaveChanged", "#updateLiveLinkCameras", "viewport", "world_position", "world_orientation", "OffscreenSurface", "mode", "isSessionSupportedFunction", "value", "error", "livelink_viewport", "xrSessionInit", "forceSingleView", "_WebXRHelper", "spaceTypes", "lastError", "spaceType", "sessionOptions", "livelink", "overscan_fov_factor", "enable_overscan_surface_scale", "enable_fake_alpha", "#getXRViews", "#configureLivelinkViewports", "#configureOverscan", "isAR", "dataJSON", "#createViewportCamera", "type", "layer_init", "baseLayer", "promise", "remaining_attempts", "onFirstXRFrame", "fov_factor", "enable_surface_scale", "original_fov", "new_fov", "pos", "quat", "new_perspective_lens", "#computePerspectiveLens", "nearPlane", "farPlane", "xr_eyes", "xr_eye", "are_xr_viewport_normalized", "xrViewport", "rect", "RelativeRect", "Viewport", "camera_entity", "CameraProjection", "projectionMatrix", "previous_xr_viewport", "WebXRContext", "createContext", "WebXR", "children", "resolutionScale", "requiredFeatures", "optionalFeatures", "overscanFovFactor", "enableOverscanSurfaceScale", "enableFakeAlpha", "domOverlayRoot", "onSessionEnd", "instance", "useContext", "LivelinkContext", "containerRef", "useRef", "webXRHelper", "useMemo", "initializationPromiseRef", "xrSession", "setXrSession", "useState", "useEffect", "rootDomOverlay", "React"]
}
