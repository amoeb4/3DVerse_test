/**
 * The gamepad buttons.
 *
 * LeftTrigger and RightTrigger as Buttons are ignored by the engine, use GamepadAxes for triggers instead.
 *
 * @category Inputs
 */
export declare const GamepadButton: {
    readonly A: 0;
    readonly B: 1;
    readonly X: 2;
    readonly Y: 3;
    readonly LeftShoulder: 4;
    readonly RightShoulder: 5;
    readonly LeftTrigger: 6;
    readonly RightTrigger: 7;
    readonly View: 8;
    readonly Menu: 9;
    readonly LeftThumbstick: 10;
    readonly RightThumbstick: 11;
    readonly DPadUp: 12;
    readonly DPadDown: 13;
    readonly DPadLeft: 14;
    readonly DPadRight: 15;
};
/**
 * @category Inputs
 */
export type GamepadButtonType = (typeof GamepadButton)[keyof typeof GamepadButton];
/**
 * The gamepad axes.
 *
 * @category Inputs
 */
export declare const GamepadAxis: {
    readonly LeftThumbstickX: 0;
    readonly LeftThumbstickY: 1;
    readonly RightThumbstickX: 2;
    readonly RightThumbstickY: 3;
    readonly LeftTrigger: 4;
    readonly RightTrigger: 5;
};
/**
 * @category Inputs
 */
export type GamepadAxisType = (typeof GamepadAxis)[keyof typeof GamepadAxis];
/**
 * The gamepad joysticks.
 *
 * @category Inputs
 */
export declare const GamepadJoystick: {
    readonly Left: readonly [0, 1];
    readonly Right: readonly [2, 3];
};
/**
 * @category Inputs
 */
export type GamepadJoystickType = (typeof GamepadJoystick)[keyof typeof GamepadJoystick];
/**
 * It serves as an interface between high level gamepad input representations and the server.
 *
 * @category Inputs
 */
export declare class GamepadInputRelay {
    #private;
    /**
     * Set the value of a single axis.
     *
     * @param params
     * @param params.axis - The axis to set.
     * @param params.value - The value to set. 0 means the axis is centered.
     */
    setAxis: ({ axis, value }: {
        axis: GamepadAxisType;
        value: number;
    }) => void;
    /**
     * Set the values of the two axes composing a joystick.
     *
     * @param params
     * @param params.joystick - The joystick to set.
     * @param params.value - The values to set for the joystick. The first number is the horizontal axis and the second number is the vertical axis. 0 means the joystick is centered.
     */
    setJoystick: ({ joystick, value }: {
        joystick: GamepadJoystickType;
        value: [number, number];
    }) => void;
    /**
     * Set the value of a single button.
     *
     * @param params
     * @param params.button - The button to set.
     * @param params.isPressed - A boolean indicating whether the button is pressed (true) or not (false).
     */
    setButton: ({ button, isPressed }: {
        button: GamepadButtonType;
        isPressed: boolean;
    }) => void;
    /**
     * Set the values of all buttons.
     *
     * @param params
     * @param params.buttons - An array of buttons value, sorted following the indexes referenced by the GamepadButton enum.
     */
    setButtons: ({ buttons }: {
        buttons: boolean[];
    }) => void;
    /**
     * Reset all the input values to their default state.
     */
    resetInput: () => void;
}
//# sourceMappingURL=GamepadInputRelay.d.ts.map