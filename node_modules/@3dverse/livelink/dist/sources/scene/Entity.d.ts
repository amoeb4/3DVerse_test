import type { UUID, Mat4 } from "@3dverse/livelink.core";
import { EntityTransformHandler, Transform } from "./EntityTransformHandler";
import { ScriptEventEmitted, ScriptEventReceived } from "./ScriptEvents";
/**
 * An entity in a scene.
 *
 * An entity is a collection of components.
 *
 * This class embeds a proxy to monitor component access and mark the entity as dirty when
 * a component is added, modified or deleted.
 *
 * All relevant modifications to entities are batched and automatically sent to the server and
 * broadcasted to other clients if the `auto_broadcast` property is set to "on".
 *
 * On top of providing direct access to the components, this class provides helper methods to
 * retrieve the parent entity and the children entities.
 *
 * This class cannot be instantiated directly.
 * Use the {@link Scene.newEntity} or {@link Scene.newEntities} methods on an existing scene to
 * create an entity.
 *
 * @category Scene
 */
export declare class Entity extends EntityTransformHandler {
    #private;
    /**
     * The UUID of the entity.
     *
     * Note that multiple entities can share the same UUID if they are different instances of the
     * same entity brought by multiple instances of the same scene.
     */
    get id(): UUID;
    /**
     * The name of the entity.
     */
    get name(): string;
    /**
     * @deprecated
     * Whether the entity has its components updates broadcasted to other clients.
     */
    get auto_broadcast(): boolean;
    /**
     * @deprecated
     * Set whether the entity has its components updates broadcasted to other clients.
     */
    set auto_broadcast(state: boolean);
    /**
     * Whether the entity is visible.
     */
    get is_visible(): boolean;
    /**
     * Set whether the entity is visible.
     */
    set is_visible(is_visible: boolean);
    /**
     * The parent entity of this entity or null if it has no parent.
     */
    get parent(): Entity | null;
    /**
     * Re-parent the entity by setting a parent entity.
     */
    set parent(parent: Entity | null);
    /**
     * Local transform of the entity.
     */
    get local_transform(): Transform;
    /**
     * Set the local transform of the entity.
     */
    set local_transform(local_transform: Partial<Transform>);
    /**
     * Global transform of the entity.
     */
    get global_transform(): Transform;
    /**
     * Set the global transform of the entity.
     */
    set global_transform(global_transform: Partial<Transform>);
    /**
     * The local space to world space matrix of the entity.
     */
    get ls_to_ws(): Readonly<Mat4>;
    /**
     * The world space to local space matrix of the entity.
     */
    get ws_to_ls(): Readonly<Mat4>;
    /**
     *
     */
    getChildren(): Promise<Entity[]>;
    /**
     * Add an event listener for a script event.
     * Script events are triggered by the server when a script attached to an entity emits an event.
     *
     * @param params
     * @param params.event_map_id - The ID of the event map.
     * @param params.event_name - The name of the event.
     * @param params.onReceived - The callback to be called when the current entity is targetted by the script event.
     * @param params.onEmitted - The callback to be called when the current entity emits the script event.
     */
    addScriptEventListener({ event_map_id, event_name, onReceived, onEmitted, }: {
        event_map_id: UUID;
        event_name: string;
        onReceived?: (evt: ScriptEventReceived) => void;
        onEmitted?: (evt: ScriptEventEmitted) => void;
    }): void;
    /**
     * Remove an event listener for a script event.
     *
     * @param params
     * @param params.event_map_id - The ID of the event map.
     * @param params.event_name - The name of the event.
     * @param params.onReceived - A previously registered callback.
     * @param params.onEmitted - A previously registered callback.
     */
    removeScriptEventListener({ event_map_id, event_name, onReceived, onEmitted, }: {
        event_map_id: UUID;
        event_name: string;
        onReceived?: (evt: ScriptEventReceived) => void;
        onEmitted?: (evt: ScriptEventEmitted) => void;
    }): void;
    /**
     * @experimental
     */
    assignClientToScripts({ client_uuid }: {
        client_uuid: UUID;
    }): Promise<void>;
}
//# sourceMappingURL=Entity.d.ts.map