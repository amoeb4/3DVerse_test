import { ComponentName } from "@3dverse/livelink.core";
/**
 * The event that is fired when an entity is updated, either by adding, modifying or removing
 * components.
 *
 * @event
 * @noInheritDoc
 * @category Scene
 */
export declare class EntityUpdatedEvent extends Event {
    /**
     * The source of the change.
     * - "external": The change was made by another user from another instance of the app or even another app.
     * - "internal": The change was made by the current app.
     */
    readonly change_source: "local" | "external";
    /**
     * The names of the components that were added.
     */
    readonly new_components: Array<ComponentName>;
    /**
     * The names of the components that were updated.
     */
    readonly updated_components: Array<ComponentName>;
    /**
     * The names of the components that were removed.
     */
    readonly deleted_components: Array<ComponentName>;
    /**
     *
     */
    isAnyComponentDirty({ components }: {
        components: Array<ComponentName>;
    }): boolean;
}
/**
 * The event that is fired when the entity visibility changes.
 *
 * @event
 * @noInheritDoc
 * @category Scene
 */
export declare class EntityVisibilityChangedEvent extends Event {
    /**
     * The source of the change.
     * - "external": The visibility change was made by another user from another instance of the app or even another app.
     * - "internal": The visibility change was made by the current app.
     */
    readonly change_source: "local" | "external";
    /**
     * The new visibility state of the entity.
     */
    readonly is_visible: boolean;
}
/**
 * @event
 * @category Scene
 */
export type EntityEvents = {
    "on-entity-updated": EntityUpdatedEvent;
    "on-entity-visibility-changed": EntityVisibilityChangedEvent;
};
//# sourceMappingURL=EntityEvents.d.ts.map