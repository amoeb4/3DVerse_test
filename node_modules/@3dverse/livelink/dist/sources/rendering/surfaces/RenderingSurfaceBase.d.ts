import type { Vec2 } from "@3dverse/livelink.core";
import { Rect, RelativeRect } from "./Rect";
import { Viewport } from "../camera/Viewport";
import { RenderingSurfaceEvents } from "./RenderingSurfaceEvents";
import { TypedEventTarget } from "../../TypedEventTarget";
import { DecodedFrame } from "../streaming/EncodedFrameConsumer";
/**
 * Abstract class for rendering surfaces.
 *
 * A rendering surface represents the final destination of the rendered frame.
 *
 * It is usually backed by an HTML Canvas or an OffscreenCanvas.
 *
 * It can be split into multiple viewports, each with its own camera and render target.
 * The rendering surface if responsible for holding the viewports and their configurations.
 *
 * It is finally responsible for drawing the portions of the final frame to its backing element.
 *
 * @category Rendering Surfaces
 */
export declare abstract class RenderingSurfaceBase extends TypedEventTarget<RenderingSurfaceEvents> {
    #private;
    /**
     * List of viewports bound to the current surface.
     */
    readonly viewports: Array<Viewport>;
    /**
     * Normalized dimensions and offset of the surface relative to the remote rendering surface.
     */
    relative_rect: RelativeRect;
    /**
     * Dimensions of the surface.
     */
    get dimensions(): Vec2;
    /**
     * Width of the surface.
     */
    abstract get width(): number;
    /**
     * Height of the surface.
     */
    abstract get height(): number;
    /**
     * Returns the bounding rectangle of the surface.
     */
    abstract getBoundingRect(): Rect;
    /**
     * Adds a viewport to the current surface.
     *
     * Note that the viewport knows which section of the surface it should draw to using
     * its {@link Viewport.relative_rect} property.
     *
     * @param params
     * @param params.viewport - The viewport to add.
     */
    addViewport({ viewport }: {
        viewport: Viewport;
    }): void;
    /**
     * Removes a viewport from the current surface.
     *
     * @param params
     * @param params.viewport - The viewport to remove.
     */
    removeViewport({ viewport }: {
        viewport: Viewport;
    }): void;
    /**
     * Releases the resources associated with the current surface.
     */
    release(): void;
    /**
     * Returns whether the current surface is valid.
     */
    isValid(): boolean;
    /**
     * Draws the portions of the frame associated with the viewports to the backing element.
     * Keeps a reference to the last frame drawn.
     *
     * @param params
     * @param params.decoded_frame - The frame to draw.
     */
    drawFrame({ decoded_frame }: {
        decoded_frame: DecodedFrame;
    }): void;
    /**
     * Redraws the last frame.
     */
    redrawLastFrame(): void;
}
//# sourceMappingURL=RenderingSurfaceBase.d.ts.map