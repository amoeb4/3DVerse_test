import { RenderingSurfaceBase } from "./RenderingSurfaceBase";
import { Rect } from "./Rect";
import type { ContextProvider } from "../contexts/ContextProvider";
import { DecodedFrame } from "../streaming/EncodedFrameConsumer";
/**
 * @category Rendering Contexts
 */
export type CanvasContextAttributes = CanvasRenderingContext2DSettings | (WebGLContextAttributes & {
    xrCompatible?: boolean;
});
/**
 * @category Rendering Contexts
 */
export type CanvasContextType = "2d" | "webgl" | "webgl2";
/**
 * A rendering surface backed by an HTML canvas.
 *
 * The context can be specified as either 2D, WebGL or WebGL2 along with its attributes.
 *
 * The canvas is automatically resized to match the size of the HTML element it is attached to.
 *
 * @category Rendering Surfaces
 */
export declare class RenderingSurface extends RenderingSurfaceBase {
    #private;
    /**
     * Width of the surface.
     */
    get width(): number;
    /**
     * Height of the surface.
     */
    get height(): number;
    /**
     * HTML canvas on which the final frame is displayed.
     */
    get canvas(): HTMLCanvasElement;
    /**
     * Creates a new rendering surface.
     *
     * @param params
     * @param params.canvas_element - The HTML canvas element or its id.
     * @param params.context_type - The type of context to create.
     * @param params.context_attributes - The attributes of the context.
     */
    constructor({ canvas_element, context_type, context_attributes, }: {
        canvas_element: string | HTMLCanvasElement;
    } & ({
        context_type: "2d";
        context_attributes?: CanvasRenderingContext2DSettings;
    } | {
        context_type: "webgl" | "webgl2";
        context_attributes?: WebGLContextAttributes & {
            xrCompatible?: boolean;
        };
    }));
    /**
     * Releases the resources associated with the surface.
     */
    release(): void;
    /**
     * Returns the context of the surface.
     */
    getContext<ContextType extends ContextProvider>(): ContextType;
    /**
     * Returns the bounding rectangle of the surface.
     */
    getBoundingRect(): Rect;
    /**
     * Draws a frame to the surface.
     *
     * @param params
     * @param params.frame - The frame to draw.
     * @param params.meta_data - The metadata associated with the frame.
     */
    _drawFrame({ decoded_frame }: {
        decoded_frame: DecodedFrame;
    }): void;
}
//# sourceMappingURL=RenderingSurface.d.ts.map