/**
 * @category Rendering Surfaces
 */
export declare class Rect {
    #private;
    /**
     *
     */
    readonly left: number;
    readonly top: number;
    readonly right: number;
    readonly bottom: number;
    readonly width: number;
    readonly height: number;
    /**
     *
     */
    constructor({ left, top, right, bottom, width, height, }: {
        left?: number;
        top?: number;
        right?: number;
        bottom?: number;
        width?: number;
        height?: number;
    });
}
/**
 * Occurs when an element has an invalid size.
 * @category Rendering Surfaces
 */
export declare class InvalidSizeError extends Error {
    /**
     * Element bounds.
     */
    rect: DOMRect;
    /**
     *
     */
    constructor(rect: DOMRect);
}
/**
 * Occurs when an element is not contained into its parent bounds.
 * @category Rendering Surfaces
 */
export declare class OutOfBoundsError extends Error {
    /**
     * Element bounds.
     */
    rect: DOMRect;
    /**
     * Parent bounds.
     */
    parentRect: DOMRect;
    /**
     *
     */
    constructor(rect: DOMRect, parentRect: DOMRect);
}
/**
 * @category Rendering Surfaces
 */
export declare class RelativeRect extends Rect {
    #private;
    /**
     * Default relative rect that covers the whole area.
     */
    static readonly default: RelativeRect;
    /**
     * Creates a relative rect from the given DOM elements.
     * It calculates the relative position and size of the element inside the parent element.
     *
     * @param params
     * @param params.element - The element to get the relative rect from.
     * @param params.parent - The parent element of the element.
     *
     * @throws {InvalidSizeError} - If the element has an invalid size.
     * @throws {OutOfBoundsError} - If the element is not contained into its parent bounds.
     *
     * @returns The relative rect.
     */
    static from_dom_elements({ element, parent }: {
        element: HTMLElement;
        parent: HTMLElement;
    }): RelativeRect;
    /**
     *
     */
    constructor({ left, top, right, bottom, width, height, }: {
        left?: number;
        top?: number;
        right?: number;
        bottom?: number;
        width?: number;
        height?: number;
    });
}
//# sourceMappingURL=Rect.d.ts.map