import { Rect } from "./Rect";
import { Entity } from "../../scene/Entity";
import { CanvasContextType } from "./RenderingSurface";
import { ContextProvider } from "../contexts/ContextProvider";
import { RenderingSurfaceBase } from "./RenderingSurfaceBase";
/**
 * @category Rendering Surfaces
 */
export declare class OffscreenSurface<ContextType extends CanvasContextType, ContextOptions> extends RenderingSurfaceBase {
    #private;
    /**
     *
     */
    constructor({ width, height, context_constructor, context_type, context_options, resolution_scale, }: {
        width: number;
        height: number;
        context_constructor: new (canvas: HTMLCanvasElement | OffscreenCanvas, context_type: ContextType, options?: ContextOptions) => ContextProvider;
        context_type: ContextType;
        context_options?: ContextOptions;
        resolution_scale: number;
    });
    /**
     *
     */
    get width(): number;
    /**
     *
     */
    get height(): number;
    /**
     *
     */
    get context(): ContextProvider;
    /**
     *
     */
    get cameras(): readonly Entity[];
    /**
     *
     */
    release(): void;
    /**
     *
     */
    getBoundingRect(): Rect;
    /**
     *
     */
    resize(width: number, height: number): void;
    /**
     *
     */
    get resolution_scale(): number;
    /**
     *
     */
    set resolution_scale(scale: number);
}
//# sourceMappingURL=OffscreenSurface.d.ts.map