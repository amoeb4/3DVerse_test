import type { Enums, Vec2i } from "@3dverse/livelink.core";
import { EncodedFrame, EncodedFrameConsumer } from "./EncodedFrameConsumer";
import { DecodedFrameConsumer } from "./DecodedFrameConsumer";
/**
 * A decoder that uses the WebCodecs API to decode video frames.
 *
 * This decoder is hardware accelerated (if supported) and is the most efficient
 * way to decode video frames.
 *
 * This decoder is only available in browsers that support the WebCodecs API.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API
 *
 * @category Streaming
 */
export declare class WebCodecsDecoder extends EncodedFrameConsumer {
    #private;
    /**
     * Find a supported codec that can be decoded by the WebCodecs API.
     *
     * This method can be used to check if the WebCodecs API is supported by the browser.
     *
     * If the WebCodecs API is not supported, this method will return null.
     *
     * If the WebCodecs API is supported, this method will return the best codec that is supported by the browser.
     *
     * If no codec is supported by the browser, this method will return null.
     *
     * @returns The codec that is supported by the browser, or null if the WebCodecs API is not supported or no codec is supported by the browser.
     */
    static findSupportedCodec(): Promise<Enums.CodecType | null>;
    /**
     * Create a new WebCodecsDecoder that will send the decoded frames to the given frame consumer.
     *
     * @param frame_consumer - The frame consumer that will receive the decoded frames
     */
    constructor({ decoded_frame_consumer }: {
        decoded_frame_consumer: DecodedFrameConsumer;
    });
    /**
     * Configure the decoder with the codec and frame dimensions.
     * This method replaces the constructor to allow for async initialization.
     */
    configure({ codec, frame_dimensions, }: {
        codec: Enums.CodecType;
        frame_dimensions: Vec2i;
    }): Promise<EncodedFrameConsumer>;
    /**
     * Resize the decoder with the new frame dimensions.
     *
     * @param params
     * @param params.frame_dimensions - The new frame dimensions
     */
    resize({ frame_dimensions }: {
        frame_dimensions: Vec2i;
    }): void;
    /**
     * Release any resources used by the decoder.
     */
    release(): void;
    /**
     * Consume an encoded frame.
     *
     * @param params
     * @param params.encoded_frame - The encoded frame data
     * @param params.meta_data - The frame meta data
     */
    consumeEncodedFrame({ encoded_frame }: {
        encoded_frame: EncodedFrame;
    }): void;
}
//# sourceMappingURL=WebCodecsDecoder.d.ts.map