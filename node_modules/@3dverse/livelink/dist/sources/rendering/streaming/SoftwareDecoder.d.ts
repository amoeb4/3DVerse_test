import type { Enums, Vec2i } from "@3dverse/livelink.core";
import { EncodedFrame, EncodedFrameConsumer } from "./EncodedFrameConsumer.js";
import { DecodedFrameConsumer } from "./DecodedFrameConsumer.js";
/**
 * Software decoder that uses Broadway.js to decode h264 encoded frames.
 *
 * This decoder is not recommended for production use.
 * It is not optimized for performance.
 * It is mainly provided as a reference implementation.
 *
 * As a last resort, it can be used as a fallback when hardware decoding is not available.
 *
 * @see https://github.com/mbebenita/Broadway
 *
 * @category Streaming
 */
export declare class SoftwareDecoder extends EncodedFrameConsumer {
    #private;
    /**
     * Create a new software decoder.
     *
     * @param params
     * @param params.decoded_frame_consumer - The decoded frame consumer that will receive the decoded frames
     */
    constructor({ decoded_frame_consumer }: {
        decoded_frame_consumer: DecodedFrameConsumer;
    });
    /**
     * Configure the decoder with the codec and frame dimensions.
     * This method replaces the constructor to allow for async initialization.
     *
     * @param params
     * @param params.codec - The codec used to encode the frames
     * @param params.frame_dimensions - The dimensions of the frame
     *
     * @returns Returns a promise to `this` so that the method can be chained to the constructor.
     */
    configure({ codec, frame_dimensions, }: {
        codec: Enums.CodecType;
        frame_dimensions: Vec2i;
    }): Promise<EncodedFrameConsumer>;
    /**
     * Resize the decoder with the new frame dimensions.
     *
     * @param params
     * @param params.frame_dimensions - The new frame dimensions
     */
    resize({ frame_dimensions }: {
        frame_dimensions: Vec2i;
    }): void;
    /**
     * Release any resources used by the decoder.
     */
    release(): void;
    /**
     * Consume an encoded frame.
     * Called as soon as a frame is received.
     *
     * @param params
     * @param params.encoded_frame - The encoded frame data
     * @param params.meta_data - The frame meta data
     */
    consumeEncodedFrame({ encoded_frame }: {
        encoded_frame: EncodedFrame;
    }): void;
}
//# sourceMappingURL=SoftwareDecoder.d.ts.map