/**
 * DO NOT EDIT THIS FILE MANUALLY.
 * This file has been generated automatically from ftl-schemas
 */
import type { Components } from "@3dverse/livelink.core";
import { TypedEventTarget } from "../sources/TypedEventTarget";
import { EntityEvents } from "../sources/scene/EntityEvents";
/**
 * If specified as a component value, the default values will be applied.
 * Note that the compponent default values might on future versions of their schema.
 */
export type DefaultValue = "default";
/**
 *
 */
export declare abstract class EntityBase extends TypedEventTarget<EntityEvents> {
    #private;
    /**
     *
     */
    get euid(): Readonly<Components.Euid>;
    /**
     * Animation controller with reference to an animation graph and an animation set. Enables skeletal animation on its skinned mesh descendents whose skeleton is compatible with the animations in the animation set.
     */
    get animation_controller(): Components.AnimationController | undefined;
    set animation_controller(value: Partial<Components.AnimationController> | DefaultValue | undefined);
    /**
     * Animation sequence controller with reference to an animation sequence and assigned entities.
     */
    get animation_sequence_controller(): Components.AnimationSequenceController | undefined;
    set animation_sequence_controller(value: Partial<Components.AnimationSequenceController> | DefaultValue | undefined);
    /**
     * Links entity to bone in skeleton.
     */
    get bone(): Components.Bone | undefined;
    set bone(value: Partial<Components.Bone> | DefaultValue | undefined);
    /**
     * Box geometry.
     */
    get box_geometry(): Components.BoxGeometry | undefined;
    set box_geometry(value: Partial<Components.BoxGeometry> | DefaultValue | undefined);
    /**
     * Virtual camera.
     */
    get camera(): Components.Camera | undefined;
    set camera(value: Partial<Components.Camera> | DefaultValue | undefined);
    /**
     * Capsule geometry.
     */
    get capsule_geometry(): Components.CapsuleGeometry | undefined;
    set capsule_geometry(value: Partial<Components.CapsuleGeometry> | DefaultValue | undefined);
    /**
     * Character controller used for movement constrained by collisions without having to deal with a rigid body. A character controller is kinematic, and so is not affected by forces. It uses its own tweaked collision algorithm to give a good feeling while controlling the character.
     */
    get character_controller(): Components.CharacterController | undefined;
    set character_controller(value: Partial<Components.CharacterController> | DefaultValue | undefined);
    /**
     * Reference to a collision geometry.
     */
    get collision_geometry_ref(): Components.CollisionGeometryRef | undefined;
    set collision_geometry_ref(value: Partial<Components.CollisionGeometryRef> | DefaultValue | undefined);
    /**
     * A physics constraint that can be configured along 6 degrees of freedom. In its default state it behaves as a fixed constraint - that is, it rigidly fixes the constraint frames of its two entities. However, individual degrees of freedom may be unlocked to permit any combination of rotation around the x-, y- and z- axes, and translation along these axes.
     */
    get constraint(): Components.Constraint | undefined;
    set constraint(value: Partial<Components.Constraint> | DefaultValue | undefined);
    get constraint_actuator(): Components.ConstraintActuator | undefined;
    set constraint_actuator(value: Partial<Components.ConstraintActuator> | DefaultValue | undefined);
    /**
     * Culling geometry. Add this component in addition to another geometry component (e.g. box geometry, sphere geometry, etc.) to enable culling geometry.
     */
    get culling_geometry(): Components.CullingGeometry | undefined;
    set culling_geometry(value: Partial<Components.CullingGeometry> | DefaultValue | undefined);
    /**
     * Cylinder geometry.
     */
    get cylinder_geometry(): Components.CylinderGeometry | undefined;
    set cylinder_geometry(value: Partial<Components.CylinderGeometry> | DefaultValue | undefined);
    /**
     * Name of the entity.
     */
    get debug_name(): Components.DebugName | undefined;
    set debug_name(value: Partial<Components.DebugName> | DefaultValue | undefined);
    /**
     * Decal Projector.
     */
    get decal_projector(): Components.DecalProjector | undefined;
    set decal_projector(value: Partial<Components.DecalProjector> | DefaultValue | undefined);
    /**
     * The environment of a scene. Used to give a scene a skybox.
     */
    get environment(): Components.Environment | undefined;
    set environment(value: Partial<Components.Environment> | DefaultValue | undefined);
    /**
     * Base component of all the other joint components (revolute_joint, etc.). By itself it will lock the orientations and distances of the constrainer and constrainee.
     */
    get joint(): Components.Joint | undefined;
    set joint(value: Partial<Components.Joint> | DefaultValue | undefined);
    /**
     * Display a label in the 3d view.
     */
    get label(): Components.Label | undefined;
    set label(value: Partial<Components.Label> | DefaultValue | undefined);
    /**
     * Lineage of the entity through linkers.
     */
    get lineage(): Components.Lineage | undefined;
    set lineage(value: Partial<Components.Lineage> | DefaultValue | undefined);
    /**
     * Local Axis Aligned Bounding Box of the entity.
     */
    get local_aabb(): Components.LocalAabb | undefined;
    set local_aabb(value: Partial<Components.LocalAabb> | DefaultValue | undefined);
    /**
     * References a shader and specifies input values if needed.
     */
    get material(): Components.Material | undefined;
    set material(value: Partial<Components.Material> | DefaultValue | undefined);
    /**
     * Reference to a material.
     */
    get material_ref(): Components.MaterialRef | undefined;
    set material_ref(value: Partial<Components.MaterialRef> | DefaultValue | undefined);
    /**
     * Display a measure in the 3d view.
     */
    get measure(): Components.Measure | undefined;
    set measure(value: Partial<Components.Measure> | DefaultValue | undefined);
    /**
     * Reference to a mesh.
     */
    get mesh_ref(): Components.MeshRef | undefined;
    set mesh_ref(value: Partial<Components.MeshRef> | DefaultValue | undefined);
    /**
     * A lens that applies an orthographic projection.
     */
    get orthographic_lens(): Components.OrthographicLens | undefined;
    set orthographic_lens(value: Partial<Components.OrthographicLens> | DefaultValue | undefined);
    /**
     * Overrides a given entity in a sub scene.
     */
    get overrider(): Components.Overrider | undefined;
    set overrider(value: Partial<Components.Overrider> | DefaultValue | undefined);
    /**
     * A lens that applies a perspective projection.
     */
    get perspective_lens(): Components.PerspectiveLens | undefined;
    set perspective_lens(value: Partial<Components.PerspectiveLens> | DefaultValue | undefined);
    /**
     * Physics material which represents a set of physical surface properties.
     */
    get physics_material(): Components.PhysicsMaterial | undefined;
    set physics_material(value: Partial<Components.PhysicsMaterial> | DefaultValue | undefined);
    /**
     * Plane geometry.
     */
    get plane_geometry(): Components.PlaneGeometry | undefined;
    set plane_geometry(value: Partial<Components.PlaneGeometry> | DefaultValue | undefined);
    /**
     * Reference to a point cloud.
     */
    get point_cloud_ref(): Components.PointCloudRef | undefined;
    set point_cloud_ref(value: Partial<Components.PointCloudRef> | DefaultValue | undefined);
    /**
     * A light with color and intensity. A point light by default, add a spot light component to add a cutoff. Can be parameterized to simulate the atmosphere sun.
     */
    get point_light(): Components.PointLight | undefined;
    set point_light(value: Partial<Components.PointLight> | DefaultValue | undefined);
    /**
     * Omni directional reflection probe parameters, used for local cubemap reflection generation.
     */
    get reflection_probe(): Components.ReflectionProbe | undefined;
    set reflection_probe(value: Partial<Components.ReflectionProbe> | DefaultValue | undefined);
    /**
     * Rigid body parameters.
     */
    get rigid_body(): Components.RigidBody | undefined;
    set rigid_body(value: Partial<Components.RigidBody> | DefaultValue | undefined);
    /**
     * Rigid body actuator. Represent forces and torques that are applied during a simulation step. All values are reset each frame.
     */
    get rigid_body_actuator(): Components.RigidBodyActuator | undefined;
    set rigid_body_actuator(value: Partial<Components.RigidBodyActuator> | DefaultValue | undefined);
    /**
     * Reference to a scene.
     */
    get scene_ref(): Components.SceneRef | undefined;
    set scene_ref(value: Partial<Components.SceneRef> | DefaultValue | undefined);
    /**
     * References multiple scripts.
     */
    get script_map(): Components.ScriptMap | undefined;
    set script_map(value: Partial<Components.ScriptMap> | DefaultValue | undefined);
    /**
     * Enables a light to cast shadows.
     */
    get shadow_caster(): Components.ShadowCaster | undefined;
    set shadow_caster(value: Partial<Components.ShadowCaster> | DefaultValue | undefined);
    /**
     * Reference to a skeleton.
     */
    get skeleton_ref(): Components.SkeletonRef | undefined;
    set skeleton_ref(value: Partial<Components.SkeletonRef> | DefaultValue | undefined);
    /**
     * Reference to a sound.
     */
    get sound_ref(): Components.SoundRef | undefined;
    set sound_ref(value: Partial<Components.SoundRef> | DefaultValue | undefined);
    /**
     * Sphere geometry.
     */
    get sphere_geometry(): Components.SphereGeometry | undefined;
    set sphere_geometry(value: Partial<Components.SphereGeometry> | DefaultValue | undefined);
    /**
     * Display a spline in the 3d view.
     */
    get spline(): Components.Spline | undefined;
    set spline(value: Partial<Components.Spline> | DefaultValue | undefined);
    /**
     * Adds a cutoff to a point light to simulate a spot light.
     */
    get spot_light(): Components.SpotLight | undefined;
    set spot_light(value: Partial<Components.SpotLight> | DefaultValue | undefined);
    /**
     * A lens that applies a custom projection.
     */
    get stereoscopic_lens(): Components.StereoscopicLens | undefined;
    set stereoscopic_lens(value: Partial<Components.StereoscopicLens> | DefaultValue | undefined);
    /**
     * Tags used to filter entities.
     */
    get tags(): Components.Tags | undefined;
    set tags(value: Partial<Components.Tags> | DefaultValue | undefined);
    /**
     * Vehicle Controller parameters.
     */
    get vehicle_controller(): Components.VehicleController | undefined;
    set vehicle_controller(value: Partial<Components.VehicleController> | DefaultValue | undefined);
    /**
     * Filtering properties applied to the volume.
     */
    get volume_filter(): Components.VolumeFilter | undefined;
    set volume_filter(value: Partial<Components.VolumeFilter> | DefaultValue | undefined);
    /**
     * Reference to a material to use with a volume.
     */
    get volume_material_ref(): Components.VolumeMaterialRef | undefined;
    set volume_material_ref(value: Partial<Components.VolumeMaterialRef> | DefaultValue | undefined);
    /**
     * Reference to a volume made of voxels.
     */
    get volume_ref(): Components.VolumeRef | undefined;
    set volume_ref(value: Partial<Components.VolumeRef> | DefaultValue | undefined);
    /**
     *
     */
    constructor({ euid }: {
        euid: Components.Euid;
    });
    /**
     *
     */
    toJSON(): object;
}
//# sourceMappingURL=EntityBase.d.ts.map