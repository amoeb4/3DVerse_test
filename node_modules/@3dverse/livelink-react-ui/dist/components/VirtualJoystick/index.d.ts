import { type JoystickOutputData } from "nipplejs";
export type JoystickEvent = JoystickOutputData;
/**
 *
 */
export declare const VirtualJoystick: ({ options: propsOptions, onStart: propsOnStart, onMove: propsOnMove, onEnd: propsOnEnd, }: {
    container?: HTMLElement;
    options?: VirtualJoystickOptions;
    onStart?: JoystickCallback;
    onMove?: JoystickCallback;
    onEnd?: JoystickCallback;
}) => null;
/**
 *
 */
export type JoystickCallback = (event: JoystickEvent) => void;
/**
 *
 */
export type VirtualJoystickOptions = {
    /**
     * Defaults to `document.body`
     *
     * The container where the joystick will be created.
     *
     * If you want to use a specific element, you can pass it here.
     * Otherwise it will default to the body of the document.
     */
    container?: HTMLElement;
    /**
     * Defaults to `'white'`
     * The background color of your joystick’s elements.
     *
     * Can be any valid CSS color.
     */
    color?: string;
    /**
     * Defaults to `100`
     * The size in pixel of the outer circle.
     *
     * The inner circle is 50% of this size.
     */
    size?: number;
    /**
     * Defaults to `false`
     *
     * Enable the multitouch capabilities.
     *
     * If, for reasons, you need to have multiple nipples into the same zone.
     *
     * Otherwise it will only get one, and all new touches won’t do a thing.
     *
     * Please note that multitouch is off when in static or semi modes.
     */
    multitouch?: boolean;
    /**
     * Defaults to `1`
     *
     * If you need to, you can also control the maximum number of instance that could be created.
     *
     * Obviously in a multitouch configuration.
     */
    maxNumberOfNipples?: number;
    /**
     * Defaults to `false`
     *
     * The library won’t draw anything in the DOM and will only trigger events with data.
     */
    isHidden?: boolean;
    /**
     * Defaults to `{top: 0, left: 0}`
     *
     * An object that will determine the position of a static mode.
     *
     * You can pass any of the four top, right, bottom and left.
     *
     * They will be applied as any css property.
     */
    position?: {
        top?: string;
        right?: string;
        bottom?: string;
        left?: string;
    };
    /**
     * Behavioral mode for the joystick
     *
     * ### 'dynamic':
     * a new joystick is created at each new touch.
     * the joystick gets destroyed when released.
     * can be multitouch.
     *
     * ### 'semi':
     * new joystick is created at each new touch farther than options.catchDistance of any previously created joystick.
     * the joystick is faded-out when released but not destroyed.
     * when touch is made inside the options.catchDistance a new direction is triggered immediately.
     * when touch is made outside the options.catchDistance the previous joystick is destroyed and a new one is created.
     * cannot be multitouch.
     *
     * ### 'static':
     * a joystick is positioned immediately at options.position.
     * one joystick per zone.
     * each new touch triggers a new direction.
     * cannot be multitouch.
     */
    mode?: "dynamic" | "semi" | "static";
    /**
     * Defaults to `200`
     *
     * This is only useful in the semi mode, and determine at which distance we recycle the previous joystick.
     */
    catchDistance?: number;
    /**
     * Defaults to `false`
     *
     * Locks joystick’s movement to the x (horizontal) axis
     */
    lockX?: boolean;
    /**
     * Defaults to `false`
     *
     * Locks joystick’s movement to the y (vertical) axis
     */
    lockY?: boolean;
    /**
     * Defaults to `false`
     *
     * Enable if the page has dynamically visible elements such as for Vue, React, Angular or simply some CSS hiding or
     * showing some DOM.
     */
    dynamicPage?: boolean;
};
//# sourceMappingURL=index.d.ts.map