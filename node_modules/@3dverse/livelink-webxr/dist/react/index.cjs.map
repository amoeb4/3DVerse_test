{
  "version": 3,
  "sources": ["../../sources/react/index.ts", "../../sources/react/WebXR.tsx", "../../sources/WebXRHelper.ts", "../../../node_modules/gl-matrix/esm/common.js", "../../../node_modules/gl-matrix/esm/mat3.js", "../../../node_modules/gl-matrix/esm/mat4.js", "../../../node_modules/gl-matrix/esm/quat.js", "../../../node_modules/gl-matrix/esm/vec3.js", "../../../node_modules/gl-matrix/esm/vec4.js", "../../../node_modules/gl-matrix/esm/vec2.js", "../../sources/XRContext.ts"],
  "sourcesContent": ["export * from \"./WebXR\";\n", "//------------------------------------------------------------------------------\nimport React, {\n    JSX,\n    type PropsWithChildren,\n    createContext,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\n\n//------------------------------------------------------------------------------\nimport { LivelinkContext } from \"@3dverse/livelink-react\";\nimport { WebXRHelper } from \"../WebXRHelper\";\n\n//------------------------------------------------------------------------------\n/**\n * Context that provides utilities for WebXR.\n *\n * @category Contexts\n */\nexport const WebXRContext = createContext<{ webXRHelper: WebXRHelper | null; xrSession: XRSession | null }>({\n    webXRHelper: null,\n    xrSession: null,\n});\n\n//------------------------------------------------------------------------------\n/**\n * A component that provides a WebXR session\n *\n * @param params\n * @param params.mode - The mode of the XR session.\n * @param params.resolution_scale - The resolution scale of the XR session.\n * @param params.onSessionEnd - The callback to call when the XR session ends.\n * @param params.forceSingleView - Whether to force single view mode.\n * @param params.requiredFeatures - The required features for the XR session.\n * @param params.optionalFeatures - The optional features for the XR session.\n * @param params.domOverlayRoot - Specifies a custom DOM overlay root element.\n *\n * @category Components\n */\nexport function WebXR({\n    children,\n    mode,\n    resolutionScale = 1.0,\n    requiredFeatures = [],\n    optionalFeatures = [],\n    forceSingleView,\n    overscanFovFactor,\n    enableOverscanSurfaceScale,\n    enableFakeAlpha,\n    domOverlayRoot,\n    onSessionEnd,\n}: PropsWithChildren<{\n    mode: XRSessionMode;\n    resolutionScale?: number;\n    requiredFeatures?: string[];\n    optionalFeatures?: string[];\n    forceSingleView?: boolean;\n    overscanFovFactor?: number;\n    enableOverscanSurfaceScale?: boolean;\n    enableFakeAlpha?: boolean;\n    domOverlayRoot?: Element;\n    onSessionEnd?: () => void;\n}>): JSX.Element {\n    //--------------------------------------------------------------------------\n    const { instance } = useContext(LivelinkContext);\n\n    //--------------------------------------------------------------------------\n    const containerRef = useRef<HTMLDivElement>(null);\n    const webXRHelper = useMemo(\n        () => new WebXRHelper(resolutionScale),\n        [mode, requiredFeatures.join(\"-\"), optionalFeatures.join(\"-\"), forceSingleView, domOverlayRoot],\n    );\n    const initializationPromiseRef = useRef<Promise<void> | null>(null);\n    const [xrSession, setXrSession] = useState<XRSession | null>(null);\n\n    //--------------------------------------------------------------------------\n    useEffect(() => {\n        if (!webXRHelper) {\n            return;\n        }\n\n        webXRHelper.resolution_scale = resolutionScale;\n    }, [webXRHelper, resolutionScale]);\n\n    //--------------------------------------------------------------------------\n    useEffect(() => {\n        if (!xrSession || !onSessionEnd) {\n            return;\n        }\n\n        xrSession.addEventListener(\"end\", onSessionEnd);\n\n        return (): void => {\n            xrSession.removeEventListener(\"end\", onSessionEnd);\n        };\n    }, [xrSession, onSessionEnd]);\n\n    //--------------------------------------------------------------------------\n    useEffect(() => {\n        const rootDomOverlay = domOverlayRoot || containerRef.current;\n        if (!rootDomOverlay || !instance) {\n            return;\n        }\n\n        // Initialize the WebXR session is kept in a ref to avoid\n        // re-initializing it on every render, especially when on strict mode.\n        if (!initializationPromiseRef.current) {\n            console.debug(\"---- Initializing WebXR\");\n\n            initializationPromiseRef.current = webXRHelper\n                .initialize(mode, {\n                    xrSessionInit: {\n                        requiredFeatures,\n                        optionalFeatures: [\"dom-overlay\", ...optionalFeatures],\n                        domOverlay: { root: rootDomOverlay },\n                    },\n                    forceSingleView,\n                })\n                .then(session => {\n                    setXrSession(session);\n                    console.debug(\"---- Setting XR viewports\");\n                    return webXRHelper.configureViewports({\n                        livelink: instance,\n                        overscan_fov_factor: overscanFovFactor,\n                        enable_overscan_surface_scale: enableOverscanSurfaceScale,\n                        enable_fake_alpha: enableFakeAlpha,\n                    });\n                })\n                .then(() => {\n                    console.debug(\"---- WebXR initialized\");\n                    webXRHelper.start();\n                    initializationPromiseRef.current = null;\n                });\n        }\n\n        return (): void => {\n            // This function might be called before the initialization promise\n            // is resolved in strict mode. But this is not a problem since the\n            // webXRHelper cannot release anything before the initialization is done.\n            console.debug(\"---- Releasing WebXR\");\n            webXRHelper.release();\n            setXrSession(null);\n        };\n    }, [webXRHelper, instance]);\n\n    //--------------------------------------------------------------------------\n    return (\n        <WebXRContext.Provider value={{ webXRHelper, xrSession }}>\n            {!domOverlayRoot ? (\n                <div data-role=\"webxr-dom-overlay\" ref={containerRef}>\n                    {children}\n                </div>\n            ) : (\n                <>{children}</>\n            )}\n        </WebXRContext.Provider>\n    );\n}\n", "//------------------------------------------------------------------------------\nimport {\n    Livelink,\n    OffscreenSurface,\n    RelativeRect,\n    Viewport,\n    Vec3,\n    Quat,\n    Entity,\n    CameraProjection,\n    RenderGraphDataObject,\n    Transform,\n} from \"@3dverse/livelink\";\nimport { XRContext } from \"./XRContext\";\nimport { Quaternion, Vector3, Matrix4 } from \"threejs-math\";\n\n//------------------------------------------------------------------------------\ntype XRViewports = Array<{ xr_view: XRView; xr_viewport: XRViewport; livelink_viewport: Viewport }>;\n\n//------------------------------------------------------------------------------\nfunction createPromiseWithResolvers<T>(): {\n    promise: Promise<T>;\n    resolve: (value: T) => void;\n    reject: (reason?: unknown) => void;\n} {\n    let resolve: (value: T) => void;\n    let reject: (reason?: unknown) => void;\n    const promise = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return { promise, resolve: resolve!, reject: reject! };\n}\n\n//------------------------------------------------------------------------------\n/**\n * @experimental\n */\nexport class WebXRHelper {\n    //--------------------------------------------------------------------------\n    // TODO: a better approach (cameras with a parent entity) than relying on\n    // cameras_origin & center_eye. It'd be static because to be used from\n    // WebXRCamera.onCreate() but it's not the right interface, we'd need a way\n    // to create an entity and set parent after creation (does not work so far),\n    // or place cameras_origin inside the Viewport to make it accessible from\n    // WebXRCamera.onCreate().\n    // static cameras_origin: Entity | null = null;\n    //--------------------------------------------------------------------------\n    /**\n     * Use cameras origin to shift the pose of the XRView\n     */\n    cameras_origin: Omit<Transform, \"eulerOrientation\"> | null = null;\n    #cameras_origin_apply: (cameras: readonly Entity[]) => void;\n    #cameras_origin_unapply: (frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[]) => void;\n\n    //--------------------------------------------------------------------------\n    // References to livelink core\n    #core: Livelink | null = null;\n\n    //--------------------------------------------------------------------------\n    #surface: OffscreenSurface<\"webgl\", { xrCompatible: boolean }>;\n    #overriden_near_plane?: number;\n    #overridden_fovy?: number;\n    #viewports: XRViewports = [];\n    #context: XRContext;\n\n    //--------------------------------------------------------------------------\n    // WebXR API references\n    #session: XRSession | null = null;\n    #mode: XRSessionMode = \"inline\";\n    #forceSingleView: boolean = false;\n    #reference_space: XRReferenceSpace | null = null;\n    #xr_viewports: XRViewport[] = [];\n    #animationFrameRequestId: number = 0;\n\n    //--------------------------------------------------------------------------\n    /**\n     * Test if the provided XR session mode is supported by this browser.\n     * @param mode defines the XR session mode to test\n     * @returns Resolves with boolean indicating if the provided session mode is\n     * supported.\n     */\n    public static async isSessionSupported(mode: XRSessionMode): Promise<boolean> {\n        if (!navigator.xr) {\n            return false;\n        }\n        // When the specs are final, remove supportsSession!\n        // https://developer.mozilla.org/en-US/docs/Web/API/XRSystem/isSessionSupported\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const isSessionSupportedFunction = navigator.xr.isSessionSupported || (navigator.xr as any).supportsSession;\n        if (!isSessionSupportedFunction) {\n            return false;\n        }\n        const isSupported = await isSessionSupportedFunction.call(navigator.xr, mode).catch(console.warn);\n        return isSupported ?? false;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XRSession\n     */\n    get session(): XRSession | null {\n        return this.#session;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XRSessionMode\n     */\n    get mode(): XRSessionMode {\n        return this.#mode;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XRReferenceSpace used to get the pose of the XRView\n     */\n    get reference_space(): XRReferenceSpace | null {\n        return this.#reference_space;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * True if exactly 2 XRView instances are available in the XRSession.\n     */\n    get is_stereo_vision(): boolean {\n        return this.#xr_viewports.length === 2;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Use to override the near plane provided by the projection matrix of the\n     * xr views. Might be useful in the webxr emulator to see things close to\n     * the eyes.\n     */\n    set overriden_near_plane(value: number | undefined) {\n        this.#overriden_near_plane = value;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Disable the application of the transform of the cameras origin\n     */\n    set cameras_origin_transform_enabled(value: boolean) {\n        if (value) {\n            this.#applyCamerasOrigin = this.#cameras_origin_apply;\n            this.#unapplyCamerasOrigin = this.#cameras_origin_unapply;\n        } else {\n            this.#applyCamerasOrigin = () => {};\n            this.#unapplyCamerasOrigin = () => {};\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    constructor(resolution_scale: number = 1.0) {\n        this.#surface = new OffscreenSurface({\n            width: window.innerWidth, // Not sure\n            height: window.innerHeight, // Really not sure\n            context_constructor: XRContext,\n            context_type: \"webgl\",\n            context_options: { xrCompatible: true },\n            resolution_scale,\n        });\n        this.#context = this.#surface.context as XRContext;\n        this.#cameras_origin_apply = this.#applyCamerasOrigin;\n        this.#cameras_origin_unapply = this.#unapplyCamerasOrigin;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Release the XRSession and the rendering OffscreenSurface.\n     */\n    public async release(): Promise<void> {\n        if (this.#session) {\n            this.stop();\n            await this.#session.end().catch(error => console.warn(\"Could not end XR session:\", error));\n        }\n\n        if (this.#core) {\n            for (const { livelink_viewport } of this.#viewports) {\n                this.#core.removeViewport({ viewport: livelink_viewport });\n            }\n        }\n\n        this.#surface.release();\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Get the fake alpha mode flag of the XRContext. If enabled: the alpha\n     * channel is set highest intensity among rgb channels for all pixels with\n     * all rgb intensities inferior than 0.1.\n     */\n    get fakeAlpha(): boolean {\n        return this.#context.fake_alpha_enabled;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Set the fake alpha mode flag of the XRContext. If enabled: the alpha\n     * channel is set highest intensity among rgb channels for all pixels with\n     * all rgb intensities inferior than 0.1.\n     */\n    set fakeAlpha(value: boolean) {\n        this.#context.fake_alpha_enabled = value;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Get fake alpha scale value of the XRContext used to remap fragment\n     * opacity from [0..1] to [0..fakeAlphaScale] if inferior to 1.\n     */\n    get fakeAlphaScale(): number {\n        return this.#context.fake_alpha_scale;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Set fake alpha scale value of the XRContext used to remap fragment\n     * opacity from [0..1] to [0..fakeAlphaScale] if inferior to 1.\n     */\n    set fakeAlphaScale(value: number) {\n        if (value < 0 || value > 1) {\n            throw new Error(\"Fake alpha scale must be between 0 and 1\");\n        }\n        this.#context.fake_alpha_scale = value;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Initialize the XRSession.\n     * @param mode\n     * @param options\n     */\n    public async initialize(\n        mode: XRSessionMode,\n        { xrSessionInit = {}, forceSingleView = false }: { xrSessionInit?: XRSessionInit; forceSingleView?: boolean },\n    ): Promise<XRSession> {\n        this.#mode = mode;\n        this.#forceSingleView = forceSingleView;\n\n        if (!WebXRHelper.isSessionSupported(mode)) {\n            throw new Error(`WebXR \"${mode}\" not supported`);\n        }\n\n        if (this.#session) {\n            console.warn(\"Releasing previous XR session\");\n            await this.release();\n        }\n\n        const spaceTypes: Array<XRReferenceSpaceType | undefined> = [\"local-floor\", \"local\"];\n        let lastError: unknown;\n\n        for (const spaceType of spaceTypes) {\n            const sessionOptions: XRSessionInit = spaceType\n                ? { ...xrSessionInit, requiredFeatures: [...(xrSessionInit.requiredFeatures || []), spaceType] }\n                : xrSessionInit;\n\n            try {\n                this.#session = await navigator.xr!.requestSession(mode, sessionOptions);\n                await this.updateRenderState();\n                await this.setReferenceSpaceType(spaceType);\n                break;\n            } catch (error) {\n                console.warn(\n                    \"Failed to request XR session\",\n                    { spaceType, requiredFeatures: sessionOptions.requiredFeatures },\n                    error,\n                );\n                this.#session?.end();\n                lastError = error;\n            }\n        }\n\n        if (!this.#session) {\n            throw lastError;\n        }\n\n        return this.#session;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Configure the size and scale of the livelink viewports based on the XR views.\n     * @param livelink\n     * @param overscan_fov_factor\n     * @param enable_overscan_surface_scale\n     */\n    public async configureViewports({\n        livelink,\n        overscan_fov_factor,\n        enable_overscan_surface_scale,\n        enable_fake_alpha,\n    }: {\n        livelink: Livelink;\n        overscan_fov_factor?: number;\n        enable_overscan_surface_scale?: boolean;\n        enable_fake_alpha?: boolean;\n    }): Promise<void> {\n        if (this.#core) {\n            this.releaseLivelinkViewports();\n        }\n\n        this.#core = livelink;\n        const xr_views = await this.#getXRViews();\n        if (xr_views.length > 2) {\n            console.error(\"WebXRHelper doesn't support more than 2 eyes yet\");\n            // Though it's not supported we still try to configure all viewports for each views and deal with the 2\n            // first views cameras inside `this.#onXRFrame`.\n        }\n        this.#configureLivelinkViewports(xr_views);\n        this.#configureOverscan({\n            xr_views,\n            fov_factor: overscan_fov_factor,\n            enable_surface_scale: enable_overscan_surface_scale,\n        });\n\n        // AR session needs the FTL background to be pure black for the XRContext shader to simulate the background\n        // transparency while the feature to send the background mask frame from FTL to the client is not implemented.\n        const isAR = this.#mode === \"immersive-ar\";\n        this.fakeAlpha = enable_fake_alpha ?? isAR;\n        const dataJSON = isAR ? { grid: false, displayBackground: false } : undefined;\n\n        this.#core.addViewports({ viewports: this.#viewports.map(({ livelink_viewport }) => livelink_viewport) });\n        for (const index in this.#viewports) {\n            const { xr_view, xr_viewport, livelink_viewport } = this.#viewports[index];\n            await this.#createViewportCamera({ index, xr_view, xr_viewport, viewport: livelink_viewport, dataJSON });\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Obtains a single set of XR views from the XR session.\n     * @returns {Promise<Readonly<XRView[]>>} Resolves with an array of XRView\n     * of the XRSession obtained from the next XRFrame.\n     */\n    #getXRViews(): Promise<Readonly<Array<XRView>>> {\n        const { promise, resolve, reject } = createPromiseWithResolvers<Readonly<Array<XRView>>>();\n\n        let remaining_attempts = 200;\n        const onFirstXRFrame = async (_: DOMHighResTimeStamp, frame: XRFrame): Promise<Array<XRView> | undefined> => {\n            const xr_views = frame.getViewerPose(this.#reference_space!)?.views;\n            if (!xr_views) {\n                if (--remaining_attempts > 0) {\n                    this.#session!.requestAnimationFrame(onFirstXRFrame);\n                } else {\n                    reject(new Error(\"Failed to get XR views.\"));\n                }\n                return;\n            }\n\n            if (this.#forceSingleView && xr_views.length > 1) {\n                console.log(\"WebXRHelper: forcing single view\");\n                resolve(xr_views.slice(0, 1));\n            } else {\n                resolve(xr_views);\n            }\n        };\n\n        this.#animationFrameRequestId = this.#session!.requestAnimationFrame(onFirstXRFrame);\n        return promise;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Compute the rendering OffscreenSurface & XRContext resolution scale and\n     * the camera fovy.\n     * @param xr_views\n     * @param fov_factor\n     * @param enable_surface_scale\n     */\n    #configureOverscan({\n        xr_views,\n        fov_factor = 1.5,\n        enable_surface_scale = true,\n    }: {\n        xr_views: Readonly<Array<XRView>>;\n        fov_factor?: number;\n        enable_surface_scale?: boolean;\n    }): void {\n        if (fov_factor === 1.0) {\n            return;\n        }\n        // `enable_surface_scale` is exposed because there is a bug on iphone with Variant Launch App Clip:\n        //     - react dev tools raises an error inside `Livelink.#onFrameReceived`.\n        //     - debugging shows the error actually throws inside `WebCodecsDecoder.consumeEncodedFrame`, where\n        //       `this.#decoder!.decode(chunk)` throws with \"DataError: Key frame is required\".\n        // So surface scale needs to be disabled on iphone Variant Launch App Clip. Also on XR headsets, too high\n        // resolution kills the performance.\n        // `fov_factor` is exposed for testing purpose from apps.\n        // TODO: `fov_factor` shall probably be adjusted automatically based on the streaming latency.\n        if (enable_surface_scale) {\n            this.#surface.resolution_scale = fov_factor;\n            this.#context.scale_factor = this.#surface.resolution_scale;\n        } else {\n            this.#context.scale_factor = fov_factor;\n        }\n\n        const fovY = xr_views[0].projectionMatrix[5];\n        const original_fov = 2 * Math.atan(1 / fovY);\n        const new_fov = 2 * Math.atan(Math.tan(original_fov / 2) * fov_factor);\n        this.#overridden_fovy = new_fov * (180 / Math.PI);\n\n        console.debug(\n            `%cFOV: ${original_fov * (180 / Math.PI)} -> ${this.#overridden_fovy}, scale factor: ${this.#context.scale_factor}, resolution scale: ${this.#surface.resolution_scale}`,\n            \"color: orange; font-weight: bold; font-size: 1.5em\",\n        );\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Start the XRFrame animation loop.\n     */\n    public start(): void {\n        this.#session!.requestAnimationFrame(this.#onXRFrame);\n    }\n\n    /**\n     * Stop the XRFrame animation loop.\n     */\n    stop(): void {\n        if (this.#animationFrameRequestId && this.#session) {\n            this.#session.cancelAnimationFrame(this.#animationFrameRequestId);\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Sets the reference space of the XR session\n     * @param type - https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestReferenceSpace#type\n     * @returns {Promise<XRReferenceSpace>} Resolves with the reference to the new reference space.\n     */\n    public async setReferenceSpaceType(type: XRReferenceSpaceType = \"local\"): Promise<XRReferenceSpace> {\n        this.#reference_space = await this.#session!.requestReferenceSpace(type).catch(async error => {\n            console.error(`Failed to request XR reference space of type ${type}:`, error);\n            throw error;\n        });\n        return this.#reference_space;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Update the XRSesssion render state with the native WebGLREnderingContext\n     * of the viewport's ContextWebGL.\n     * @param layer_init\n     * @returns Resolves when the render state is updated.\n     */\n    public async updateRenderState(layer_init: XRWebGLLayerInit = {}): Promise<void> {\n        const session = this.#session!;\n        const baseLayer = new XRWebGLLayer(session, this.#context.native, layer_init);\n        await session.updateRenderState({ baseLayer });\n        this.#context.frame_buffer = baseLayer.framebuffer;\n        this.#surface.resize(baseLayer.framebufferWidth, baseLayer.framebufferHeight);\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Apply `this.cameras_origin` transformation on the eye(s) to shift the\n     * eye(s) transform in the world.\n     * @param cameras\n     */\n    #applyCamerasOrigin = (cameras: readonly Entity[]): void => {\n        if (!this.cameras_origin) {\n            return;\n        }\n\n        const origin_position = new Vector3().fromArray(this.cameras_origin.position);\n        const origin_quat = new Quaternion().fromArray(this.cameras_origin.orientation);\n        const origin_scale = new Vector3().fromArray(this.cameras_origin.scale);\n        const reversed_origin_matrix = new Matrix4().compose(origin_position, origin_quat, origin_scale).invert();\n\n        const origin_quat_conjugate = origin_quat.conjugate();\n\n        for (const camera of cameras) {\n            const { position, orientation } = camera.global_transform;\n            const transformed_position = new Vector3().fromArray(position);\n            transformed_position.applyMatrix4(reversed_origin_matrix);\n            transformed_position.toArray(position);\n\n            const quaternion = new Quaternion().fromArray(orientation);\n            const transformed_orientation = new Quaternion().multiplyQuaternions(origin_quat_conjugate, quaternion);\n            transformed_orientation.toArray(orientation);\n        }\n    };\n\n    //--------------------------------------------------------------------------\n    /**\n     * Unapply this.cameras_origin transformation on the eye(s) to shift back\n     * the eye(s) transform in the world. This is to find back the original\n     * transform of the headset eyes to place the billboard. We must apply this\n     * inverse transform because we want to use the frame_camera_transform and\n     * not the XRView.transform to place the billboard.\n     * @param views\n     */\n    #unapplyCamerasOrigin = (frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[]): void => {\n        if (!this.cameras_origin) {\n            return;\n        }\n\n        const origin_position = new Vector3().fromArray(this.cameras_origin.position);\n        const origin_quat = new Quaternion().fromArray(this.cameras_origin.orientation);\n        const origin_scale = new Vector3().fromArray(this.cameras_origin.scale);\n        const transform = new Matrix4().compose(origin_position, origin_quat, origin_scale);\n\n        for (const frame_camera_transform of frame_camera_transforms) {\n            const { position, orientation } = frame_camera_transform;\n            const transformed_position = new Vector3().fromArray(position);\n            transformed_position.applyMatrix4(transform);\n            transformed_position.toArray(position);\n\n            const quaternion = new Quaternion().fromArray(orientation);\n            const transformed_orientation = new Quaternion().multiplyQuaternions(origin_quat, quaternion);\n            transformed_orientation.toArray(orientation);\n        }\n    };\n\n    //--------------------------------------------------------------------------\n    /**\n     * The XR session's animation frame loop.\n     * @param time\n     * @param frame\n     */\n    #onXRFrame = (_: DOMHighResTimeStamp, frame: XRFrame): void => {\n        const session = this.#session!;\n        const gl_layer = session.renderState.baseLayer!;\n        const readonly_xr_views = frame.getViewerPose(this.#reference_space!)?.views;\n\n        if (!readonly_xr_views) {\n            session.requestAnimationFrame(this.#onXRFrame);\n            return;\n        }\n\n        let xr_views: XRView[] = [...readonly_xr_views];\n        let xr_viewports: XRViewport[] = [];\n        xr_views.forEach(xr_view => {\n            // TODO: getViewport might return undefined according to typing\n            xr_viewports.push(gl_layer.getViewport(xr_view)!);\n        });\n\n        if (this.#forceSingleView) {\n            xr_views = xr_views.splice(0, 1);\n            xr_viewports = xr_viewports.splice(0, 1);\n        }\n\n        if (this.#xrViewportsHaveChanged(xr_viewports)) {\n            // For now, we end the session if the viewports have changed\n            // TODO: do we really want to waste time checkuing this...?\n            console.error(\"XRViewports have changed, ending the XRSession\");\n            session.end();\n        }\n\n        this.#updateLiveLinkCameras(xr_views);\n        this.#applyCamerasOrigin(this.#surface.cameras);\n\n        const frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[] = xr_viewports.map((_, index) => {\n            const viewport = this.#surface.viewports[index];\n            const { world_position, world_orientation } = viewport.camera_projection!;\n            return {\n                // Copy the transform array to prevent future mutations of the original arrays\n                position: Array.from(world_position) as Vec3,\n                orientation: Array.from(world_orientation) as Quat,\n            } as Pick<Transform, \"position\" | \"orientation\">;\n        });\n\n        this.#unapplyCamerasOrigin(frame_camera_transforms);\n        this.#context.drawXRFrame({ xr_views, xr_viewports, frame_camera_transforms });\n\n        session.requestAnimationFrame(this.#onXRFrame);\n    };\n\n    //--------------------------------------------------------------------------\n    /**\n     * Update the cameras of the LiveLink instance.\n     * @param xr_views\n     */\n    #updateLiveLinkCameras(xr_views: XRView[]): void {\n        this.#surface.cameras.forEach((camera, index) => {\n            const xr_view = xr_views[index];\n            const { position: pos, orientation: quat } = xr_view.transform;\n            const { livelink_viewport } = this.#viewports[index];\n            const position = [pos.x, pos.y, pos.z] as Vec3;\n            const orientation = [quat.x, quat.y, quat.z, quat.w] as Quat;\n\n            camera.local_transform = { position, orientation };\n\n            const new_perspective_lens = this.#computePerspectiveLens(\n                xr_view.projectionMatrix,\n                livelink_viewport.width,\n                livelink_viewport.height,\n            );\n            const { fovy, nearPlane, farPlane, offset } = new_perspective_lens;\n            const has_changed =\n                !camera.perspective_lens ||\n                camera.perspective_lens.fovy !== fovy ||\n                camera.perspective_lens.nearPlane !== nearPlane ||\n                camera.perspective_lens.farPlane !== farPlane ||\n                camera.perspective_lens.offset !== offset;\n            if (has_changed) {\n                // TODO: verify this change check is really necessary or if livelink handles it\n                camera.perspective_lens = new_perspective_lens;\n            }\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Configure the livelink viewports based on the XR views.\n     * @param xr_views\n     */\n    #configureLivelinkViewports(xr_views: readonly XRView[]): void {\n        const gl_layer = this.#session!.renderState.baseLayer!;\n        const xr_eyes = xr_views.map(view => ({ view, viewport: gl_layer.getViewport(view)! }));\n        const xr_viewports = xr_eyes.map(xr_eye => xr_eye.viewport);\n\n        console.debug(\"XR views:\", xr_views);\n        console.debug(\"XR viewports:\", xr_viewports);\n        this.#xr_viewports = xr_viewports;\n\n        const are_xr_viewport_normalized = xr_eyes.every(({ viewport: v }) => {\n            return v.x <= 1 && v.y <= 1 && v.width <= 1 && v.height <= 1;\n        });\n\n        for (const xr_eye of xr_eyes) {\n            const xrViewport = xr_eye.viewport;\n            const rect = new RelativeRect(\n                are_xr_viewport_normalized\n                    ? { left: xrViewport.x, top: xrViewport.y, width: xrViewport.width, height: xrViewport.height }\n                    : {\n                          left: xrViewport.x / gl_layer.framebufferWidth,\n                          top: xrViewport.y / gl_layer.framebufferHeight,\n                          width: xrViewport.width / gl_layer.framebufferWidth,\n                          height: xrViewport.height / gl_layer.framebufferHeight,\n                      },\n            );\n            console.debug(`Viewport for ${xr_eye.view.eye} eye:`, rect);\n            const viewport = new Viewport({ core: this.#core!, rendering_surface: this.#surface, options: { rect } });\n\n            this.#viewports.push({ xr_view: xr_eye.view, xr_viewport: xrViewport, livelink_viewport: viewport });\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     *\n     */\n    releaseLivelinkViewports(): void {\n        for (const viewport of this.#viewports) {\n            this.#surface.removeViewport({ viewport: viewport.livelink_viewport });\n        }\n        this.#viewports.length = 0;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Create the livelink camera with its lens & set the viewport camera projection.\n     * @return Resolves with the created WebXRCamera instances\n     */\n    async #createViewportCamera({\n        index,\n        xr_view,\n        xr_viewport,\n        viewport,\n        dataJSON,\n    }: {\n        index: number | string;\n        xr_view: XRView;\n        xr_viewport: XRViewport;\n        viewport: Viewport;\n        dataJSON?: RenderGraphDataObject;\n    }): Promise<void> {\n        const camera_entity = await this.#core!.scene.newEntity({\n            name: `XR_camera_${xr_view.eye}_${index}`,\n            components: {\n                local_transform: {},\n                perspective_lens: this.#computePerspectiveLens(\n                    xr_view.projectionMatrix,\n                    viewport.width,\n                    viewport.height,\n                ),\n                camera: { renderGraphRef: \"398ee642-030a-45e7-95df-7147f6c43392\", dataJSON },\n                tags: {\n                    value: [\n                        `viewport_x = ${xr_viewport.x.toString()}`,\n                        `viewport_y = ${xr_viewport.y.toString()}`,\n                        `viewport_width = ${xr_viewport.width.toString()}`,\n                        `viewport_height = ${xr_viewport.height.toString()}`,\n                        `recommanded_scale = ${xr_view.recommendedViewportScale?.toString() || \"?\"}`,\n                    ],\n                },\n            },\n            options: { delete_on_client_disconnection: true, auto_broadcast: false },\n        });\n\n        viewport.camera_projection = new CameraProjection({ camera_entity, viewport });\n        console.debug(`Created camera entity for ${xr_view.eye} eye:`, viewport);\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Extract the attributes of the perspective lens component from a\n     * projection matrix and a viewport size.\n     * @param projectionMatrix\n     * @param viewportWidth\n     * @param viewportHeight\n     * @returns {object} { fovy, aspectRatio, nearPlane, farPlane }\n     */\n    #computePerspectiveLens(\n        projectionMatrix: Float32Array,\n        viewportWidth: number,\n        viewportHeight: number,\n    ): { fovy: number; aspectRatio: number; nearPlane: number; farPlane: number; offset: [number, number] } {\n        const aspectRatio = viewportWidth / viewportHeight;\n        const fovy = this.#overridden_fovy ?? Math.atan(1 / projectionMatrix[5]) * (180 / Math.PI) * 2;\n        let nearPlane = projectionMatrix[14] / (projectionMatrix[10] - 1);\n        if (this.is_stereo_vision && this.cameras_origin && this.cameras_origin.scale[0] !== 1) {\n            // if using stereo vision and the cameras origin has a scale then use it\n            nearPlane *= 1 / this.cameras_origin.scale[0];\n        }\n\n        const farPlane = projectionMatrix[14] / (projectionMatrix[10] + 1);\n        const offset = [projectionMatrix[8], projectionMatrix[9] * -1] as [number, number];\n        return { fovy, aspectRatio, nearPlane: this.#overriden_near_plane || nearPlane, farPlane, offset };\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     * Check if the XRViewport instances passed as parameters are distinct from\n     * the ones of the last XRFrame.\n     * @param xr_views\n     * @returns True if the XR viewports have changed\n     */\n    #xrViewportsHaveChanged(xr_viewports: XRViewport[]): boolean {\n        if (this.#xr_viewports.length === 0) {\n            return true;\n        }\n        return xr_viewports.some((xr_viewport, index) => {\n            const previous_xr_viewport = this.#xr_viewports[index];\n            if (!previous_xr_viewport) {\n                return true;\n            }\n            return (\n                previous_xr_viewport.width !== xr_viewport.width ||\n                previous_xr_viewport.height !== xr_viewport.height ||\n                previous_xr_viewport.x !== xr_viewport.x ||\n                previous_xr_viewport.y !== xr_viewport.y\n            );\n        });\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     *\n     */\n    get resolution_scale(): number {\n        return this.#surface.resolution_scale;\n    }\n\n    //--------------------------------------------------------------------------\n    /**\n     *\n     */\n    set resolution_scale(value: number) {\n        this.#surface.resolution_scale = value;\n    }\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "//------------------------------------------------------------------------------\nimport type { Quat, Vec3 } from \"@3dverse/livelink.core\";\n\n//------------------------------------------------------------------------------\nimport { mat4, quat, vec2, vec3 } from \"gl-matrix\";\n\n//------------------------------------------------------------------------------\nimport { ContextProvider, FrameMetaData, FrameSection, Transform } from \"@3dverse/livelink\";\n\n/**\n * @experimental\n * @category Rendering Contexts\n */\nexport class XRContext extends ContextProvider {\n    /**\n     *\n     */\n    #context: WebGLRenderingContext | WebGL2RenderingContext;\n\n    /**\n     * The WebGLRenderingContext of the canvas\n     */\n    #texture_ref: WebGLTexture | null = null;\n\n    /**\n     * The WebGLRenderingContext of the canvas\n     */\n    #shader_program: WebGLProgram | null = null;\n\n    /**\n     * The alternative frame buffer to draw on.\n     */\n    #frame_buffer: WebGLFramebuffer | null = null;\n\n    /**\n     *\n     */\n    #last_frame_section: FrameSection | null = null;\n\n    /**\n     *\n     */\n    screen_distance: number = 25;\n\n    /**\n     *\n     */\n    scale_factor: number = 1;\n\n    /**\n     *\n     */\n    fake_alpha_enabled: boolean = false;\n\n    /**\n     *\n     */\n    fake_alpha_scale: number = 1;\n\n    /**\n     *\n     */\n    readonly #neutral_direction: vec3 = vec3.fromValues(0, 0, -1);\n\n    /**\n     *\n     */\n    #billboard_position: vec3 = vec3.create();\n    #billboard_model_matrix: mat4 = mat4.create();\n    #projection_offset: vec2 = vec2.create();\n\n    /**\n     *\n     */\n    #camera_position: vec3 = vec3.create();\n    #camera_orientation: quat = quat.create();\n    #camera_direction: vec3 = vec3.create();\n\n    /**\n     *\n     */\n    get native(): WebGLRenderingContext | WebGL2RenderingContext {\n        return this.#context;\n    }\n\n    /**\n     *\n     */\n    set frame_buffer(fb: WebGLFramebuffer) {\n        this.#frame_buffer = fb;\n    }\n\n    /**\n     *\n     */\n    constructor(\n        canvas: HTMLCanvasElement | OffscreenCanvas,\n        context_type: \"webgl\" | \"webgl2\" = \"webgl\",\n        context_attributes?: WebGLContextAttributes & { xrCompatible?: boolean },\n    ) {\n        super();\n\n        const context = canvas.getContext(context_type, context_attributes);\n        if (context === null) {\n            throw new Error(`Cannot create a ${context_type} context from canvas`);\n        }\n\n        this.#context =\n            context_type === \"webgl\" ? (context as WebGLRenderingContext) : (context as WebGL2RenderingContext);\n\n        this.#initShaderProgram();\n        this.#initBuffers();\n        this.#initTexture();\n    }\n\n    /**\n     *\n     */\n    drawFrameSection({ frame_section }: { frame_section: FrameSection }): void {\n        this.#last_frame_section = frame_section;\n    }\n\n    /**\n     *\n     */\n    get meta_data(): FrameMetaData | null {\n        return this.#last_frame_section?.meta_data || null;\n    }\n\n    /**\n     *\n     */\n    drawXRFrame({\n        xr_views,\n        xr_viewports,\n        frame_camera_transforms,\n    }: {\n        xr_views: XRView[];\n        xr_viewports: XRViewport[];\n        frame_camera_transforms: Pick<Transform, \"position\" | \"orientation\">[];\n    }): void {\n        if (!this.#last_frame_section) {\n            return;\n        }\n\n        const gl = this.#context;\n\n        if (this.#frame_buffer !== null) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.#frame_buffer);\n        }\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n        const sizeLocation = gl.getUniformLocation(this.#shader_program!, \"size\");\n        const offsetLocation = gl.getUniformLocation(this.#shader_program!, \"offset\");\n        const viewMatrixLocation = gl.getUniformLocation(this.#shader_program!, \"viewMatrix\");\n        const viewOffsetLocation = gl.getUniformLocation(this.#shader_program!, \"viewOffset\");\n\n        const projectionMatrixLocation = gl.getUniformLocation(this.#shader_program!, \"projectionMatrix\");\n        const billboardMatrixLocation = gl.getUniformLocation(this.#shader_program!, \"billboardMatrix\");\n        const fakeAlphaEnabledLocation = gl.getUniformLocation(this.#shader_program!, \"fakeAlphaEnabled\");\n        const fakeAlphaScaleLocation = gl.getUniformLocation(this.#shader_program!, \"fakeAlphaScale\");\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.#texture_ref);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.#last_frame_section.pixels);\n\n        const fovY = Math.atan(1 / xr_views[0].projectionMatrix[5]) * 2;\n\n        const aspectRatio = xr_viewports[0].width / xr_viewports[0].height;\n        const scaleY = this.scale_factor * this.screen_distance * Math.tan(fovY * 0.5);\n        const scaleX = scaleY * aspectRatio;\n\n        const viewportWidth = this.#last_frame_section.section.width / xr_views.length;\n        const viewportHeight = this.#last_frame_section.section.height;\n\n        gl.uniform2fv(sizeLocation, [viewportWidth, viewportHeight]);\n\n        const combinedViewportWidth = xr_viewports.reduce((acc, { width }) => acc + width, 0);\n\n        for (let index = 0; index < xr_views.length; index++) {\n            const xr_view = xr_views[index];\n            const xr_viewport = xr_viewports[index];\n            const frame_camera_transform = frame_camera_transforms[index];\n            vec3.set(\n                this.#camera_position,\n                frame_camera_transform.position[0],\n                frame_camera_transform.position[1],\n                frame_camera_transform.position[2],\n            );\n\n            quat.set(\n                this.#camera_orientation,\n                frame_camera_transform.orientation[0],\n                frame_camera_transform.orientation[1],\n                frame_camera_transform.orientation[2],\n                frame_camera_transform.orientation[3],\n            );\n\n            // Compute the billboard position from the camera position and orientation\n            vec3.transformQuat(this.#camera_direction, this.#neutral_direction, this.#camera_orientation);\n            vec3.scaleAndAdd(\n                this.#billboard_position,\n                this.#camera_position,\n                this.#camera_direction,\n                this.screen_distance,\n            );\n\n            this.#projection_offset[0] = xr_view.projectionMatrix[8];\n            this.#projection_offset[1] = xr_view.projectionMatrix[9];\n\n            const billboardMatrix = this.#computeBillboardMatrix(this.#billboard_position, scaleX, scaleY);\n            gl.uniform2fv(viewOffsetLocation, this.#projection_offset);\n\n            gl.viewport(xr_viewport.x, xr_viewport.y, xr_viewport.width, xr_viewport.height);\n            gl.uniformMatrix4fv(viewMatrixLocation, false, xr_view.transform.inverse.matrix);\n            gl.uniformMatrix4fv(projectionMatrixLocation, false, xr_view.projectionMatrix);\n            gl.uniformMatrix4fv(billboardMatrixLocation, false, billboardMatrix);\n            gl.uniform1i(fakeAlphaEnabledLocation, this.fake_alpha_enabled ? 1 : 0);\n            gl.uniform1f(fakeAlphaScaleLocation, this.fake_alpha_scale);\n\n            const viewport_offset = xr_viewport.x / combinedViewportWidth;\n            const frame_offset =\n                this.#last_frame_section.section.left + viewport_offset * this.#last_frame_section.section.width;\n            gl.uniform2fv(offsetLocation, [frame_offset, this.#last_frame_section.section.top]);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        }\n    }\n\n    /**\n     *\n     */\n    override refreshSize(): void {}\n\n    /**\n     *\n     */\n    release(): void {\n        const gl = this.#context;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    /**\n     *\n     */\n    #computeBillboardMatrix(billboard_position: vec3, scaleX: number, scaleY: number): Float32Array {\n        mat4.fromRotationTranslationScale(\n            this.#billboard_model_matrix,\n            this.#camera_orientation,\n            billboard_position,\n            vec3.fromValues(scaleX, scaleY, 1),\n        );\n\n        return this.#billboard_model_matrix as Float32Array;\n    }\n\n    /**\n     *\n     */\n    #initShaderProgram(): void {\n        const gl = this.#context!;\n        // Vertex shader\n        const vertex_shader_source = `\n            attribute vec2 position;\n            varying vec2 texCoord;\n\n            uniform mat4 viewMatrix;\n            uniform mat4 projectionMatrix;\n            uniform vec2 scale;\n            uniform mat4 billboardMatrix;\n\n            uniform vec2 size;\n            uniform vec2 offset;\n            uniform vec2 viewOffset;\n\n            void main() {\n                texCoord = (position + 1.0) * 0.5;\n                texCoord.y = 1.0 - texCoord.y;\n                texCoord = size * texCoord + offset;\n                gl_Position = projectionMatrix * viewMatrix * billboardMatrix * vec4(position + viewOffset, 0.0, 1.0);\n            }`;\n        const vertex_shader = gl.createShader(gl.VERTEX_SHADER)!;\n        gl.shaderSource(vertex_shader, vertex_shader_source);\n        gl.compileShader(vertex_shader);\n        if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS)) {\n            console.error(\"Vertex shader failed to compile: \" + gl.getShaderInfoLog(vertex_shader));\n        }\n\n        // Fragment shader\n        const fragment_shader_source = `\n            precision mediump float;\n            varying vec2 texCoord;\n            uniform sampler2D texture;\n            uniform int fakeAlphaEnabled;\n            uniform float fakeAlphaScale;\n\n            float luminance(vec3 color) {\n                // sRGB luminance approximation\n                return dot(color, vec3(0.299, 0.587, 0.114));\n            }\n\n            void main() {\n                gl_FragColor = texture2D(texture, texCoord);\n                if(fakeAlphaEnabled == 1) {\n                    // Use luminance to determine alpha so values close to dark are transparent and smoothly fade\n                    // to prevent noise around object's edges\n                    float luma = luminance(gl_FragColor.rgb);\n                    float alpha = smoothstep(0.02, 0.1, luma);\n                    gl_FragColor.a = alpha;\n\n                    // remap [0..1] \u2192 [0..fakeAlphaScale] to see through opaque objects in AR\n                    if(fakeAlphaScale < 1.0) {\n                        gl_FragColor.a *= fakeAlphaScale;\n                    }\n\n                    // Premultiply RGB by alpha to avoid color bleeding on transparent edges\n                    // (required for correct blending in compositing / XR rendering)\n                    gl_FragColor.rgb *= alpha;\n                }\n            }`;\n        const fragment_shader = gl.createShader(gl.FRAGMENT_SHADER)!;\n        gl.shaderSource(fragment_shader, fragment_shader_source);\n        gl.compileShader(fragment_shader);\n        if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS)) {\n            console.error(\"Fragment shader failed to compile: \" + gl.getShaderInfoLog(fragment_shader));\n        }\n\n        // Shader program\n        const shader_program = gl.createProgram()!;\n        gl.attachShader(shader_program, vertex_shader);\n        gl.attachShader(shader_program, fragment_shader);\n        gl.linkProgram(shader_program);\n        gl.useProgram(shader_program);\n        if (!gl.getProgramParameter(shader_program, gl.LINK_STATUS)) {\n            console.error(\"Program failed to compile: \" + gl.getProgramInfoLog(shader_program));\n        }\n        gl.useProgram(shader_program);\n        this.#shader_program = shader_program;\n    }\n\n    /**\n     *\n     */\n    #initBuffers(): void {\n        const gl = this.#context!;\n\n        const vertex_buffer = gl.createBuffer();\n        const vertices = new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n        const position_attribute_location = gl.getAttribLocation(this.#shader_program!, \"position\");\n        gl.enableVertexAttribArray(position_attribute_location);\n        gl.vertexAttribPointer(position_attribute_location, 2, gl.FLOAT, false, 0, 0);\n    }\n\n    /**\n     *\n     */\n    #initTexture(): void {\n        const gl = this.#context!;\n        this.#texture_ref = gl.createTexture()!;\n        gl.bindTexture(gl.TEXTURE_2D, this.#texture_ref);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        const texture_uniform_location = gl.getUniformLocation(this.#shader_program!, \"texture\");\n        gl.uniform1i(texture_uniform_location, 0);\n    }\n}\n"],
  "mappings": "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",
  "names": ["react_exports", "__export", "WebXR", "WebXRContext", "__toCommonJS", "import_react", "import_livelink_react", "import_livelink", "EPSILON", "ARRAY_TYPE", "RANDOM", "degree", "y", "i", "create", "out", "ARRAY_TYPE", "mat4_exports", "__export", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromQuat2", "fromRotation", "fromRotationTranslation", "fromRotationTranslationScale", "fromRotationTranslationScaleOrigin", "fromScaling", "fromTranslation", "fromValues", "fromXRotation", "fromYRotation", "fromZRotation", "frustum", "getRotation", "getScaling", "getTranslation", "identity", "invert", "lookAt", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "ortho", "orthoNO", "orthoZO", "perspective", "perspectiveFromFieldOfView", "perspectiveNO", "perspectiveZO", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "targetTo", "translate", "transpose", "create", "out", "ARRAY_TYPE", "clone", "a", "copy", "fromValues", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "set", "identity", "transpose", "a01", "a02", "a03", "a12", "a13", "a23", "invert", "a00", "a10", "a11", "a20", "a21", "a22", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "adjoint", "determinant", "multiply", "b", "b0", "b1", "b2", "b3", "translate", "v", "x", "y", "z", "scale", "rotate", "rad", "axis", "len", "s", "c", "t", "b12", "b20", "b21", "b22", "EPSILON", "rotateX", "rotateY", "rotateZ", "fromTranslation", "fromScaling", "fromRotation", "fromXRotation", "fromYRotation", "fromZRotation", "fromRotationTranslation", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "fromQuat2", "translation", "bx", "by", "bz", "bw", "ax", "ay", "az", "aw", "magnitude", "getTranslation", "mat", "getScaling", "getRotation", "scaling", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "fromRotationTranslationScale", "sx", "sy", "sz", "fromRotationTranslationScaleOrigin", "o", "ox", "oy", "oz", "out0", "out1", "out2", "out4", "out5", "out6", "out8", "out9", "out10", "fromQuat", "yx", "zx", "zy", "frustum", "left", "right", "bottom", "top", "near", "far", "rl", "tb", "nf", "perspectiveNO", "fovy", "aspect", "f", "perspective", "perspectiveZO", "perspectiveFromFieldOfView", "fov", "upTan", "downTan", "leftTan", "rightTan", "xScale", "yScale", "orthoNO", "lr", "bt", "ortho", "orthoZO", "lookAt", "eye", "center", "up", "x0", "x1", "y0", "y1", "z0", "z1", "eyex", "eyey", "eyez", "upx", "upy", "upz", "centerx", "centery", "centerz", "targetTo", "target", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a14", "a15", "b4", "b5", "b6", "b7", "b8", "b9", "b13", "b14", "b15", "mul", "sub", "quat_exports", "__export", "add", "calculateW", "clone", "conjugate", "copy", "create", "dot", "equals", "exactEquals", "exp", "fromEuler", "fromMat3", "fromValues", "getAngle", "getAxisAngle", "identity", "invert", "len", "length", "lerp", "ln", "mul", "multiply", "normalize", "pow", "random", "rotateX", "rotateY", "rotateZ", "rotationTo", "scale", "set", "setAxes", "setAxisAngle", "slerp", "sqlerp", "sqrLen", "squaredLength", "str", "vec3_exports", "__export", "add", "angle", "bezier", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "hermite", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotateX", "rotateY", "rotateZ", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "transformQuat", "zero", "create", "out", "ARRAY_TYPE", "clone", "a", "length", "x", "y", "z", "fromValues", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "ax", "ay", "az", "bx", "by", "bz", "lerp", "t", "hermite", "c", "d", "factorTimes2", "factor1", "factor2", "factor3", "factor4", "bezier", "inverseFactor", "inverseFactorTimesTwo", "random", "r", "RANDOM", "zScale", "transformMat4", "m", "w", "transformMat3", "transformQuat", "q", "qx", "qy", "qz", "qw", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "w2", "rotateX", "rad", "p", "rotateY", "rotateZ", "angle", "mag1", "mag2", "mag", "cosine", "zero", "str", "exactEquals", "equals", "a0", "a1", "a2", "b0", "b1", "b2", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "create", "out", "ARRAY_TYPE", "clone", "a", "fromValues", "x", "y", "z", "w", "copy", "set", "add", "b", "scale", "out", "a", "b", "length", "a", "x", "y", "z", "w", "squaredLength", "normalize", "out", "a", "x", "y", "z", "w", "len", "dot", "b", "lerp", "out", "a", "b", "t", "ax", "ay", "az", "aw", "exactEquals", "a", "b", "equals", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "EPSILON", "forEach", "vec", "create", "a", "stride", "offset", "count", "fn", "arg", "i", "l", "create", "out", "ARRAY_TYPE", "identity", "setAxisAngle", "axis", "rad", "s", "getAxisAngle", "out_axis", "q", "EPSILON", "getAngle", "a", "b", "dotproduct", "dot", "multiply", "ax", "ay", "az", "aw", "bx", "by", "bz", "bw", "rotateX", "rotateY", "rotateZ", "calculateW", "x", "y", "z", "exp", "w", "r", "et", "ln", "t", "pow", "scale", "slerp", "omega", "cosom", "sinom", "scale0", "scale1", "random", "u1", "RANDOM", "u2", "u3", "sqrt1MinusU1", "sqrtU1", "invert", "a0", "a1", "a2", "a3", "invDot", "conjugate", "fromMat3", "m", "fTrace", "fRoot", "j", "k", "fromEuler", "halfToRad", "sx", "cx", "sy", "cy", "sz", "cz", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "rotationTo", "tmpvec3", "xUnitVec3", "yUnitVec3", "cross", "sqlerp", "temp1", "temp2", "c", "d", "setAxes", "matr", "view", "right", "up", "vec2_exports", "__export", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat2", "transformMat2d", "transformMat3", "transformMat4", "zero", "create", "out", "ARRAY_TYPE", "clone", "a", "fromValues", "x", "y", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "z", "lerp", "t", "ax", "ay", "random", "r", "RANDOM", "transformMat2", "m", "transformMat2d", "transformMat3", "transformMat4", "rotate", "rad", "p0", "p1", "sinC", "cosC", "angle", "x1", "y1", "x2", "y2", "mag", "cosine", "zero", "str", "exactEquals", "equals", "a0", "a1", "b0", "b1", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "import_livelink", "XRContext", "#context", "#texture_ref", "#shader_program", "#frame_buffer", "#last_frame_section", "#neutral_direction", "vec3_exports", "#billboard_position", "#billboard_model_matrix", "mat4_exports", "#projection_offset", "vec2_exports", "#camera_position", "#camera_orientation", "quat_exports", "#camera_direction", "fb", "canvas", "context_type", "context_attributes", "context", "#initShaderProgram", "#initBuffers", "#initTexture", "frame_section", "xr_views", "xr_viewports", "frame_camera_transforms", "gl", "sizeLocation", "offsetLocation", "viewMatrixLocation", "viewOffsetLocation", "projectionMatrixLocation", "billboardMatrixLocation", "fakeAlphaEnabledLocation", "fakeAlphaScaleLocation", "fovY", "aspectRatio", "scaleY", "scaleX", "viewportWidth", "viewportHeight", "combinedViewportWidth", "acc", "width", "index", "xr_view", "xr_viewport", "frame_camera_transform", "billboardMatrix", "#computeBillboardMatrix", "viewport_offset", "frame_offset", "billboard_position", "vertex_shader_source", "vertex_shader", "fragment_shader_source", "fragment_shader", "shader_program", "vertex_buffer", "vertices", "position_attribute_location", "texture_uniform_location", "import_threejs_math", "createPromiseWithResolvers", "resolve", "reject", "_resolve", "_reject", "WebXRHelper", "_WebXRHelper", "#cameras_origin_apply", "#cameras_origin_unapply", "#core", "#surface", "#overriden_near_plane", "#overridden_fovy", "#viewports", "#context", "#session", "#mode", "#forceSingleView", "#reference_space", "#xr_viewports", "#animationFrameRequestId", "mode", "isSessionSupportedFunction", "value", "#applyCamerasOrigin", "#unapplyCamerasOrigin", "resolution_scale", "XRContext", "error", "livelink_viewport", "xrSessionInit", "forceSingleView", "spaceTypes", "lastError", "spaceType", "sessionOptions", "livelink", "overscan_fov_factor", "enable_overscan_surface_scale", "enable_fake_alpha", "xr_views", "#getXRViews", "#configureLivelinkViewports", "#configureOverscan", "isAR", "dataJSON", "index", "xr_view", "xr_viewport", "#createViewportCamera", "promise", "remaining_attempts", "onFirstXRFrame", "_", "frame", "fov_factor", "enable_surface_scale", "fovY", "original_fov", "new_fov", "#onXRFrame", "type", "layer_init", "session", "baseLayer", "cameras", "origin_position", "origin_quat", "origin_scale", "reversed_origin_matrix", "origin_quat_conjugate", "camera", "position", "orientation", "transformed_position", "quaternion", "frame_camera_transforms", "transform", "frame_camera_transform", "gl_layer", "readonly_xr_views", "xr_viewports", "#xrViewportsHaveChanged", "#updateLiveLinkCameras", "viewport", "world_position", "world_orientation", "pos", "quat", "new_perspective_lens", "#computePerspectiveLens", "fovy", "nearPlane", "farPlane", "offset", "xr_eyes", "view", "xr_eye", "are_xr_viewport_normalized", "v", "xrViewport", "rect", "camera_entity", "projectionMatrix", "viewportWidth", "viewportHeight", "aspectRatio", "previous_xr_viewport", "WebXRContext", "WebXR", "children", "mode", "resolutionScale", "requiredFeatures", "optionalFeatures", "forceSingleView", "overscanFovFactor", "enableOverscanSurfaceScale", "enableFakeAlpha", "domOverlayRoot", "onSessionEnd", "instance", "containerRef", "webXRHelper", "WebXRHelper", "initializationPromiseRef", "xrSession", "setXrSession", "rootDomOverlay", "session", "React"]
}
