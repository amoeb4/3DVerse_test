import React, { JSX, type PropsWithChildren } from "react";
import { WebXRHelper } from "../WebXRHelper";
/**
 * Context that provides utilities for WebXR.
 *
 * @category Contexts
 */
export declare const WebXRContext: React.Context<{
    webXRHelper: WebXRHelper | null;
    xrSession: XRSession | null;
}>;
/**
 * A component that provides a WebXR session
 *
 * @param params
 * @param params.mode - The mode of the XR session.
 * @param params.resolution_scale - The resolution scale of the XR session.
 * @param params.onSessionEnd - The callback to call when the XR session ends.
 * @param params.forceSingleView - Whether to force single view mode.
 * @param params.requiredFeatures - The required features for the XR session.
 * @param params.optionalFeatures - The optional features for the XR session.
 * @param params.domOverlayRoot - Specifies a custom DOM overlay root element.
 *
 * @category Components
 */
export declare function WebXR({ children, mode, resolutionScale, requiredFeatures, optionalFeatures, forceSingleView, overscanFovFactor, enableOverscanSurfaceScale, enableFakeAlpha, domOverlayRoot, onSessionEnd, }: PropsWithChildren<{
    mode: XRSessionMode;
    resolutionScale?: number;
    requiredFeatures?: string[];
    optionalFeatures?: string[];
    forceSingleView?: boolean;
    overscanFovFactor?: number;
    enableOverscanSurfaceScale?: boolean;
    enableFakeAlpha?: boolean;
    domOverlayRoot?: Element;
    onSessionEnd?: () => void;
}>): JSX.Element;
//# sourceMappingURL=WebXR.d.ts.map