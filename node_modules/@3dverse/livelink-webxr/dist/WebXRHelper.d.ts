import { Livelink, Transform } from "@3dverse/livelink";
/**
 * @experimental
 */
export declare class WebXRHelper {
    #private;
    /**
     * Use cameras origin to shift the pose of the XRView
     */
    cameras_origin: Omit<Transform, "eulerOrientation"> | null;
    /**
     * Test if the provided XR session mode is supported by this browser.
     * @param mode defines the XR session mode to test
     * @returns Resolves with boolean indicating if the provided session mode is
     * supported.
     */
    static isSessionSupported(mode: XRSessionMode): Promise<boolean>;
    /**
     * The XRSession
     */
    get session(): XRSession | null;
    /**
     * The XRSessionMode
     */
    get mode(): XRSessionMode;
    /**
     * The XRReferenceSpace used to get the pose of the XRView
     */
    get reference_space(): XRReferenceSpace | null;
    /**
     * True if exactly 2 XRView instances are available in the XRSession.
     */
    get is_stereo_vision(): boolean;
    /**
     * Use to override the near plane provided by the projection matrix of the
     * xr views. Might be useful in the webxr emulator to see things close to
     * the eyes.
     */
    set overriden_near_plane(value: number | undefined);
    /**
     * Disable the application of the transform of the cameras origin
     */
    set cameras_origin_transform_enabled(value: boolean);
    constructor(resolution_scale?: number);
    /**
     * Release the XRSession and the rendering OffscreenSurface.
     */
    release(): Promise<void>;
    /**
     * Get the fake alpha mode flag of the XRContext. If enabled: the alpha
     * channel is set highest intensity among rgb channels for all pixels with
     * all rgb intensities inferior than 0.1.
     */
    get fakeAlpha(): boolean;
    /**
     * Set the fake alpha mode flag of the XRContext. If enabled: the alpha
     * channel is set highest intensity among rgb channels for all pixels with
     * all rgb intensities inferior than 0.1.
     */
    set fakeAlpha(value: boolean);
    /**
     * Get fake alpha scale value of the XRContext used to remap fragment
     * opacity from [0..1] to [0..fakeAlphaScale] if inferior to 1.
     */
    get fakeAlphaScale(): number;
    /**
     * Set fake alpha scale value of the XRContext used to remap fragment
     * opacity from [0..1] to [0..fakeAlphaScale] if inferior to 1.
     */
    set fakeAlphaScale(value: number);
    /**
     * Initialize the XRSession.
     * @param mode
     * @param options
     */
    initialize(mode: XRSessionMode, { xrSessionInit, forceSingleView }: {
        xrSessionInit?: XRSessionInit;
        forceSingleView?: boolean;
    }): Promise<XRSession>;
    /**
     * Configure the size and scale of the livelink viewports based on the XR views.
     * @param livelink
     * @param overscan_fov_factor
     * @param enable_overscan_surface_scale
     */
    configureViewports({ livelink, overscan_fov_factor, enable_overscan_surface_scale, enable_fake_alpha, }: {
        livelink: Livelink;
        overscan_fov_factor?: number;
        enable_overscan_surface_scale?: boolean;
        enable_fake_alpha?: boolean;
    }): Promise<void>;
    /**
     * Start the XRFrame animation loop.
     */
    start(): void;
    /**
     * Stop the XRFrame animation loop.
     */
    stop(): void;
    /**
     * Sets the reference space of the XR session
     * @param type - https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestReferenceSpace#type
     * @returns {Promise<XRReferenceSpace>} Resolves with the reference to the new reference space.
     */
    setReferenceSpaceType(type?: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    /**
     * Update the XRSesssion render state with the native WebGLREnderingContext
     * of the viewport's ContextWebGL.
     * @param layer_init
     * @returns Resolves when the render state is updated.
     */
    updateRenderState(layer_init?: XRWebGLLayerInit): Promise<void>;
    /**
     *
     */
    releaseLivelinkViewports(): void;
    /**
     *
     */
    get resolution_scale(): number;
    /**
     *
     */
    set resolution_scale(value: number);
}
//# sourceMappingURL=WebXRHelper.d.ts.map