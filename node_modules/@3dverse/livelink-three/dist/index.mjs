import*as i from"three";var c=class{#s=new i.Scene;#e;#t;#r;#n;#i=new AbortController;constructor({viewport_camera_projection:e,scene:r}){this.#s=r,this.#t=e.viewport,this.#n=new OffscreenCanvas(this.#t.width,this.#t.height);let t=this.#n.getContext("webgl2");if(!t)throw new Error("Cannot create a WebGL2 context");this.#r=new i.WebGLRenderer({context:t,canvas:this.#n}),this.#r.setClearColor(16777215,0),this.#r.setPixelRatio(1),this.#r.setSize(this.#t.width,this.#t.height,!1),this.#e=this.#o()}get camera(){return this.#e}get scene(){return this.#s}#o(){let e=this.#t.camera_projection?.camera_entity;if(!e)throw new Error("Viewport has no camera_projection");let r=e.perspective_lens,t=e.orthographic_lens;if(this.#i.abort(),this.#i=new AbortController,r)this.#e=this.#a({cameraEntity:e,perspective_lens:r});else if(t)this.#e=this.#c({cameraEntity:e,orthographic_lens:t});else throw new Error("Camera entity has no perspective_lens or orthographic_lens component");return this.#e.matrixAutoUpdate=!1,this.#e}#a({cameraEntity:e,perspective_lens:r}){let t=new i.PerspectiveCamera,o=1e5,a=s=>{t.aspect=this.#t.aspect_ratio,t.fov=s.fovy,t.near=s.nearPlane,t.far=s.farPlane||o},n=s=>{if(s.deleted_components.includes("perspective_lens")){this.#o();return}s.updated_components.includes("perspective_lens")&&a(e.perspective_lens)};return e.addEventListener("on-entity-updated",n,{signal:this.#i.signal}),a(r),t}#c({cameraEntity:e,orthographic_lens:r}){let t=new i.OrthographicCamera,o=n=>{t.left=-this.#t.aspect_ratio*n.zoomFactor[0],t.right=this.#t.aspect_ratio*n.zoomFactor[0],t.top=-n.zoomFactor[1],t.bottom=n.zoomFactor[1],t.near=n.zNear,t.far=n.zFar},a=n=>{if(n.deleted_components.includes("orthographic_lens")){this.#o();return}n.updated_components.includes("orthographic_lens")&&o(e.orthographic_lens)};return e.addEventListener("on-entity-updated",a,{signal:this.#i.signal}),o(r),t}draw({output_canvas:e}){let r=this.#t.camera_projection;if(!r)return null;if(this.#h({viewport_camera_projection:r}),e)throw new Error("Not implemented");return this.#n}#h({viewport_camera_projection:e}){this.#e.position.fromArray(e.world_position),this.#e.quaternion.fromArray(e.world_orientation),this.#e.updateMatrix(),this.#e.projectionMatrix.fromArray(e.clip_from_view_matrix),this.#e.projectionMatrixInverse.fromArray(e.view_from_clip_matrix),this.#r.setViewport(0,0,this.#t.width,this.#t.height),this.#r.render(this.#s,this.#e)}resize({width:e,height:r}){this.#n.width=e,this.#n.height=r,this.#r.setSize(e,r,!1)}release(){this.#i.abort(),this.#r.dispose()}};export{c as ThreeOverlay};
//# sourceMappingURL=index.mjs.map
