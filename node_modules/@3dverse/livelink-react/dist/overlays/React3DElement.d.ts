import React, { PropsWithChildren, ReactNode } from "react";
import { vec3 } from "gl-matrix";
import type { ReactOverlay, Projection } from "./ReactOverlay";
import { Vec2 } from "@3dverse/livelink";
/**
 *
 */
export type Anchor = "left-top" | "left-center" | "left-bottom" | "center-top" | "center" | "center-bottom" | "right-top" | "right-center" | "right-bottom";
/**
 *
 */
type HorizontalAnchor = "left" | "center" | "right";
/**
 *
 */
type VerticalAnchor = "top" | "center" | "bottom";
/**
 *
 */
export type React3DElementProps = PropsWithChildren<{
    worldPosition: vec3;
    anchor: Anchor;
    scaleFactor?: number;
}>;
/**
 * @internal
 */
export declare function createReact3DElementFactory(overlay: ReactOverlay): (props: React3DElementProps) => React.ReactElement;
/**
 * @internal
 */
export declare class React3DElement extends React.Component<{
    overlay: ReactOverlay;
} & React3DElementProps, {
    screen_position: vec3;
    z_index: number;
    scale: number;
    is_visible: boolean;
    translation: Vec2;
}> {
    #private;
    /**
     *
     */
    static VerticalAnchorPositions: Record<VerticalAnchor, number>;
    /**
     *
     */
    static HorizontalAnchorPositions: Record<HorizontalAnchor, number>;
    /**
     *
     */
    state: {
        screen_position: vec3;
        z_index: number;
        scale: number;
        is_visible: boolean;
        translation: Vec2;
    };
    /**
     *
     */
    componentDidMount(): void;
    /**
     *
     */
    componentDidUpdate(prevProps: Readonly<{
        overlay: ReactOverlay;
    } & React3DElementProps & {
        children?: ReactNode | undefined;
    }>): void;
    /**
     *
     */
    /**
     *
     */
    componentWillUnmount(): void;
    /**
     *
     */
    get screen_position(): vec3;
    /**
     *
     */
    get world_position(): vec3;
    /**
     *
     */
    get scale_factor(): number | undefined;
    /**
     *
     */
    setProjection(state: Projection & {
        z_index: number;
    }): void;
    /**
     *
     */
    render(): ReactNode;
}
export {};
//# sourceMappingURL=React3DElement.d.ts.map