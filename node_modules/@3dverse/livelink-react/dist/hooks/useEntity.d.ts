import type { Entity, EntityCreationOptions, ComponentsManifest, FindEntityQuery, ComponentName } from "@3dverse/livelink";
/**
 * An new entity instance.
 *
 * @inline
 */
type NewEntity = {
    /**
     * The name of the entity.
     */
    name: string;
    /**
     * The components to attach to the entity with their initial values.
     */
    components: ComponentsManifest;
    /**
     * The creation options of the entity.
     */
    options: EntityCreationOptions;
};
/**
 * @inline
 */
type FindEntityQueryByNames = {
    /**
     * The names of the entities to find.
     */
    names: Array<string>;
};
/**
 * @inline
 */
type FindEntityQueryByName = {
    /**
     * The name of the entity to find.
     */
    name: string;
};
/**
 * A provider of an entity.
 */
type EntityProvider = NewEntity | FindEntityQueryByName | Exclude<FindEntityQuery, FindEntityQueryByNames>;
/**
 * A hook that provides an entity and a flag indicating if the entity is pending loading.
 *
 * @example
 * ```tsx
 * const { isPending, entity } = useEntity({ id: "00000000-0000-0000-0000-000000000000" });
 * if (isPending) {
 *     return <div>Loading...</div>;
 * }
 * if (!entity) {
 *     return <div>Entity not found</div>;
 * }
 * return <div>Entity found: {entity.name}</div>;
 * ```
 * @param entityProvider - The entity provider.
 * @returns The entity and a flag indicating if the entity is pending loading.
 *
 * @category Hooks≈ì
 */
export declare function useEntity(entityProvider: EntityProvider, watchedComponents?: Array<ComponentName> | "any"): {
    isPending: boolean;
    entity: Entity | null;
};
export {};
//# sourceMappingURL=useEntity.d.ts.map