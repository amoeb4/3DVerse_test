import React, { HTMLProps, JSX, PropsWithChildren } from "react";
import { RenderingSurface } from "@3dverse/livelink";
/**
 * Context providing the canvas element and the rendering surface.
 *
 * @param canvas - The canvas element.
 * @param renderingSurface - The rendering surface.
 *
 * @category Contexts
 */
export declare const CanvasContext: React.Context<{
    canvas: HTMLCanvasElement | null;
    renderingSurface: RenderingSurface | null;
}>;
type CanvasContext = {
    contextType: "2d";
    contextAttributes?: CanvasRenderingContext2DSettings;
} | {
    contextType: "webgl";
    contextAttributes?: WebGLContextAttributes & {
        xrCompatible?: boolean;
    };
} | {
    contextType?: undefined;
    contextAttributes?: undefined;
};
/**
 * A component that provides a canvas element and a rendering surface.
 *
 * @param params - The canvas context.
 * @param params.children - The children to render.
 * @param params.contextType - The context type of the canvas.
 * @param params.contextAttributes - The context attributes of the canvas.
 * @param params.width - The width of the canvas.
 * @param params.height - The height of the canvas.
 *
 * @returns The canvas component.
 *
 * @category Components
 */
export declare function Canvas({ children, contextType, contextAttributes, width, height, ...props }: PropsWithChildren<CanvasContext & HTMLProps<HTMLDivElement>>): JSX.Element;
export {};
//# sourceMappingURL=Canvas.d.ts.map