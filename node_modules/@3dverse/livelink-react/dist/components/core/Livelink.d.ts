import React, { JSX, PropsWithChildren } from "react";
import { Livelink as LivelinkInstance, type UUID } from "@3dverse/livelink";
import { StrictUnion } from "../../utils";
/**
 * Context for managing the Livelink connection state.
 *
 * Provides information about the current Livelink instance, connection status,
 * and a method to disconnect from the Livelink service.
 *
 * @category Contexts
 */
export declare const LivelinkContext: React.Context<{
    /** The current Livelink instance or `null` if not connected. */
    instance: LivelinkInstance | null;
    /** Indicates whether the connection is currently in progress. */
    isConnecting: boolean;
    /** Indicates whether the connection has been disconnected. */
    isDisconnected: boolean;
    /** Function to disconnect from the current Livelink session. */
    disconnect: () => void;
}>;
/**
 * Represents the mode for joining an existing session.
 *
 * @inline
 */
export type SessionJoinMode = {
    /**
     * The UUID of the session to join.
     */
    sessionId: UUID;
};
/**
 * Represents the mode for either joining or starting a session.
 *
 * @inline
 */
export type SessionJoinOrStart = {
    /**
     * The UUID of the scene to connect to or start a session on.
     */
    sceneId: UUID;
    /**
     * Whether to automatically join any existing session.
     */
    autoJoinExisting?: boolean;
    /**
     * If a new session is started, specifies whether it is transient (non-persistent).
     * If a session is joined, this property is ignored.
     */
    isTransient?: boolean;
};
/**
 * Represents the mode for joining an existing session as a guest user.
 *
 * @inline
 */
export type SessionJoinGuest = {
    /**
     * The authentication type for the guest client.
     */
    clientType: "guest";
};
/**
 * Represents the union of all possible session open modes.
 *
 * This type includes:
 * - `SessionJoinMode`: For joining an existing session.
 * - `SessionJoinOrStart`: For joining or starting a session based on the provided context.
 *
 * @inline
 */
export type SessionOpenMode = StrictUnion<SessionJoinMode | SessionJoinOrStart | SessionJoinGuest>;
/**
 * Parameters for establishing a Livelink connection.
 *
 * Extends `SessionOpenMode` to define the session behavior and includes additional
 * options for handling connection lifecycle events, UI components, and settings.
 *
 * @inline
 * @category Components
 */
export type LivelinkConnectParameters = {
    /**
     * Authentication token required to establish the connection.
     */
    token: string;
    /**
     * Optional React component or node displayed while the connection is loading.
     */
    LoadingPanel?: React.ComponentType<{
        stage: string;
    }>;
    /**
     * Optional React component or node displayed when an inactivity timeout occurs.
     */
    InactivityWarningPanel?: React.ComponentType<{
        warningDuration: number;
        onActivityDetected: () => void;
    }>;
    /**
     * Optional React component or node displayed when the connection is disconnected.
     */
    ConnectionErrorPanel?: React.ComponentType<{
        error: string;
    }>;
} & SessionOpenMode;
/**
 * Provides the Livelink context and manages the lifecycle of a Livelink connection.
 *
 * This component initializes and maintains a connection to the Livelink service
 * and supplies relevant connection state and methods to its children via context.
 *
 * @param params
 *
 * @param params.children - React children components that will have access to the Livelink context.
 * @param params.sceneId - The unique identifier of the scene to connect to (required for "start" or "join-or-start").
 * @param params.sessionId - The unique identifier of the session to join (required for "join").
 * @param params.isTransient - Specifies if the connection is transient (non-persistent).
 * @param params.token - The authentication token required for the Livelink connection.
 * @param params.LoadingPanel - Optional React node displayed while the connection is being established.
 * @param params.InactivityWarningPanel - Optional React node displayed when an inactivity timeout occurs.
 * @param params.ConnectionErrorPanel - Optional React node displayed when the connection is lost.
 * @param params.autoJoinExisting - Specifies the mode for opening the session; defaults to `"join-or-start"`.
 *
 * @category Components
 */
export declare function LivelinkProvider({ sceneId, sessionId, isTransient, token, LoadingPanel, InactivityWarningPanel, ConnectionErrorPanel, autoJoinExisting, clientType, children, }: PropsWithChildren<LivelinkConnectParameters>): JSX.Element;
export { LivelinkProvider as Livelink };
//# sourceMappingURL=Livelink.d.ts.map