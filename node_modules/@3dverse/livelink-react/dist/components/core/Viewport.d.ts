import React from "react";
import * as Livelink from "@3dverse/livelink";
/**
 * Context that provides a viewport.
 *
 * @category Contexts
 */
export declare const ViewportContext: React.Context<{
    viewport: Livelink.Viewport | null;
    viewportDomElement: HTMLDivElement | null;
    zIndex: number;
    camera: Livelink.CameraProjection | null;
}>;
/**
 * A viewport component.
 *
 * @category Components
 */
export declare const Viewport: React.ForwardRefExoticComponent<(Omit<{
    cameraEntity: Livelink.Entity | null;
} & Partial<Record<"client" | "cameraIndex", never>> & {
    setHoveredEntity?: (data: {
        entity: Livelink.Entity;
        ws_position: Livelink.Vec3;
        ws_normal: Livelink.Vec3;
    } | null) => void;
    setPickedEntity?: (data: {
        entity: Livelink.Entity;
        ws_position: Livelink.Vec3;
        ws_normal: Livelink.Vec3;
    } | null) => void;
    renderTargetIndex?: number;
} & React.HTMLProps<HTMLDivElement> & {
    children?: React.ReactNode | undefined;
}, "ref"> | Omit<{
    client: Livelink.Client;
    cameraIndex?: number;
} & Partial<Record<"cameraEntity", never>> & {
    setHoveredEntity?: (data: {
        entity: Livelink.Entity;
        ws_position: Livelink.Vec3;
        ws_normal: Livelink.Vec3;
    } | null) => void;
    setPickedEntity?: (data: {
        entity: Livelink.Entity;
        ws_position: Livelink.Vec3;
        ws_normal: Livelink.Vec3;
    } | null) => void;
    renderTargetIndex?: number;
} & React.HTMLProps<HTMLDivElement> & {
    children?: React.ReactNode | undefined;
}, "ref">) & React.RefAttributes<Livelink.Viewport | undefined>>;
//# sourceMappingURL=Viewport.d.ts.map