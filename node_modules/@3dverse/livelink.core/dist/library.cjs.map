{
  "version": 3,
  "sources": ["../sources/library.ts", "../sources/DynamicLoader.ts"],
  "sourcesContent": ["export * from \"./DynamicLoader\";\nexport type * from \"./core\";\n\n//------------------------------------------------------------------------------\n/**\n * Version of the Livelink Core library, injected by the build system.\n * @internal\n */\ndeclare const LIVELINK_CORE_VERSION: string;\n\n/**\n * Name of the package, injected by the build system.\n * @internal\n */\ndeclare const PACKAGE_NAME: string;\n\n//------------------------------------------------------------------------------\ndeclare global {\n    interface Window {\n        __LIVELINK__: Record<string, string>;\n    }\n}\n\n//------------------------------------------------------------------------------\nif (typeof window !== \"undefined\") {\n    if (!window.__LIVELINK__) {\n        window.__LIVELINK__ = {};\n    }\n\n    if (Object.prototype.hasOwnProperty.call(window.__LIVELINK__, PACKAGE_NAME)) {\n        console.warn(\"\u26A0\uFE0F WARNING \u26A0\uFE0F Multiple instances of Livelink Core being imported.\");\n    } else {\n        window.__LIVELINK__[PACKAGE_NAME] = LIVELINK_CORE_VERSION;\n    }\n}\n", "import type { LivelinkCore } from \"./LivelinkCore\";\nimport type VM from \"node:vm\";\n\n/**\n *\n */\nconst isNode = typeof process !== \"undefined\" && process.versions != null && process.versions.node != null;\n\n/**\n * The URL of the Livelink core library. Injected by the build system.\n */\ndeclare const LIVELINK_CORE_URL: string;\n\n/**\n *\n */\ntype LivelinkCoreType = typeof LivelinkCore;\n\n/**\n *\n */\ntype CoreImporter = () => Promise<{\n    LivelinkCore: LivelinkCoreType;\n    LIVELINK_CORE_VERSION: string;\n    LIVELINK_CORE_COMMIT_SHA: string;\n}>;\n\n/**\n *\n */\ntype BuildTarget = \"prod\" | \"dev\" | \"debug\";\n\n/**\n * Dynamically loads the Livelink core library.\n *\n * {@link DynamicLoader.load} must be called before accessing {@link DynamicLoader.Core}.\n *\n * ### Usage\n * ```typescript\n * await DynamicLoader.load();\n * const core = new DynamicLoader.Core();\n * ```\n *\n * @category Core\n */\nexport class DynamicLoader {\n    /**\n     *\n     */\n    static #core: LivelinkCoreType | null = null;\n\n    /**\n     *\n     */\n    static #importPromise: Promise<void> | null = null;\n\n    /**\n     * Returns the core.\n     */\n    static get Core(): LivelinkCoreType {\n        if (!DynamicLoader.#core) {\n            throw new Error(\"Livelink core not initialized\");\n        }\n        return DynamicLoader.#core;\n    }\n\n    /**\n     * Dynamically loads the Livelink core library.\n     *\n     * Must be called before accessing {@link DynamicLoader.Core}.\n     * Only one target can be loaded at a time.\n     *\n     * @param target - The target build to load.\n     *  - `\"prod\"`: Contains no debug information.\n     *  - `\"dev\"`: Contains some debug information.\n     *  - `\"debug\"`: Contains extra debug information.\n     */\n    static load(target: BuildTarget = \"prod\"): Promise<void> {\n        if (!DynamicLoader.#importPromise) {\n            DynamicLoader.#importPromise = DynamicLoader.#importCore(target);\n        }\n\n        return DynamicLoader.#importPromise;\n    }\n\n    /**\n     *\n     */\n    static async #importCore(target: BuildTarget): Promise<void> {\n        const dynamicImport = await DynamicLoader.#createImporter(target);\n        const { LivelinkCore } = await dynamicImport();\n\n        DynamicLoader.#core = LivelinkCore;\n\n        const TARGET_COLOR = {\n            prod: \"#FFC700\",\n            dev: \"#36D399\",\n            debug: \"#FB4949\",\n        } satisfies Record<BuildTarget, string>;\n\n        console.info(\n            `%c Livelink Core initialized \uD83D\uDE80 %c ${LivelinkCore.VERSION} %c ${LivelinkCore.COMMIT_SHA} %c${target}`,\n            \"background: #080A12; color: #FFC700; font-weight: bold; padding: 8px; padding-right: 164px; border-radius: 16px; margin: 16px 0 16px 0\",\n            \"background: #9EA6D6; color: #0A1018; font-weight: bold; padding: 1px; padding-right: 0px; margin-left: -160px; border-radius: 16px 0 0 16px;\",\n            \"background: #6973A8; color: #0A1018; font-weight: bold; padding: 1px; padding-left: 0; border-radius: 0 16px 16px 0;\",\n            `background: ${TARGET_COLOR[target]}; color: #000; font-weight: bold; padding: 6px 16px; border: 4px solid #080A12; border-radius: 16px; margin-left: 16px`,\n        );\n    }\n\n    /**\n     *\n     */\n    static async #createImporter(target: string): Promise<CoreImporter> {\n        const moduleURL = LIVELINK_CORE_URL + \"/\" + (target !== \"prod\" ? `core.${target}.mjs` : \"core.mjs\");\n\n        if (!isNode) {\n            return new Function(\"return import('\" + moduleURL + \"')\") as CoreImporter;\n        }\n\n        const response = await fetch(moduleURL);\n        const source = await response.text();\n\n        // As a platform neutral build, we needs to load node:vm dynamically.\n        // We can't use await import('node:vm') directly because it will be resolved at build time\n        // and will not be available in the browser.\n        const vm = (await new Function(\"return import('node:vm')\")()) as {\n            SourceTextModule: typeof VM.SourceTextModule;\n        };\n\n        // VM Modules is an experimental feature, so it may not be available in all versions of Node.js.\n        // This feature is only available with the --experimental-vm-modules command flag enabled.\n        if (!vm.SourceTextModule) {\n            return new Function(\"return import('data:text/javascript;base64,\" + btoa(source) + \"')\") as CoreImporter;\n        }\n\n        console.info(\"Using experimental VM SourceTextModule to load Livelink core\");\n        return (async () => {\n            const module = new vm.SourceTextModule(source, { identifier: moduleURL });\n            // @ts-expect-error: Since core has no dependencies, the linker function will never be called.\n            await module.link(() => {});\n            await module.evaluate();\n\n            return module.namespace;\n        }) as CoreImporter;\n    }\n\n    /**\n     *\n     */\n    private constructor() {}\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,IAAA,eAAAC,EAAAH,GCMA,IAAMI,EAAS,OAAO,QAAY,KAAe,QAAQ,UAAY,MAAQ,QAAQ,SAAS,MAAQ,KAuCzFC,EAAN,MAAMC,CAAc,CAIvB,MAAOC,GAAiC,KAKxC,MAAOC,GAAuC,KAK9C,WAAW,MAAyB,CAChC,GAAI,CAACF,EAAcC,GACf,MAAM,IAAI,MAAM,+BAA+B,EAEnD,OAAOD,EAAcC,EACzB,CAaA,OAAO,KAAKE,EAAsB,OAAuB,CACrD,OAAKH,EAAcE,KACfF,EAAcE,GAAiBF,EAAcI,GAAYD,CAAM,GAG5DH,EAAcE,EACzB,CAKA,YAAaE,GAAYD,EAAoC,CACzD,IAAME,EAAgB,MAAML,EAAcM,GAAgBH,CAAM,EAC1D,CAAE,aAAAI,CAAa,EAAI,MAAMF,EAAc,EAE7CL,EAAcC,GAAQM,EAEtB,IAAMC,EAAe,CACjB,KAAM,UACN,IAAK,UACL,MAAO,SACX,EAEA,QAAQ,KACJ,6CAAsCD,EAAa,OAAO,OAAOA,EAAa,UAAU,MAAMJ,CAAM,GACpG,yIACA,+IACA,uHACA,eAAeK,EAAaL,CAAM,CAAC,wHACvC,CACJ,CAKA,YAAaG,GAAgBH,EAAuC,CAChE,IAAMM,EAAY,8CAA2BN,IAAW,OAAS,QAAQA,CAAM,OAAS,YAExF,GAAI,CAACL,EACD,OAAO,IAAI,SAAS,kBAAoBW,EAAY,IAAI,EAI5D,IAAMC,EAAS,MADE,MAAM,MAAMD,CAAS,GACR,KAAK,EAK7BE,EAAM,MAAM,IAAI,SAAS,0BAA0B,EAAE,EAM3D,OAAKA,EAAG,kBAIR,QAAQ,KAAK,8DAA8D,EACnE,SAAY,CAChB,IAAMC,EAAS,IAAID,EAAG,iBAAiBD,EAAQ,CAAE,WAAYD,CAAU,CAAC,EAExE,aAAMG,EAAO,KAAK,IAAM,CAAC,CAAC,EAC1B,MAAMA,EAAO,SAAS,EAEfA,EAAO,SAClB,GAXW,IAAI,SAAS,8CAAgD,KAAKF,CAAM,EAAI,IAAI,CAY/F,CAKQ,aAAc,CAAC,CAC3B,ED9HI,OAAO,OAAW,MACb,OAAO,eACR,OAAO,aAAe,CAAC,GAGvB,OAAO,UAAU,eAAe,KAAK,OAAO,aAAc,wBAAY,EACtE,QAAQ,KAAK,uFAAmE,EAEhF,OAAO,aAAa,wBAAY,EAAI",
  "names": ["library_exports", "__export", "DynamicLoader", "__toCommonJS", "isNode", "DynamicLoader", "_DynamicLoader", "#core", "#importPromise", "target", "#importCore", "dynamicImport", "#createImporter", "LivelinkCore", "TARGET_COLOR", "moduleURL", "source", "vm", "module"]
}
