/**
 * DO NOT EDIT THIS FILE MANUALLY.
 * This file has been generated automatically from ftl-schemas
 */
import type { Assets } from "../../sources/core";
import type { Vec3, UInt32, Float, Int32, Quat, AssetRef } from "../../sources/types";
/**
 * Settings for debug lines
 */
export type DebugLines = {
    /**
     * Whether to draw debug lines
     * @defaultValue false
     */
    drawDebugLines?: boolean;
    /**
     * Whether to draw geometry of physics bodies
     * @defaultValue true
     */
    drawPhysicsBodies?: boolean;
    /**
     * Whether to draw physics body axes
     * @defaultValue true
     */
    drawPhysicsBodyAxes?: boolean;
    /**
     * Whether to draw the center of mass of physics bodies
     * @defaultValue false
     */
    drawCenterOfMass?: boolean;
    /**
     * Whether to draw contacts between physics bodies
     * @defaultValue false
     */
    drawContacts?: boolean;
    /**
     * Whether to draw joint-related debug lines
     * @defaultValue false
     */
    drawJoints?: boolean;
    /**
     * Whether to draw the skeletons of rigged characters
     * @defaultValue false
     */
    drawSkeletons?: boolean;
    /**
     * Whether to draw certain IK parameters like the forward and up vector of an IK Aim node, or the pole vector of an IK Two Bone node
     * @defaultValue false
     */
    drawIK?: boolean;
    /**
     * Whether to draw the bouding boxes of entities
     * @defaultValue false
     */
    drawBoundingBoxes?: boolean;
    /**
     * Whether to draw camera frustums
     * @defaultValue false
     */
    drawCameraFrustums?: boolean;
    /**
     * Whether to draw light-related debug lines
     * @defaultValue false
     */
    drawLights?: boolean;
    /**
     * Whether to draw reflection probes
     * @defaultValue false
     */
    drawReflectionProbes?: boolean;
};
/**
 * Default camera component of the scene, used to create default cameras.
 */
export type DefaultCameraComponent = {
    /**
     * Specifies which render graph this camera should use.
     */
    renderGraphRef?: AssetRef<Assets.RenderGraph>;
    /**
     * Input values as described in the referenced render graph in their original JSON format.
     * @defaultValue [object Object]
     */
    dataJSON?: undefined;
    /**
     * Index of the render target to blit.
     * @defaultValue -1
     */
    renderTargetIndex?: Int32;
};
/**
 * Default camera global transform of the scene, used to create default cameras.
 */
export type DefaultCameraTransform = {
    /**
     * x, y, z position of the camera
     * @defaultValue 0,0,0
     */
    position?: Vec3;
    /**
     * Orientation of the camera expressed as a quaternion
     * @defaultValue 0,0,0,1
     */
    orientation?: Quat;
};
/**
 * Settings for the display
 */
export type Display = {
    /**
     * Maximum number of Frames Per Second the renderer is allowed to produce
     * @defaultValue 30
     */
    maxFPS?: UInt32;
    /**
     * Maximum resolution of loaded textures
     * @defaultValue 4294967295
     */
    maxTextureSize?: UInt32;
    /**
     * Draw frame without input events
     * @defaultValue false
     */
    forceRedraw?: boolean;
    /**
     * When 'Force Redraw' is off, this setting controls the number of frames the renderer will draw before going back to idle
     * @defaultValue 90
     */
    framePersistence?: UInt32;
};
/**
 * Settings for the environment
 */
export type Environment = {
    /**
     * Solid color used to clear the screen before drawing.
     * @defaultValue 0,0,0
     */
    clearColor?: Vec3;
    /**
     * Color of the spherical gradient at the top of the sphere.
     * @defaultValue 1,1,1
     */
    ambientColorTop?: Vec3;
    /**
     * Color of the spherical gradient at the bottom of the sphere.
     * @defaultValue 1,1,1
     */
    ambientColorBottom?: Vec3;
};
/**
 * Miscellaneous settings
 */
export type Misc = {
    /**
     * The maximum number of time a linker can reference itself.
     * @defaultValue 2
     */
    maxLinkersRecursionCount?: UInt32;
    /**
     * Plugins to load at startup
     */
    plugins?: Array<string>;
};
/**
 * Settings for the physics engine.
 */
export type Physics = {
    /**
     * The engine that is powering the physics of the scene.
     * @defaultValue physx
     */
    engine?: string;
    /**
     * Global gravity applied throughout the scene.
     * @defaultValue 0,-9.8,0
     */
    gravity?: Vec3;
    /**
     * A frame-rate-independent interval that dictates when physics calculations are performed.
     * @defaultValue 0.01666
     */
    timestepInS?: Float;
    /**
     * The epsilon used to mark whether the transform of an entity has changed and so whether to notify the physics engine.
     * @defaultValue 0.000001
     */
    epsilon?: Float;
    /**
     * The approximate size of objects in the simulation. This is used to estimate certain length-related tolerances.
     * @defaultValue 1
     */
    toleranceLength?: Float;
    /**
     * The typical magnitude of velocities of objects in simulation. This is used to estimate whether a contact should be treated as bouncing or resting based on its impact velocity, and a kinetic energy threshold below which the simulation may put objects to sleep. For normal physical environments, a good choice is the approximate speed of an object falling under gravity for one second.
     * @defaultValue 10
     */
    toleranceSpeed?: Float;
    /**
     * The bigger LMD Max is, the greater the area that is searched for future contacts, and so the greater time taken per iteration. Note that XDE resolves contacts pre-collision, not once collision has taken place, like the majority of physics engines. Displacement of any object per iteration should not exceed LMD Max.
     * @defaultValue 1
     */
    lmdMax?: Float;
};
/**
 * Renderer settings
 */
export type Renderer = {
    /**
     * Enable occlusion culling.
     * @defaultValue false
     */
    cpuOcclusionCulling?: boolean;
    /**
     * Toggle frustum culling
     * @defaultValue true
     */
    enableFrustumCulling?: boolean;
    /**
     * Toggle texture streaming
     * @defaultValue false
     */
    enableTextureStreaming?: boolean;
    /**
     * Enables geometry culling.
     * @defaultValue true
     */
    enableGeometryCulling?: boolean;
    /**
     * Enables ray tracing.
     * @defaultValue false
     */
    enableRayTracing?: boolean;
};
/**
 * Sound settings
 */
export type Sound = {
    /**
     * Enable 3dverse sound.
     * @defaultValue false
     */
    enabled?: boolean;
};
/**
 * Settings for the scene streaming
 */
export type Streaming = {
    /**
     * Scenes that enter this radius around the camera get loaded.
     * @defaultValue 0
     */
    streamingLoadingRadius?: Float;
    /**
     * Scenes that exit this radius around the camera get unloaded.
     * @defaultValue 0
     */
    streamingUnloadingRadius?: Float;
};
/**
 * Settings for voxel rendering
 */
export type Voxel = {
    /**
     * Maximum number of color samples used to compute the color LUT.
     * @defaultValue 512
     */
    maxNumberAlbedoValues?: UInt32;
};
