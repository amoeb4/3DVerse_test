/**
 * DO NOT EDIT THIS FILE MANUALLY.
 * This file has been generated automatically from ftl-schemas
 */
import { UUID } from "../../sources/types";
import * as Components from "./components";
/**
 * @category Engine Schemas
 */
export type ComponentName = keyof ComponentsRecord;
/**
 * @category Engine Schemas
 */
export type EntityCore = {
    euid: Components.Euid;
} & Partial<ComponentsRecord>;
/**
 * @category Engine Schemas
 */
export type ComponentsManifest = {
    euid?: {
        value: UUID;
    };
} & {
    [K in keyof ComponentsRecord]?: Partial<ComponentsRecord[K]>;
};
/**
 * @category Engine Schemas
 */
export type ComponentType<T extends ComponentName = ComponentName> = ComponentsRecord[T];
/**
 * @category Engine Schemas
 */
export type ComponentsRecord = {
    /**
     * Animation controller with reference to an animation graph and an animation set. Enables skeletal animation on its skinned mesh descendents whose skeleton is compatible with the animations in the animation set.
     */
    animation_controller: Components.AnimationController;
    /**
     * Animation sequence controller with reference to an animation sequence and assigned entities.
     */
    animation_sequence_controller: Components.AnimationSequenceController;
    /**
     * Links entity to bone in skeleton.
     */
    bone: Components.Bone;
    /**
     * Box geometry.
     */
    box_geometry: Components.BoxGeometry;
    /**
     * Virtual camera.
     */
    camera: Components.Camera;
    /**
     * Capsule geometry.
     */
    capsule_geometry: Components.CapsuleGeometry;
    /**
     * Character controller used for movement constrained by collisions without having to deal with a rigid body. A character controller is kinematic, and so is not affected by forces. It uses its own tweaked collision algorithm to give a good feeling while controlling the character.
     */
    character_controller: Components.CharacterController;
    /**
     * Reference to a collision geometry.
     */
    collision_geometry_ref: Components.CollisionGeometryRef;
    /**
     * A physics constraint that can be configured along 6 degrees of freedom. In its default state it behaves as a fixed constraint - that is, it rigidly fixes the constraint frames of its two entities. However, individual degrees of freedom may be unlocked to permit any combination of rotation around the x-, y- and z- axes, and translation along these axes.
     */
    constraint: Components.Constraint;
    /**
     * Culling geometry. Add this component in addition to another geometry component (e.g. box geometry, sphere geometry, etc.) to enable culling geometry.
     */
    culling_geometry: Components.CullingGeometry;
    /**
     * Cylinder geometry.
     */
    cylinder_geometry: Components.CylinderGeometry;
    /**
     * Name of the entity.
     */
    debug_name: Components.DebugName;
    /**
     * Decal Projector.
     */
    decal_projector: Components.DecalProjector;
    /**
     * The environment of a scene. Used to give a scene a skybox.
     */
    environment: Components.Environment;
    /**
     * Base component of all the other joint components (revolute_joint, etc.). By itself it will lock the orientations and distances of the constrainer and constrainee.
     */
    joint: Components.Joint;
    /**
     * Display a label in the 3d view.
     */
    label: Components.Label;
    /**
     * Lineage of the entity through linkers.
     */
    lineage: Components.Lineage;
    /**
     * Local Axis Aligned Bounding Box of the entity.
     */
    local_aabb: Components.LocalAabb;
    /**
     * Local transform of the entity.
     */
    local_transform: Components.LocalTransform;
    /**
     * References a shader and specifies input values if needed.
     */
    material: Components.Material;
    /**
     * Reference to a material.
     */
    material_ref: Components.MaterialRef;
    /**
     * Display a measure in the 3d view.
     */
    measure: Components.Measure;
    /**
     * Reference to a mesh.
     */
    mesh_ref: Components.MeshRef;
    /**
     * A lens that applies an orthographic projection.
     */
    orthographic_lens: Components.OrthographicLens;
    /**
     * Overrides a given entity in a sub scene.
     */
    overrider: Components.Overrider;
    /**
     * A lens that applies a perspective projection.
     */
    perspective_lens: Components.PerspectiveLens;
    /**
     * Physics material which represents a set of physical surface properties.
     */
    physics_material: Components.PhysicsMaterial;
    /**
     * Plane geometry.
     */
    plane_geometry: Components.PlaneGeometry;
    /**
     * Reference to a point cloud.
     */
    point_cloud_ref: Components.PointCloudRef;
    /**
     * A light with color and intensity. A point light by default, add a spot light component to add a cutoff. Can be parameterized to simulate the atmosphere sun.
     */
    point_light: Components.PointLight;
    /**
     * Omni directional reflection probe parameters, used for local cubemap reflection generation.
     */
    reflection_probe: Components.ReflectionProbe;
    /**
     * Rigid body parameters.
     */
    rigid_body: Components.RigidBody;
    /**
     * Reference to a scene.
     */
    scene_ref: Components.SceneRef;
    /**
     * References multiple scripts.
     */
    script_map: Components.ScriptMap;
    /**
     * Enables a light to cast shadows.
     */
    shadow_caster: Components.ShadowCaster;
    /**
     * Reference to a skeleton.
     */
    skeleton_ref: Components.SkeletonRef;
    /**
     * Reference to a sound.
     */
    sound_ref: Components.SoundRef;
    /**
     * Sphere geometry.
     */
    sphere_geometry: Components.SphereGeometry;
    /**
     * Display a spline in the 3d view.
     */
    spline: Components.Spline;
    /**
     * Adds a cutoff to a point light to simulate a spot light.
     */
    spot_light: Components.SpotLight;
    /**
     * A lens that applies a custom projection.
     */
    stereoscopic_lens: Components.StereoscopicLens;
    /**
     * Tags used to filter entities.
     */
    tags: Components.Tags;
    /**
     * Vehicle Controller parameters.
     */
    vehicle_controller: Components.VehicleController;
    /**
     * Filtering properties applied to the volume.
     */
    volume_filter: Components.VolumeFilter;
    /**
     * Reference to a material to use with a volume.
     */
    volume_material_ref: Components.VolumeMaterialRef;
    /**
     * Reference to a volume made of voxels.
     */
    volume_ref: Components.VolumeRef;
};
