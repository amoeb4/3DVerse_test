import { ComponentName, EntityCore } from "../_prebuild/engine_types/ComponentsRecord";
import { RTID, UUID } from "./types";
/**
 * @inline
 */
type FindEntityQueryByRTID = {
    /**
     * The RTID of the entity to find.
     */
    rtid: RTID;
};
/**
 * @inline
 */
type FindEntityQueryByLinkage = {
    /**
     * The EUID of the entity to find.
     */
    euid: UUID;
    /**
     * The exact linkage of the entity to find starting from the topmost linker.
     */
    linkage: Array<UUID>;
};
/**
 * @inline
 */
type FindEntityQueryByEUID = {
    /**
     * The EUID of the entity to find.
     * No linkage is provided in this case.
     * All entities with the same EUID are returned.
     */
    euid: UUID;
};
/**
 * @inline
 */
type FindEntityQueryByNames = {
    /**
     * The names of the entities to find.
     */
    names: Array<string>;
};
/**
 * @inline
 */
type FindEntityQueryWithComponents = {
    /**
     * The components that the entities must have.
     */
    mandatory_components: Array<ComponentName>;
    /**
     * The components that the entities must not have.
     */
    forbidden_components?: Array<ComponentName>;
};
/**
 * Find entity query to find entities based on different criteria.
 *
 * @category Entity Utils
 */
export type FindEntityQuery = FindEntityQueryByRTID | FindEntityQueryByLinkage | FindEntityQueryByEUID | FindEntityQueryByNames | FindEntityQueryWithComponents;
/**
 * Options for the find entity query.
 *
 * @inline
 *
 * @category Entity Utils
 */
export type FindEntityOptions = {
    /**
     * Whether to include the ancestors of the found entities.
     * This will incur an additional query to fetch the ancestors for each entity found.
     */
    include_ancestors?: boolean;
};
/**
 * The response to a find entity query.
 *
 * @category Entity Utils
 */
export type EntityResponse = {
    /**
     * The components of the entity.
     */
    components: EntityCore;
    /**
     * The ancestors of the entity.
     *
     * If undefined, the ancestors were not requested, and it should not be assumed that the entity has no ancestors.
     *
     * It defined and empty, the entity has no ancestors.
     *
     * Otherwise, it contains the ancestors of the entity starting with the topmost ancestor (the one that has no
     * parent) going all the way down to the direct parent of the entity.
     */
    ancestors?: Array<EntityResponse>;
};
/**
 * @category Entity Utils
 */
export type UpdateEntityCommand = {
    /**
     *
     */
    entity_components: EntityCore;
    /**
     *
     */
    dirty_components: Array<ComponentName>;
    /**
     *
     */
    deleted_components: Array<ComponentName>;
};
export {};
