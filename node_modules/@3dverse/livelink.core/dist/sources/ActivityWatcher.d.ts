/**
 * Watch activity on the gateway.
 *
 * Activity is defined as any message sent to the gateway that is **not** a heartbeat.
 *
 * Internally the activity watcher uses two timeouts:
 * - Inactivity warning: the time in seconds after which the {@link InactivityWarningEvent} event is dispatched.
 * - Inactivity timeout: the time in seconds after which the {@link Events.DisconnectedEvent} event is dispatched.
 *
 * Whenever an internal activity is detected like a message being sent to the gateway, the activity watcher is reset
 * and a {@link ActivityDetectedEvent} event is dispatched.
 *
 * The application **should** listen to these events and act accordingly.
 *
 * Usually, when the {@link InactivityWarningEvent} event is dispatched, the application should display a warning to
 * the user.
 * It is up to the application to decide what can be qualified as activity.
 * For example, the application could consider the user moving the mouse as activity. In this case, the application
 * would listen to the "mousemove" event and reset the activity watcher whenever the mouse is moved calling
 * the {@link ActivityWatcher.reset} method.
 *
 * The application should also listen to the {@link ActivityDetectedEvent} event and update the UI accordingly.
 *
 * Once the inactivity timeout is reached it automatically triggers the disconnection from the gateway, and a
 * {@link Events.DisconnectedEvent} is dispatched with `inactivity` as the reason.
 * In this case, there is no way to recover the connection. The application should let the user know that the connection
 * has been lost.
 *
 * @category Core
 */
export declare class ActivityWatcher {
    #private;
    /**
     * Inactivity warning in seconds.
     * Amount of time in seconds after which the `on-inactivity-warning` event is dispatched.
     */
    get inactivity_warning(): number;
    /**
     * Inactivity timeout in seconds.
     * Amount of time in seconds after which the `on-timeout` event is dispatched.
     */
    get inactivity_timeout(): number;
    /**
     * True if the timeouts have been started.
     */
    get is_running(): boolean;
    /**
     * True if activity watcher has timed out
     */
    get has_timed_out(): boolean;
    /**
     * Set the timeouts.
     *
     * Setting these values will reset the activity watcher if it is running.
     *
     * @param params
     * @param params.warn_after_seconds - Amount of time in seconds after which the `on-warning` event is dispatched.
     * Must be less than `timeout_after_seconds`.
     * @param params.timeout_after_seconds - Amount of time in seconds after which the `on-timeout` event is dispatched.
     */
    setTimeouts({ warn_after_seconds, timeout_after_seconds, }: {
        warn_after_seconds: number;
        timeout_after_seconds: number;
    }): void;
    /**
     * Reset the timeouts.
     */
    reset: () => void;
}
