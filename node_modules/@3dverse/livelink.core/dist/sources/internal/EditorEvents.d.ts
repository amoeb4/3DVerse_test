import type { ComponentsRecord, EntityCore } from "../../_prebuild/engine_types/ComponentsRecord";
import type { SceneSettingsRecord } from "../../_prebuild/engine_types/SceneSettingsRecord";
import type { RTID, UUID } from "../types";
/**
 *
 */
export declare class LoadingCompletedEvent extends Event {
    /**
     * An array of entities that are present in the scene at the root level.
     */
    readonly root_entities: Array<EntityCore>;
    /**
     * The settings of the scene.
     */
    readonly scene_settings: SceneSettingsRecord;
}
/**
 *
 */
export declare class EntitiesUpdatedEvent extends Event {
    /**
     * An array of entities that have been updated.
     */
    readonly updated_entities: Array<{
        entity_euid: UUID;
        updated_components: Partial<ComponentsRecord>;
    }>;
}
/**
 *
 */
export declare class EntityVisibilityChangedEvent extends Event {
    /**
     * The RTID of the entity whose visibility state has changed.
     */
    readonly entity_rtid: RTID;
    /**
     * The new visibility state of the entity.
     */
    readonly is_visible: boolean;
}
