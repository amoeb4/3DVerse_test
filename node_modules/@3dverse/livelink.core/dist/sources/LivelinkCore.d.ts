import type { GatewayMessages } from "../_prebuild/messages";
import { ComponentName, ComponentType, EntityCore, ComponentsManifest } from "../_prebuild/engine_types/ComponentsRecord";
import { RTID, UUID, Vec2i } from "./types";
import { ActivityWatcher } from "./ActivityWatcher";
import { SessionInterface } from "./SessionInterface";
import { TypedEventTarget } from "./TypedEventTarget";
import { CoreEvents } from "./CoreEvents";
import { EntityResponse, FindEntityOptions, FindEntityQuery, UpdateEntityCommand } from "./EntityUtils";
/**
 * The LivelinkCore is the main entry point to the Livelink API.
 *
 * It implements the communication protocol with the 3dverse server.
 *
 * It has two main responsibilities:
 * - It manages the connection to the 3dverse server.
 * - It provides methods to interact with the 3dverse server as defined in the Livelink protocol.
 *
 * An activity watcher is embedded to monitor the activity of the client.
 * If the client is inactive for a certain amount of time, the connection is closed.
 * See {@link ActivityWatcher}.
 *
 * ## Events
 *
 * See {@link CoreEvents}.
 *
 * @category Core
 */
export declare class LivelinkCore extends TypedEventTarget<CoreEvents> {
    #private;
    /**
     * Get the gateway activity watcher.
     */
    get activity_watcher(): ActivityWatcher;
    /**
     * Get the latency of the connection in milliseconds.
     */
    get latency(): number;
    /**
     * Connect to the session
     *
     * @param params
     * @param params.session - The session to connect to. MUST be joinable.
     */
    connect({ session }: {
        session: SessionInterface;
    }): Promise<void>;
    /**
     * Closes the connections to the 3dverse server.
     */
    disconnect(): void;
    /**
     *
     */
    sanitizeComponentValue<_ComponentName extends ComponentName>({ component_name, value, }: {
        component_name: _ComponentName;
        value: Partial<ComponentType<_ComponentName>> | undefined;
    }): ComponentType<_ComponentName>;
    /**
     * Set the simulation state.
     *
     * @param params
     * @param params.state - The state of the simulation.
     */
    setSimulationState({ state }: {
        state: "start_simulation" | "pause_simulation" | "stop_simulation";
    }): void;
    /**
     * Create entities.
     *
     * @param params
     * @param params.components - The components to use to create the entities.
     * @param params.delete_on_client_disconnection - Whether to delete the entities when the client disconnects.
     * @param params.is_transient - Whether the entities are transient.
     * @returns A promise that resolves to the created entities.
     *
     * @throws If any entity could not be created.
     */
    createEntities({ components, delete_on_client_disconnection, is_transient, }: {
        components: Array<ComponentsManifest>;
        delete_on_client_disconnection: boolean;
        is_transient: boolean;
    }): Promise<Array<EntityCore>>;
    /**
     * Update entities.
     */
    updateEntities({ update_commands, persist, }: {
        update_commands: Array<UpdateEntityCommand>;
        persist: boolean;
    }): Promise<void>;
    /**
     * Find entities based on a query.
     */
    findEntities({ query, options, }: {
        query: FindEntityQuery;
        options?: FindEntityOptions;
    }): Promise<Array<EntityResponse>>;
    /***************************************************************************
     * REGISTRATION (1)
     **************************************************************************/
    /**
     * Send the configuration requested by the client.
     *
     * @param params
     * @param params.client_config - The configuration requested by the client.
     */
    configureClient({ client_config, }: {
        client_config: GatewayMessages.Commands.ClientConfig;
    }): Promise<GatewayMessages.Commands.ClientConfigResponse>;
    /***************************************************************************
     * INPUTS (2)
     **************************************************************************/
    /**
     * Send the input state of an input device.
     *
     * @param params
     * @param params.input_state - The input state of the input device.
     */
    sendInputState({ input_state }: {
        input_state: GatewayMessages.Commands.InputStateData;
    }): void;
    /***************************************************************************
     * VIEWER CONTROL (4)
     **************************************************************************/
    /**
     * Resize the remote rendering surface.
     *
     * @param params
     * @param params.size - The new size of the remote rendering surface.
     */
    resize({ size }: {
        size: Vec2i;
    }): Promise<GatewayMessages.Commands.ResizeResponse>;
    /**
     * Suspend the rendering client. The server won't send any more frames until the client is resumed.
     */
    suspend(): void;
    /**
     * Resume the rendering client.
     */
    resume(): void;
    /**
     * Set the viewports configuration of the current client.
     *
     * @param params
     * @param params.viewport_configs - The viewports configuration.
     */
    setViewports({ viewport_configs }: {
        viewport_configs: Array<GatewayMessages.Commands.ViewportConfig>;
    }): void;
    /***************************************************************************
     * CLIENT REMOTE OPERATIONS (5)
     **************************************************************************/
    /**
     * Cast a screen space ray.
     *
     * @param params
     * @param params.screenSpaceRayQuery - The screen space ray query.
     * @returns A promise that resolves to the screen space ray response.
     */
    castScreenSpaceRay({ screenSpaceRayQuery, }: {
        screenSpaceRayQuery: GatewayMessages.Queries.ScreenSpaceRayQuery;
    }): Promise<GatewayMessages.Queries.ScreenSpaceRayResponse>;
    /**
     * Mark entities as selected.
     *
     * @param params
     * @param params.highlightEntitiesMessage - The message to highlight entities.
     */
    highlightEntities({ highlightEntitiesMessage, }: {
        highlightEntitiesMessage: GatewayMessages.Commands.HighlightEntitiesData;
    }): void;
    /**
     * 11 - Fire an event.
     *
     * @param fireEventMessage - The message to fire an event.
     */
    fireEvent(fireEventMessage: GatewayMessages.Commands.FireEventData): void;
    /**
     * 16 - Set a filter.
     *
     * @param setFilterMessage - The message to set a filter.
     *
     * @experimental
     */
    setFilter(setFilterMessage: GatewayMessages.Commands.SetFilterData): void;
    /**
     * 17 - Remove a filter.
     *
     * @param removeFilterMessage - The message to remove a filter.
     *
     * @experimental
     */
    removeFilter(removeFilterMessage: GatewayMessages.Commands.RemoveFilterData): void;
    /**
     * 18 - Toggle a filter.
     *
     * @param toggleFilterMessage - The message to toggle a filter.
     *
     * @experimental
     */
    toggleFilter(toggleFilterMessage: GatewayMessages.Commands.ToggleFilterData): void;
    /**
     * 20 - Assign a client to a script. The target script will consume the specified client's inputs.
     *
     * @param assignClientToScriptMessage - The message to assign a client to a script.
     */
    assignClientToScript(assignClientToScriptMessage: GatewayMessages.Commands.AssignClientToScriptData): void;
    /**
     * 24 - Send a skeleton pose.
     *
     * @param skeletonPoseMessage - The message to send a skeleton pose.
     */
    sendSkeletonPose(skeletonPoseMessage: GatewayMessages.Commands.SkeletonPoseData): void;
    /**
     * Delete entities.
     *
     * @param params
     * @param params.entity_uuids - The UUIDs of the entities to delete.
     */
    deleteEntities({ entity_uuids }: {
        entity_uuids: Array<UUID>;
    }): Promise<void>;
    /**
     * Set the visibility of the specified entity.
     *
     * @param params
     * @param params.entity_rtid - The RTID of the entity to set the visibility.
     * @param params.is_visible - The visibility of the entity.
     */
    setEntityVisibility({ entity_rtid, is_visible }: {
        entity_rtid: RTID;
        is_visible: boolean;
    }): Promise<void>;
    /**
     * Resolve the children of the specified entity.
     * Children are the direct children of the entity.
     *
     * @param params
     * @param params.entity_rtid - The RTID of the entity to resolve the children.
     * @returns A promise that resolves to the children of the entity or an empty array if the entity has no children.
     */
    getChildren({ entity_rtid }: {
        entity_rtid: RTID;
    }): Promise<Array<EntityCore>>;
}
