{
  "version": 3,
  "sources": ["../index.ts", "../_prebuild/wrapper.ts"],
  "sourcesContent": ["//--------------------------------------------------------------------------\nimport { AxiosError } from 'axios';\nimport axiosRetry, { isNetworkError, isIdempotentRequestError } from 'axios-retry';\n\n//--------------------------------------------------------------------------\nimport { axiosInstance } from './_prebuild/wrapper';\n\n//------------------------------------------------------------------------------\nexport function setApiKey(apiKey: string) {\n    axiosInstance.defaults.headers.common['api_key'] = apiKey;\n    delete axiosInstance.defaults.headers.common['user_token'];\n}\n\n//------------------------------------------------------------------------------\nexport function setUserToken(userToken: string) {\n    axiosInstance.defaults.headers.common['user_token'] = userToken;\n    delete axiosInstance.defaults.headers.common['api_key'];\n}\n\n//------------------------------------------------------------------------------\nabstract class ServiceError extends Error {\n    errorCode: number;\n    httpCode: number;\n    message: string;\n\n    //--------------------------------------------------------------------------\n    constructor(errorCode: number, httpCode: number, message: string) {\n        super();\n        this.errorCode = errorCode;\n        this.httpCode = httpCode;\n        this.message = message;\n    }\n}\n\n//------------------------------------------------------------------------------\nexport class ApiError extends ServiceError {\n    serviceError: unknown;\n\n    constructor(errorCode: number, status: number, message: string, serviceError: unknown) {\n        super(errorCode, status, message);\n        this.serviceError = serviceError;\n    }\n}\n\n//------------------------------------------------------------------------------\nexport class UnexpectedServiceError extends ServiceError {\n    unexpectedError: unknown;\n\n    constructor(status: number, unexpectedError: unknown) {\n        super(0, status, 'Unexpected service error error');\n        this.unexpectedError = unexpectedError;\n    }\n}\n\n//------------------------------------------------------------------------------\nfunction installInterceptors() {\n    const CLIENT_ERROR = 400 as const;\n    const INTERNAL_SERVER_ERROR = 500 as const;\n\n    axiosRetry(axiosInstance, {\n        retries: 5,\n        retryDelay: axiosRetry.exponentialDelay,\n        retryCondition: shouldRetryRequest,\n    });\n\n    axiosInstance.interceptors.response.use(\n        successFulResponse => {\n            if (successFulResponse.config.responseType === 'stream') {\n                successFulResponse.data.pause();\n            }\n\n            return successFulResponse;\n        },\n        error => {\n            if (!error.response) {\n                return Promise.reject(error);\n            }\n\n            const axiosError = error as AxiosError;\n            const status = axiosError.response?.status || INTERNAL_SERVER_ERROR;\n            const errorData = axiosError.response?.data;\n\n            if (\n                !errorData &&\n                axiosError.request.method === 'HEAD' &&\n                status >= CLIENT_ERROR &&\n                status < INTERNAL_SERVER_ERROR\n            ) {\n                return axiosError.response;\n            }\n\n            if (!errorData || typeof errorData !== 'object') {\n                return Promise.reject(new UnexpectedServiceError(status, errorData));\n            }\n\n            const serviceError = errorData as ServiceError;\n            return Promise.reject(new ApiError(serviceError.errorCode, status, serviceError.message, serviceError));\n        },\n    );\n}\n\n//------------------------------------------------------------------------------\nfunction shouldRetryRequest(error: AxiosError) {\n    const status = error.response?.status;\n\n    switch (status) {\n        case 403:\n        case 404:\n            return true;\n\n        default:\n            return isNetworkError(error) || isIdempotentRequestError(error);\n    }\n}\n\n//------------------------------------------------------------------------------\ninstallInterceptors();\n\n//------------------------------------------------------------------------------\nexport * from './_prebuild/wrapper';\n", "/**\n * 3dverse Asset API v1.0\n * # Getting Started\n *\n *Welcome to the 3dverse Asset API. This is the reference for the REST API endpoints.\n *\n *## NPM package\n *\n *We provide a TypeScript wrapper library to make typesafe API requests and get typed responses: [https://www.npmjs.com/package/@3dverse/api](https://www.npmjs.com/package/@3dverse/api).\n *\n *## Authentication\n *\n *To authenticate your API calls, you'll need to generate an API key via the [3dverse Console](https://console.3dverse.com) and send an `api_key` header with your API requests.\n *Alternatively, you can create a user, generate a token for the user and authenticate with a `user_token`.\n *\n *\n *---\n *\n *\n * Contact: 3dverse Support (support@3dverse.com)\n *\n * DO NOT EDIT THIS FILE MANUALLY.\n * This file has been generated automatically from its OpenAPI spec file.\n * See: https://gitlab.com/3dverse/platform/libs/js/openapi-client-library-generator\n */\n\n//--------------------------------------------------------------------------\nimport axios, { AxiosPromise, AxiosRequestHeaders, AxiosError, AxiosProgressEvent } from 'axios';\n\n//--------------------------------------------------------------------------\ntype UnionKeys<T> = T extends T ? keyof T : never;\ntype StrictUnionHelper<T, TAll> = T extends any ? T & Partial<Record<Exclude<UnionKeys<TAll>, keyof T>, never>> : never;\ntype StrictUnion<T> = StrictUnionHelper<T, T>;\n\n//--------------------------------------------------------------------------\nexport const axiosInstance = axios.create({\n    baseURL: 'https://api.3dverse.com/app/v1',\n});\n\n//------------------------------------------------------------------------------\nexport function setBaseURL(baseURL: string) {\n    axiosInstance.defaults.baseURL = baseURL;\n}\n\n//--------------------------------------------------------------------------\nexport type ListUsers_User_UserInfo = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Retrieve a list of all users in the current application.\n */\nexport function listUsers(\n    {\n        offset = 0,\n        limit = 10,\n    }: {\n        offset?: number;\n        limit?: number;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<ListUsers_User_UserInfo>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/users',\n        params: {\n            offset: offset,\n            limit: limit,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type RegisterUser_User_UserInfo = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Registers the target user in the current application.\n */\nexport function registerUser(\n    {\n        username,\n    }: {\n        username: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<RegisterUser_User_UserInfo> {\n    return axiosInstance({\n        method: 'post',\n        url: '/users',\n        data: {\n            username: username,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetUser_User_UserInfo = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Retrieves details about the target user.\n */\nexport function getUser(\n    {\n        user_id,\n    }: {\n        user_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetUser_User_UserInfo> {\n    return axiosInstance({\n        method: 'get',\n        url: '/users/' + user_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Updates the details of the target user.\n */\nexport function updateUser(\n    {\n        user_id,\n        username,\n    }: {\n        user_id: string;\n        username: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'patch',\n        url: '/users/' + user_id + '',\n        data: {\n            username: username,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type DeleteUser_Object = {\n    deleted_assets?: DeleteUser_Object;\n};\n/**\n * Deletes the target user.\n */\nexport function deleteUser(\n    {\n        user_id,\n    }: {\n        user_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<DeleteUser_Object> {\n    return axiosInstance({\n        method: 'delete',\n        url: '/users/' + user_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GenerateUserToken_Token = {\n    user_token: string;\n    expires_in: number;\n    expires_on: number;\n};\n/**\n * Generates a user token. This user token identifies the user when making a request.\n */\nexport function generateUserToken(\n    {\n        user_id,\n        scope,\n        ttl = '1h',\n    }: {\n        user_id: string;\n        scope: 'read' | 'write' | 'manage';\n        ttl?: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GenerateUserToken_Token> {\n    return axiosInstance({\n        method: 'post',\n        url: '/users/' + user_id + '/tokens',\n        data: {\n            scope: scope,\n            ttl: ttl,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetUserGroups_Group_GroupInfo = {\n    group_id: string;\n    name: string;\n    description?: string;\n    created_at: string;\n    members: Array<GetUserGroups_GroupMember_GroupAccess>;\n};\nexport type GetUserGroups_GroupMember_GroupAccess = {\n    user_id: string;\n    joined_at?: string;\n    group_access: 'read' | 'write' | 'manage';\n    folder_access: 'read' | 'write' | 'manage';\n};\n/**\n * Lists all user groups.\n */\nexport function getUserGroups(\n    {\n        user_id,\n    }: {\n        user_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetUserGroups_Group_GroupInfo>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/users/' + user_id + '/groups',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetUserUploadTasks_UploadTask = {\n    upload_task_id: string;\n    folder_id: string;\n    uploaded_at: string;\n    uploaded_by: GetUserUploadTasks_Object;\n    progress: number;\n    download_progress?: number;\n    status: StrictUnion<'waiting' | 'downloading' | 'pending' | 'converting' | 'error' | 'success' | 'rejected'> &\n        string;\n    conversion_tasks: Array<GetUserUploadTasks_ConversionTask>;\n};\nexport type GetUserUploadTasks_Object = {\n    user_id: string;\n    username: string;\n};\nexport type GetUserUploadTasks_ConversionTask = {\n    asset_id: string;\n    source_file_id: string;\n    source_file_name: string;\n    conversion_pipeline: 'auto-detect' | 'volume' | 'scene' | 'texture' | 'animation' | 'point-cloud';\n    progress: number;\n    status: StrictUnion<'pending' | 'converting' | 'error' | 'success'> & string;\n};\n/**\n * Lists all upload tasks of the target user.\n */\nexport function getUserUploadTasks(\n    {\n        user_id,\n        offset = 0,\n        limit = 10,\n    }: {\n        user_id: string;\n        offset?: number;\n        limit?: number;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetUserUploadTasks_UploadTask>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/users/' + user_id + '/upload-tasks',\n        params: {\n            offset: offset,\n            limit: limit,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateGroup_GroupMember_GroupAccess = {\n    user_id: string;\n    group_access: 'read' | 'write' | 'manage';\n    folder_access: 'read' | 'write' | 'manage';\n};\nexport type CreateGroup_Group_GroupInfo = {\n    group_id: string;\n    name: string;\n    description?: string;\n    created_at: string;\n    members: Array<CreateGroup_GroupMember_GroupAccess_Writable>;\n};\nexport type CreateGroup_GroupMember_GroupAccess_Writable = {\n    user_id: string;\n    joined_at?: string;\n    group_access: 'read' | 'write' | 'manage';\n    folder_access: 'read' | 'write' | 'manage';\n};\n/**\n * Creates a new user group.\n */\nexport function createGroup(\n    {\n        name,\n        description,\n        members,\n    }: {\n        name: string;\n        description?: string;\n        members: Array<CreateGroup_GroupMember_GroupAccess>;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateGroup_Group_GroupInfo> {\n    return axiosInstance({\n        method: 'post',\n        url: '/groups',\n        data: {\n            name: name,\n            description: description,\n            members: members,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetGroup_Group_GroupInfo = {\n    group_id: string;\n    name: string;\n    description?: string;\n    created_at: string;\n    members: Array<GetGroup_GroupMember_GroupAccess>;\n};\nexport type GetGroup_GroupMember_GroupAccess = {\n    user_id: string;\n    joined_at?: string;\n    group_access: 'read' | 'write' | 'manage';\n    folder_access: 'read' | 'write' | 'manage';\n};\n/**\n * Gets a group details.\n */\nexport function getGroup(\n    {\n        group_id,\n    }: {\n        group_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetGroup_Group_GroupInfo> {\n    return axiosInstance({\n        method: 'get',\n        url: '/groups/' + group_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Updates a group details.\n */\nexport function updateGroupDescription(\n    {\n        group_id,\n        name,\n        description,\n    }: {\n        group_id: string;\n        name: string;\n        description: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'patch',\n        url: '/groups/' + group_id + '',\n        data: {\n            name: name,\n            description: description,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Deletes a group and all its access rights.\n */\nexport function deleteGroup(\n    {\n        group_id,\n    }: {\n        group_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/groups/' + group_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Grants member access to the group.\n */\nexport function grantMemberAccessToGroup(\n    {\n        group_id,\n        member_type,\n        member_id,\n        group_access,\n        folder_access,\n    }: {\n        group_id: string;\n        member_type: 'users' | 'groups';\n        member_id: string;\n        group_access: 'read' | 'write' | 'manage';\n        folder_access: 'read' | 'write' | 'manage';\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'put',\n        url: '/groups/' + group_id + '/members/' + member_type + '/' + member_id + '',\n        data: {\n            group_access: group_access,\n            folder_access: folder_access,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Revoke requested user access to group.\n */\nexport function revokeMemberAccessToGroup(\n    {\n        group_id,\n        member_type,\n        member_id,\n    }: {\n        group_id: string;\n        member_type: 'users' | 'groups';\n        member_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/groups/' + group_id + '/members/' + member_type + '/' + member_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type ListFolders_Folder = {\n    folder_id: string;\n    parent_folder_id?: string;\n    name: string;\n    created_at?: string;\n    created_by?: ListFolders_Object;\n    subfolders?: Array<ListFolders_Folder>;\n    source_file_count?: number;\n    asset_count?: number;\n};\nexport type ListFolders_Object = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Lists all accessible folders.\n */\nexport function listFolders(\n    {\n        offset = 0,\n        limit = 10,\n    }: {\n        offset?: number;\n        limit?: number;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<ListFolders_Folder>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders',\n        params: {\n            offset: offset,\n            limit: limit,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateFolder_Folder = {\n    name: string;\n    subfolders?: Array<CreateFolder_Folder>;\n};\nexport type CreateFolder_Folder_Writable = {\n    folder_id: string;\n    parent_folder_id?: string;\n    name: string;\n    created_at?: string;\n    created_by?: CreateFolder_Object;\n    subfolders?: Array<CreateFolder_Folder_Writable>;\n    source_file_count?: number;\n    asset_count?: number;\n};\nexport type CreateFolder_Object = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Creates a folder.\n */\nexport function createFolder(\n    {\n        name,\n        subfolders,\n    }: {\n        name: string;\n        subfolders?: Array<CreateFolder_Folder>;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateFolder_Folder_Writable> {\n    return axiosInstance({\n        method: 'post',\n        url: '/folders',\n        data: {\n            name: name,\n            subfolders: subfolders,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetFolderInfo_Folder = {\n    folder_id: string;\n    parent_folder_id?: string;\n    name: string;\n    created_at?: string;\n    created_by?: GetFolderInfo_Object;\n    subfolders?: Array<GetFolderInfo_Folder>;\n    source_file_count?: number;\n    asset_count?: number;\n};\nexport type GetFolderInfo_Object = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Gets the requested folder details.\n */\nexport function getFolderInfo(\n    {\n        folder_id,\n    }: {\n        folder_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetFolderInfo_Folder> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Move folders inside the specified folder.\n */\nexport function moveFolders(\n    {\n        folder_id,\n        folder_ids,\n    }: {\n        folder_id: string;\n        folder_ids: Array<string>;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'put',\n        url: '/folders/' + folder_id + '',\n        data: folder_ids,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Updates the folder details.\n */\nexport function updateFolder(\n    {\n        folder_id,\n        name,\n    }: {\n        folder_id: string;\n        name?: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'patch',\n        url: '/folders/' + folder_id + '',\n        data: {\n            name: name,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Deletes the requested folder. The target folder must be empty.\n */\nexport function deleteFolder(\n    {\n        folder_id,\n    }: {\n        folder_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/folders/' + folder_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type ListFolderAccesses_Object = {\n    users?: Array<ListFolderAccesses_UserInfo_FolderAccess>;\n    groups?: Array<ListFolderAccesses_GroupInfo_FolderAccess>;\n};\nexport type ListFolderAccesses_UserInfo_FolderAccess = {\n    user_id: string;\n    username: string;\n    access: 'read' | 'write' | 'manage';\n};\nexport type ListFolderAccesses_GroupInfo_FolderAccess = {\n    group_id: string;\n    name: string;\n    access: 'read' | 'write' | 'manage';\n};\n/**\n * List member access to the targeted folder.\n */\nexport function listFolderAccesses(\n    {\n        folder_id,\n    }: {\n        folder_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<ListFolderAccesses_Object> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '/access',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Grants member access to the targeted folder.\n */\nexport function grantMemberAccessToFolder(\n    {\n        folder_id,\n        member_type,\n        member_id,\n        access,\n    }: {\n        folder_id: string;\n        member_type: 'users' | 'groups';\n        member_id: string;\n        access: 'read' | 'write' | 'manage';\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'put',\n        url: '/folders/' + folder_id + '/access/' + member_type + '/' + member_id + '',\n        data: {\n            access: access,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Revokes member access to a target folder.\n */\nexport function revokeMemberAccessToFolder(\n    {\n        folder_id,\n        member_type,\n        member_id,\n    }: {\n        folder_id: string;\n        member_type: 'users' | 'groups';\n        member_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/folders/' + folder_id + '/access/' + member_type + '/' + member_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateSubfolder_Folder = {\n    name: string;\n    subfolders?: Array<CreateSubfolder_Folder>;\n};\nexport type CreateSubfolder_Folder_Writable = {\n    folder_id: string;\n    parent_folder_id?: string;\n    name: string;\n    created_at?: string;\n    created_by?: CreateSubfolder_Object;\n    subfolders?: Array<CreateSubfolder_Folder_Writable>;\n    source_file_count?: number;\n    asset_count?: number;\n};\nexport type CreateSubfolder_Object = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Creates a subfolder.\n */\nexport function createSubfolder(\n    {\n        folder_id,\n        name,\n        subfolders,\n    }: {\n        folder_id: string;\n        name: string;\n        subfolders?: Array<CreateSubfolder_Folder>;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateSubfolder_Folder_Writable> {\n    return axiosInstance({\n        method: 'post',\n        url: '/folders/' + folder_id + '/folders',\n        data: {\n            name: name,\n            subfolders: subfolders,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type ListFolderSubFolders_Folder = {\n    folder_id: string;\n    parent_folder_id?: string;\n    name: string;\n    created_at?: string;\n    created_by?: ListFolderSubFolders_Object;\n    subfolders?: Array<ListFolderSubFolders_Folder>;\n    source_file_count?: number;\n    asset_count?: number;\n};\nexport type ListFolderSubFolders_Object = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Lists all subfolders of requested folder. This request can be recursive.\n */\nexport function listFolderSubFolders(\n    {\n        folder_id,\n    }: {\n        folder_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<ListFolderSubFolders_Folder>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '/folders',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type UploadSourceFiles_Object = {\n    upload_task_id?: string;\n};\n/**\n * Uploads the specified source file(s).\n */\nexport function uploadSourceFiles(\n    {\n        folder_id,\n        body,\n    }: {\n        folder_id: string;\n        body: FormData;\n    },\n    onUploadProgress?: (progressEvent: AxiosProgressEvent) => void,\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<UploadSourceFiles_Object> {\n    return axiosInstance({\n        method: 'post',\n        url: '/folders/' + folder_id + '/source-files',\n        data: body,\n        onUploadProgress: onUploadProgress,\n        headers: {\n            'Content-Type': 'multipart/form-data',\n            ...headers,\n        },\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSourceFilesInFolder_Filters = {\n    source_file_name?: string;\n};\nexport type GetSourceFilesInFolder_SourceFile = {\n    source_file_id: string;\n    source_file_original_name: string;\n    name: string;\n    size: number;\n};\n/**\n * Lists all source files in a folder.\n */\nexport function getSourceFilesInFolder(\n    {\n        folder_id,\n        offset = 0,\n        limit = 10,\n        filters,\n    }: {\n        folder_id: string;\n        offset?: number;\n        limit?: number;\n        filters?: GetSourceFilesInFolder_Filters;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetSourceFilesInFolder_SourceFile>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '/source-files',\n        params: {\n            offset: offset,\n            limit: limit,\n            filters: filters,\n        },\n        headers: headers,\n    }).then(response => {\n        response.headers['x-source-files-count'] = JSON.parse(response.headers['x-source-files-count']) as number;\n        return response;\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Move source files inside the specified folder.\n */\nexport function moveSourceFiles(\n    {\n        folder_id,\n        source_file_ids,\n    }: {\n        folder_id: string;\n        source_file_ids: Array<string>;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'put',\n        url: '/folders/' + folder_id + '/source-files',\n        data: source_file_ids,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetUploadTasksInFolder_UploadTask = {\n    upload_task_id: string;\n    folder_id: string;\n    uploaded_at: string;\n    uploaded_by: GetUploadTasksInFolder_Object;\n    progress: number;\n    download_progress?: number;\n    status: StrictUnion<'waiting' | 'downloading' | 'pending' | 'converting' | 'error' | 'success' | 'rejected'> &\n        string;\n    conversion_tasks: Array<GetUploadTasksInFolder_ConversionTask>;\n};\nexport type GetUploadTasksInFolder_Object = {\n    user_id: string;\n    username: string;\n};\nexport type GetUploadTasksInFolder_ConversionTask = {\n    asset_id: string;\n    source_file_id: string;\n    source_file_name: string;\n    conversion_pipeline: 'auto-detect' | 'volume' | 'scene' | 'texture' | 'animation' | 'point-cloud';\n    progress: number;\n    status: StrictUnion<'pending' | 'converting' | 'error' | 'success'> & string;\n};\n/**\n * Lists all upload tasks in a folder.\n */\nexport function getUploadTasksInFolder(\n    {\n        folder_id,\n        offset = 0,\n        limit = 10,\n    }: {\n        folder_id: string;\n        offset?: number;\n        limit?: number;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetUploadTasksInFolder_UploadTask>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '/upload-tasks',\n        params: {\n            offset: offset,\n            limit: limit,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetFolderAssets_Filters = {\n    asset_name?: string;\n    asset_type?:\n        | Array<\n              | 'action_map'\n              | 'algorithm'\n              | 'animation'\n              | 'animation_graph'\n              | 'animation_sequence'\n              | 'animation_set'\n              | 'collision_geometry'\n              | 'cubemap'\n              | 'event_map'\n              | 'material'\n              | 'mesh'\n              | 'module'\n              | 'point_cloud'\n              | 'render_graph'\n              | 'scene'\n              | 'script'\n              | 'shader'\n              | 'skeleton'\n              | 'sound'\n              | 'texture'\n              | 'texture_1d'\n              | 'texture_3d'\n              | 'volume_material'\n          >\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material';\n    source_file?: Array<string> | string | 'exclude';\n};\nexport type GetFolderAssets_AssetCount = {\n    total: number;\n    [asset_type: string]: number;\n};\nexport type GetFolderAssets__index_AssetList_AssetList = {\n    action_maps?: Array<GetFolderAssets_Object>;\n    algorithms?: Array<GetFolderAssets_Object>;\n    animation_graphs?: Array<GetFolderAssets_Object>;\n    animation_sequences?: Array<GetFolderAssets_Object>;\n    animation_sets?: Array<GetFolderAssets_Object>;\n    animations?: Array<GetFolderAssets_Object>;\n    collision_geometries?: Array<GetFolderAssets_Object>;\n    cubemaps?: Array<GetFolderAssets_Object>;\n    event_maps?: Array<GetFolderAssets_Object>;\n    materials?: Array<GetFolderAssets_Object>;\n    meshes?: Array<GetFolderAssets_Object>;\n    modules?: Array<GetFolderAssets_Object>;\n    point_clouds?: Array<GetFolderAssets_Object>;\n    render_graphs?: Array<GetFolderAssets_Object>;\n    scenes?: Array<GetFolderAssets_Object>;\n    scripts?: Array<GetFolderAssets_Object>;\n    shaders?: Array<GetFolderAssets_Object>;\n    skeletons?: Array<GetFolderAssets_Object>;\n    sounds?: Array<GetFolderAssets_Object>;\n    textures?: Array<GetFolderAssets_Object>;\n    textures_1d?: Array<GetFolderAssets_Object>;\n    textures_3d?: Array<GetFolderAssets_Object>;\n    volume_materials?: Array<GetFolderAssets_Object>;\n};\nexport type GetFolderAssets_Object = {\n    asset_id: string;\n    name: string;\n};\n/**\n * Lists assets.\n */\nexport function getFolderAssets(\n    {\n        folder_id,\n        offset = 0,\n        limit = 10,\n        filter,\n        recursive = false,\n    }: {\n        folder_id: string;\n        offset?: number;\n        limit?: number;\n        filter?: GetFolderAssets_Filters;\n        recursive?: boolean;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetFolderAssets__index_AssetList_AssetList> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '/assets',\n        params: {\n            offset: offset,\n            limit: limit,\n            filter: filter,\n            recursive: recursive,\n        },\n        headers: headers,\n    }).then(response => {\n        response.headers['x-assets-count'] = JSON.parse(\n            response.headers['x-assets-count'],\n        ) as GetFolderAssets_AssetCount;\n        return response;\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateAsset_NewAsset = {\n    asset_type:\n        | 'action_map'\n        | 'algorithm'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'module'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'volume_material';\n    name: string;\n};\nexport type CreateAsset_AssetDuplication = {\n    asset_type:\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material';\n    copy_from_asset_id: string;\n    new_asset_name?: string;\n    options?: CreateAsset_DuplicationOptions;\n};\nexport type CreateAsset_DuplicationOptions = {\n    asset_types?: Array<\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material'\n    >;\n    max_depth?: number;\n};\nexport type CreateAsset_AssetDuplicationResult = {\n    asset_id: string;\n    name: string;\n    source_to_copy_asset_id_map?: CreateAsset_SourceToCopyAssetIdMap;\n};\nexport type CreateAsset_SourceToCopyAssetIdMap = {\n    [source_asset_id: string]: string;\n};\n/**\n * Creates a new asset.\n */\nexport function createAsset(\n    {\n        folder_id,\n        asset_creation_options,\n    }: {\n        folder_id: string;\n        asset_creation_options: StrictUnion<CreateAsset_NewAsset | CreateAsset_AssetDuplication>;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateAsset_AssetDuplicationResult> {\n    return axiosInstance({\n        method: 'post',\n        url: '/folders/' + folder_id + '/assets',\n        data: asset_creation_options,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Move assets inside the specified folder.\n */\nexport function moveAssets(\n    {\n        folder_id,\n        asset_ids,\n    }: {\n        folder_id: string;\n        asset_ids: Array<string>;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'put',\n        url: '/folders/' + folder_id + '/assets',\n        data: asset_ids,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateMaterial_Object = {\n    asset_id: string;\n};\n/**\n * Creates a material.\n */\nexport function createMaterial(\n    {\n        folder_id,\n        dataJson,\n        isDoubleSided,\n        name,\n        shaderRef,\n    }: {\n        folder_id: string;\n        dataJson: object;\n        isDoubleSided: boolean;\n        name: string;\n        shaderRef: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateMaterial_Object> {\n    return axiosInstance({\n        method: 'post',\n        url: '/folders/' + folder_id + '/assets/materials',\n        data: {\n            dataJson: dataJson,\n            isDoubleSided: isDoubleSided,\n            name: name,\n            shaderRef: shaderRef,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateCubemap_Object = {\n    asset_id: string;\n};\n/**\n * Creates a cubemap.\n */\nexport function createCubemap(\n    {\n        folder_id,\n        faces,\n        name,\n    }: {\n        folder_id: string;\n        faces: Array<string>;\n        name: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateCubemap_Object> {\n    return axiosInstance({\n        method: 'post',\n        url: '/folders/' + folder_id + '/assets/cubemaps',\n        data: {\n            faces: faces,\n            name: name,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type ImportAssets__index_ImportAssetsResponse_ImportAssetsResponse = {\n    asset_ids: ImportAssets_AssetIds;\n    skipped_files?: Array<string>;\n};\nexport type ImportAssets_AssetIds = {\n    imported: Array<string>;\n    overwritten: Array<string>;\n    skipped: Array<string>;\n};\n/**\n * Imports or replaces multiple assets submitted as a package.\n * The package must be a zip archive containing the assets to import.\n * The package should contain the assets themselves at the root level of the archive with their descriptions in JSON format, and their payloads (e.g. textures, meshes, etc.)\n * and contain all the assets' dependencies if they do not already exist.\n * Supported assets are :\n *   - scene\n *   - mesh\n *   - material\n *   - animation\n *   - animation_set\n *   - animation_graph\n *   - skeleton\n *   - texture_1d\n *   - texture\n *   - texture_3d\n *   - collision_geometry\n *   - cubemap\n *   - volume_material\n *   - event_map\n *   - action_map\n *   - sound\n *   - point_cloud\n * The packaged assets' files should be named according to the following pattern:\n * ``` json\n * - desc.[asset_type].{uuid}\n * - payload.[mesh|texture|animation|skeleton|texture_1d|texture_3d|collision_geometry|sound].{uuid}\n * - payload.[texture_1d|texture|texture_3d].mips[0-16].{uuid}\n * - payload.point_cloud.[position|color].{uuid}\n * - payload.texture_3d.histogram.{uuid}\n * ```\n * The package may also contain an overwrite.json file that describes which assets to overwrite.\n * The overwrite.json file is only used if the overwrite query parameter is set to only-specified.\n */\nexport function importAssets(\n    {\n        folder_id,\n        overwrite = 'never',\n        body,\n    }: {\n        folder_id: string;\n        overwrite?: StrictUnion<'never' | 'only-specified' | 'always'>;\n        body: ArrayBuffer | ReadableStream;\n    },\n    onUploadProgress?: (progressEvent: AxiosProgressEvent) => void,\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<ImportAssets__index_ImportAssetsResponse_ImportAssetsResponse> {\n    return axiosInstance({\n        method: 'put',\n        url: '/folders/' + folder_id + '/packages',\n        params: {\n            overwrite: overwrite,\n        },\n        data: body,\n        maxRedirects: 0,\n        onUploadProgress: onUploadProgress,\n        headers: {\n            'Content-Type': 'application/zip',\n            ...headers,\n        },\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSessionsInFolder_Session = {\n    session_id: string;\n    scene_id: string;\n    scene_name: string;\n    folder_id: string;\n    max_users: number;\n    creator_user_id: string;\n    created_at: string;\n    country_code: string;\n    continent_code: string;\n    is_transient_session: boolean;\n    clients: Array<GetSessionsInFolder_Client_UserInfo>;\n};\nexport type GetSessionsInFolder_Client_UserInfo = {\n    client_id?: string;\n    client_type?: StrictUnion<'user' | 'guest'>;\n    user_id: string;\n    username: string;\n};\n/**\n * Lists all sessions running on scenes contained in a specified folder.\n */\nexport function getSessionsInFolder(\n    {\n        folder_id,\n    }: {\n        folder_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetSessionsInFolder_Session>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/folders/' + folder_id + '/sessions',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type ListSourceFiles_Filters = {\n    source_file_name?: string;\n};\nexport type ListSourceFiles_SourceFile = {\n    source_file_id: string;\n    source_file_original_name: string;\n    name: string;\n    size: number;\n};\n/**\n * List source files.\n */\nexport function listSourceFiles(\n    {\n        offset = 0,\n        limit = 10,\n        filters,\n    }: {\n        offset?: number;\n        limit?: number;\n        filters?: ListSourceFiles_Filters;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<ListSourceFiles_SourceFile>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/source-files',\n        params: {\n            offset: offset,\n            limit: limit,\n            filters: filters,\n        },\n        headers: headers,\n    }).then(response => {\n        response.headers['x-source-files-count'] = JSON.parse(response.headers['x-source-files-count']) as number;\n        return response;\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Deletes the target source files. Deleting a source file is permanent.\n */\nexport function deleteSourceFiles(\n    {\n        source_file_ids,\n        delete_assets = false,\n    }: {\n        source_file_ids: Array<string>;\n        delete_assets?: boolean;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/source-files',\n        data: {\n            source_file_ids: source_file_ids,\n            delete_assets: delete_assets,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Downloads the target source file.\n */\nexport function downloadSourceFile<T extends 'arraybuffer' | 'stream' | 'json' | 'text' = 'arraybuffer'>(\n    {\n        source_file_id,\n    }: {\n        source_file_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n    responseType?: T,\n): AxiosPromise<\n    T extends 'arraybuffer'\n        ? ArrayBuffer\n        : T extends 'json'\n          ? object\n          : T extends 'text'\n            ? string\n            : T extends 'stream'\n              ? ReadableStream\n              : never\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/source-files/' + source_file_id + '',\n        headers: headers,\n        responseType: responseType || 'arraybuffer',\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSourceFileDetails_SourceFile = {\n    source_file_id: string;\n    source_file_original_name: string;\n    name: string;\n    size: number;\n};\n/**\n * Get source file details.\n */\nexport function getSourceFileDetails(\n    {\n        source_file_id,\n    }: {\n        source_file_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetSourceFileDetails_SourceFile> {\n    return axiosInstance({\n        method: 'get',\n        url: '/source-files/' + source_file_id + '/details',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Updates details for a specific source file.\n */\nexport function updateSourceFileDetails(\n    {\n        source_file_id,\n        name,\n    }: {\n        source_file_id: string;\n        name: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'patch',\n        url: '/source-files/' + source_file_id + '/details',\n        data: {\n            name: name,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSourceFileAssets__index_AssetList_AssetList = {\n    action_maps?: Array<GetSourceFileAssets_Object>;\n    algorithms?: Array<GetSourceFileAssets_Object>;\n    animation_graphs?: Array<GetSourceFileAssets_Object>;\n    animation_sequences?: Array<GetSourceFileAssets_Object>;\n    animation_sets?: Array<GetSourceFileAssets_Object>;\n    animations?: Array<GetSourceFileAssets_Object>;\n    collision_geometries?: Array<GetSourceFileAssets_Object>;\n    cubemaps?: Array<GetSourceFileAssets_Object>;\n    event_maps?: Array<GetSourceFileAssets_Object>;\n    materials?: Array<GetSourceFileAssets_Object>;\n    meshes?: Array<GetSourceFileAssets_Object>;\n    modules?: Array<GetSourceFileAssets_Object>;\n    point_clouds?: Array<GetSourceFileAssets_Object>;\n    render_graphs?: Array<GetSourceFileAssets_Object>;\n    scenes?: Array<GetSourceFileAssets_Object>;\n    scripts?: Array<GetSourceFileAssets_Object>;\n    shaders?: Array<GetSourceFileAssets_Object>;\n    skeletons?: Array<GetSourceFileAssets_Object>;\n    sounds?: Array<GetSourceFileAssets_Object>;\n    textures?: Array<GetSourceFileAssets_Object>;\n    textures_1d?: Array<GetSourceFileAssets_Object>;\n    textures_3d?: Array<GetSourceFileAssets_Object>;\n    volume_materials?: Array<GetSourceFileAssets_Object>;\n};\nexport type GetSourceFileAssets_Object = {\n    asset_id: string;\n    name: string;\n};\n/**\n * Lists all assets generated from the requested source file.\n */\nexport function getSourceFileAssets(\n    {\n        source_file_id,\n    }: {\n        source_file_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetSourceFileAssets__index_AssetList_AssetList> {\n    return axiosInstance({\n        method: 'get',\n        url: '/source-files/' + source_file_id + '/assets',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Lists all upload tasks. These upload tasks relate to uploaded source files.\n */\nexport function getUploadTasks(\n    {\n        offset = 0,\n        limit = 10,\n    }: {\n        offset?: number;\n        limit?: number;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<any> {\n    return axiosInstance({\n        method: 'get',\n        url: '/upload-tasks',\n        params: {\n            offset: offset,\n            limit: limit,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetUploadTask_UploadTask = {\n    upload_task_id: string;\n    folder_id: string;\n    uploaded_at: string;\n    uploaded_by: GetUploadTask_Object;\n    progress: number;\n    download_progress?: number;\n    status: StrictUnion<'waiting' | 'downloading' | 'pending' | 'converting' | 'error' | 'success' | 'rejected'> &\n        string;\n    conversion_tasks: Array<GetUploadTask_ConversionTask>;\n};\nexport type GetUploadTask_Object = {\n    user_id: string;\n    username: string;\n};\nexport type GetUploadTask_ConversionTask = {\n    asset_id: string;\n    source_file_id: string;\n    source_file_name: string;\n    conversion_pipeline: 'auto-detect' | 'volume' | 'scene' | 'texture' | 'animation' | 'point-cloud';\n    progress: number;\n    status: StrictUnion<'pending' | 'converting' | 'error' | 'success'> & string;\n};\n/**\n * Gets information related to an upload task. This upload task relates to uploaded source files.\n */\nexport function getUploadTask(\n    {\n        upload_task_id,\n    }: {\n        upload_task_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetUploadTask_UploadTask> {\n    return axiosInstance({\n        method: 'get',\n        url: '/upload-tasks/' + upload_task_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets metadata related to a conversion task. This metadata is produced by the conversion task.\n */\nexport function getConversionTaskMetadata<T extends 'arraybuffer' | 'stream' | 'json' | 'text' = 'arraybuffer'>(\n    {\n        conversion_task_id,\n        filename,\n    }: {\n        conversion_task_id: string;\n        filename: string;\n    },\n    headers?: AxiosRequestHeaders,\n    responseType?: T,\n): AxiosPromise<\n    T extends 'arraybuffer'\n        ? ArrayBuffer\n        : T extends 'json'\n          ? object\n          : T extends 'text'\n            ? string\n            : T extends 'stream'\n              ? ReadableStream\n              : never\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/conversion_tasks/' + conversion_task_id + '/metadata/' + filename + '',\n        headers: headers,\n        responseType: responseType || 'arraybuffer',\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type ListAssets_Filter = {\n    asset_type?:\n        | Array<\n              | 'action_map'\n              | 'algorithm'\n              | 'animation'\n              | 'animation_graph'\n              | 'animation_sequence'\n              | 'animation_set'\n              | 'collision_geometry'\n              | 'cubemap'\n              | 'event_map'\n              | 'material'\n              | 'mesh'\n              | 'module'\n              | 'point_cloud'\n              | 'render_graph'\n              | 'scene'\n              | 'script'\n              | 'shader'\n              | 'skeleton'\n              | 'sound'\n              | 'texture'\n              | 'texture_1d'\n              | 'texture_3d'\n              | 'volume_material'\n          >\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material';\n    asset_name?: string;\n    include_public_assets?: boolean;\n};\nexport type ListAssets__index_AssetList_AssetList = {\n    action_maps?: Array<ListAssets_Object>;\n    algorithms?: Array<ListAssets_Object>;\n    animation_graphs?: Array<ListAssets_Object>;\n    animation_sequences?: Array<ListAssets_Object>;\n    animation_sets?: Array<ListAssets_Object>;\n    animations?: Array<ListAssets_Object>;\n    collision_geometries?: Array<ListAssets_Object>;\n    cubemaps?: Array<ListAssets_Object>;\n    event_maps?: Array<ListAssets_Object>;\n    materials?: Array<ListAssets_Object>;\n    meshes?: Array<ListAssets_Object>;\n    modules?: Array<ListAssets_Object>;\n    point_clouds?: Array<ListAssets_Object>;\n    render_graphs?: Array<ListAssets_Object>;\n    scenes?: Array<ListAssets_Object>;\n    scripts?: Array<ListAssets_Object>;\n    shaders?: Array<ListAssets_Object>;\n    skeletons?: Array<ListAssets_Object>;\n    sounds?: Array<ListAssets_Object>;\n    textures?: Array<ListAssets_Object>;\n    textures_1d?: Array<ListAssets_Object>;\n    textures_3d?: Array<ListAssets_Object>;\n    volume_materials?: Array<ListAssets_Object>;\n};\nexport type ListAssets_Object = {\n    asset_id: string;\n    name: string;\n};\n/**\n * Returns a list of all assets.\n */\nexport function listAssets(\n    {\n        offset = 0,\n        limit = 10,\n        filter,\n    }: {\n        offset?: number;\n        limit?: number;\n        filter?: ListAssets_Filter;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<ListAssets__index_AssetList_AssetList> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets',\n        params: {\n            offset: offset,\n            limit: limit,\n            filter: filter,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Batch delete assets. You **MUST NOT** reference assets.\n */\nexport function deleteAssets(\n    {\n        asset_ids,\n    }: {\n        asset_ids: Array<string>;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/assets',\n        data: asset_ids,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Deletes the asset.\n */\nexport function deleteAsset(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/assets/' + asset_container + '/' + asset_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetAssetSourceFile_SourceFile = {\n    source_file_id: string;\n    source_file_original_name: string;\n    name: string;\n    size: number;\n};\n/**\n * Gets the source file of the specified asset.\n */\nexport function getAssetSourceFile(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetAssetSourceFile_SourceFile> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/source-file',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetAssetDetails__index_AssetDetails_AssetDetails = {\n    asset_id: string;\n    contributors?: Array<GetAssetDetails_Contributor>;\n    created_at?: string;\n    created_by?: GetAssetDetails_Object;\n    last_edited_at?: string;\n    last_edited_by?: GetAssetDetails_LastEditedBy;\n    name: string;\n    type:\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material';\n};\nexport type GetAssetDetails_Contributor = {\n    contribution_count: number;\n    user: GetAssetDetails_Object;\n};\nexport type GetAssetDetails_Object = {\n    registered_at: string;\n    user_id: string;\n    username: string;\n};\nexport type GetAssetDetails_LastEditedBy = {\n    registered_at: string;\n    user_id: string;\n    username: string;\n};\n/**\n * Gets the asset details from the specified asset.\n */\nexport function getAssetDetails(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetAssetDetails__index_AssetDetails_AssetDetails> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/details',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetAssetFolder_Folder = {\n    folder_id: string;\n    parent_folder_id?: string;\n    name: string;\n    created_at?: string;\n    created_by?: GetAssetFolder_Object;\n    subfolders?: Array<GetAssetFolder_Folder>;\n    source_file_count?: number;\n    asset_count?: number;\n};\nexport type GetAssetFolder_Object = {\n    user_id: string;\n    username: string;\n    registered_at: string;\n};\n/**\n * Gets the asset folder from the specified asset.\n */\nexport function getAssetFolder(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetAssetFolder_Folder> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/folder',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetAssetDependencies_Filter = {\n    with_asset_types?: Array<\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material'\n    >;\n    without_asset_types?: Array<\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material'\n    >;\n    public?: StrictUnion<'include' | 'exclude' | 'restrict-to'>;\n};\nexport type GetAssetDependencies_Asset = {\n    asset_id: string;\n    asset_type:\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material';\n    properties?: GetAssetDependencies_Object;\n};\nexport type GetAssetDependencies_Object = {\n    name?: string;\n    direct_count?: number;\n    indirect_count?: number;\n    is_public?: boolean;\n    is_accessible?: boolean;\n    payload_info?: GetAssetDependencies_PayloadInfo;\n    dependencies?: Array<GetAssetDependencies_Dependency>;\n};\nexport type GetAssetDependencies_PayloadInfo = {\n    hash?: string;\n    storage_id?: number;\n};\nexport type GetAssetDependencies_Dependency = {\n    asset_id: string;\n    count: number;\n};\n/**\n * Gets the asset dependencies from the specified asset.\n */\nexport function getAssetDependencies(\n    {\n        asset_container,\n        asset_id,\n        offset = 0,\n        limit = 10,\n        depth = 'all',\n        filters,\n        properties,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n        offset?: number;\n        limit?: number;\n        depth?: 'all' | 'direct' | number;\n        filters?: GetAssetDependencies_Filter;\n        properties?: Array<StrictUnion<'name' | 'dependencies' | 'count' | 'public' | 'accessible' | 'payload_info'>>;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetAssetDependencies_Asset>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/dependencies',\n        params: {\n            offset: offset,\n            limit: limit,\n            depth: depth,\n            filters: filters,\n            properties: properties,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetAssetReferences_Asset = {\n    asset_id: string;\n    asset_type:\n        | 'action_map'\n        | 'algorithm'\n        | 'animation'\n        | 'animation_graph'\n        | 'animation_sequence'\n        | 'animation_set'\n        | 'collision_geometry'\n        | 'cubemap'\n        | 'event_map'\n        | 'material'\n        | 'mesh'\n        | 'module'\n        | 'point_cloud'\n        | 'render_graph'\n        | 'scene'\n        | 'script'\n        | 'shader'\n        | 'skeleton'\n        | 'sound'\n        | 'texture'\n        | 'texture_1d'\n        | 'texture_3d'\n        | 'volume_material';\n    properties?: GetAssetReferences_Object;\n};\nexport type GetAssetReferences_Object = {\n    name?: string;\n    direct_count?: number;\n    is_public?: boolean;\n};\n/**\n * Gets the asset references from the specified asset.\n */\nexport function getAssetReferences(\n    {\n        asset_container,\n        asset_id,\n        offset = 0,\n        limit = 10,\n        properties,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n        offset?: number;\n        limit?: number;\n        properties?: Array<StrictUnion<'name' | 'count' | 'public'>>;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetAssetReferences_Asset>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/references',\n        params: {\n            offset: offset,\n            limit: limit,\n            properties: properties,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetAssetDescription_ActionMap = {\n    actions: GetAssetDescription_Object;\n    name: string;\n    uuid: string;\n};\nexport type GetAssetDescription_Object = {\n    [action_name: string]: object;\n};\nexport type GetAssetDescription_Algorithm = {\n    inputDescriptor: Array<object>;\n    name: string;\n    outputDescriptor: Array<object>;\n    uuid: string;\n};\nexport type GetAssetDescription_Animation = {\n    animationEventTrack: GetAssetDescription_Object;\n    durationInMs: number;\n    name: string;\n    payloadSize: number;\n    skeletonRef?: string;\n    uuid: string;\n};\nexport type GetAssetDescription_AnimationGraph = {\n    inputDescriptor: Array<object>;\n    name: string;\n    stateMachines: Array<GetAssetDescription_Object>;\n    uuid: string;\n};\nexport type GetAssetDescription_AnimationSequence = {\n    durationInMs: number;\n    name: string;\n    uuid: string;\n};\nexport type GetAssetDescription_AnimationSet = {\n    animationGraphUUID: string;\n    animationSet: Array<GetAssetDescription_Object>;\n    boneMaskSet?: Array<GetAssetDescription_Object>;\n    name: string;\n    uuid: string;\n};\nexport type GetAssetDescription_CollisionGeometry = {\n    geometryType: StrictUnion<0 | 1>;\n    name: string;\n    payloadSize: number;\n    uuid: string;\n};\nexport type GetAssetDescription_Cubemap = {\n    faces: Array<string>;\n    name: string;\n    uuid: string;\n};\nexport type GetAssetDescription_EventMap = {\n    events: GetAssetDescription_Object;\n    name: string;\n    uuid: string;\n};\nexport type GetAssetDescription_Material = {\n    dataJson: object;\n    isDoubleSided: boolean;\n    name: string;\n    shaderRef: string;\n    uuid: string;\n};\nexport type GetAssetDescription_Mesh = {\n    name: string;\n    payloadSize: number;\n    submeshes: Array<GetAssetDescription_Submesh>;\n    uuid: string;\n};\nexport type GetAssetDescription_Submesh = {\n    aabb: GetAssetDescription_BoundingBox;\n    channels: Array<GetAssetDescription_Channel>;\n    indexCount: number;\n    vertexCount: number;\n};\nexport type GetAssetDescription_BoundingBox = {\n    max: Array<number>;\n    min: Array<number>;\n};\nexport type GetAssetDescription_Channel = {\n    dataOffset: number;\n    dataSize: number;\n    elementCount: number;\n    elementSize: number;\n    elementType: StrictUnion<0 | 1 | 2> & number;\n    semantic: StrictUnion<'index' | 'position' | 'normal' | 'uv' | 'color' | 'bone_id' | 'weight'>;\n};\nexport type GetAssetDescription_Module = {\n    functions: GetAssetDescription_Object;\n    name: string;\n    uuid: string;\n};\nexport type GetAssetDescription_PointCloud = {\n    format: StrictUnion<0 | 1 | 2>;\n    name: string;\n    payloadTotalSize: number;\n    pointCount: number;\n    scale?: Array<number>;\n    translation?: Array<number>;\n    uuid: string;\n};\nexport type GetAssetDescription_RenderGraph = {\n    blendStates: Array<GetAssetDescription_Object>;\n    defaultRenderTargetIndex?: number;\n    graphOrder: Array<Array<number>>;\n    inputDescriptor: Array<GetAssetDescription_Object>;\n    name: string;\n    nodeDataDescriptions: Array<GetAssetDescription_Object>;\n    occlusionInputDepthRenderTargetIndex?: number;\n    renderPassDescriptions: Array<GetAssetDescription_Object>;\n    renderTargetDescriptions: Array<GetAssetDescription_Object>;\n    stencilStates: Array<GetAssetDescription_Object>;\n    uuid: string;\n};\nexport type GetAssetDescription_Scene = {\n    aabb: GetAssetDescription_Aabb;\n    entities: Array<object>;\n    name: string;\n    settings?: object;\n    triangleCount?: number;\n    uuid: string;\n};\nexport type GetAssetDescription_Aabb = {\n    max: Array<number>;\n    min: Array<number>;\n};\nexport type GetAssetDescription_Script = {\n    eventNames: Array<string>;\n    inputDescriptor?: Array<GetAssetDescription_Object>;\n    name: string;\n    subScripts?: Array<string>;\n    uuid: string;\n};\nexport type GetAssetDescription_Shader = {\n    blendMode?: StrictUnion<0 | 1 | 2 | 3>;\n    localGroupCount?: Array<number>;\n    materialDescriptor?: Array<GetAssetDescription_Object>;\n    moduleDescriptions?: Array<GetAssetDescription_Object>;\n    name: string;\n    nodeDataDescriptor?: Array<GetAssetDescription_Object>;\n    optGlobalGroupMultiplier?: Array<number>;\n    optGlobalGroupReference?: StrictUnion<0 | 1 | 2 | 3 | 4>;\n    payloadSize: number;\n    shaderStages?: number;\n    uuid: string;\n    vertexDescriptor?: Array<GetAssetDescription_Object>;\n};\nexport type GetAssetDescription_Skeleton = {\n    bones: Array<GetAssetDescription_Object>;\n    name: string;\n    payloadSize: number;\n    uuid: string;\n};\nexport type GetAssetDescription_Sound = {\n    bitDepth: number;\n    channelCount: number;\n    durationInMs: number;\n    name: string;\n    payloadSize: number;\n    sampleCount: number;\n    sampleFrequencyInHz: number;\n    uuid: string;\n};\nexport type GetAssetDescription_Texture = {\n    format: StrictUnion<0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14> & any;\n    mips: Array<GetAssetDescription_Object>;\n    name: string;\n    payloadTotalSize: number;\n    uuid: string;\n};\nexport type GetAssetDescription_Texture_1D = {\n    format: StrictUnion<0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14> & any;\n    mips: Array<GetAssetDescription_Object>;\n    name: string;\n    payloadTotalSize: number;\n    uuid: string;\n};\nexport type GetAssetDescription_Texture_3D = {\n    format: StrictUnion<0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14> & any;\n    mips: Array<GetAssetDescription_Object>;\n    name: string;\n    payloadTotalSize: number;\n    uuid: string;\n    voxelDimensions?: Array<number>;\n};\nexport type GetAssetDescription_VolumeMaterial = {\n    albedoLUT?: Array<GetAssetDescription_Object>;\n    metallicLUT?: Array<GetAssetDescription_Object>;\n    name: string;\n    opacityLUT?: Array<GetAssetDescription_Object>;\n    rangeMax: number;\n    rangeMin: number;\n    roughnessLUT?: Array<GetAssetDescription_Object>;\n    uuid: string;\n};\n/**\n * Gets the asset description from the specified asset.\n */\nexport function getAssetDescription(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<\n    StrictUnion<\n        | GetAssetDescription_ActionMap\n        | GetAssetDescription_Algorithm\n        | GetAssetDescription_Animation\n        | GetAssetDescription_AnimationGraph\n        | GetAssetDescription_AnimationSequence\n        | GetAssetDescription_AnimationSet\n        | GetAssetDescription_CollisionGeometry\n        | GetAssetDescription_Cubemap\n        | GetAssetDescription_EventMap\n        | GetAssetDescription_Material\n        | GetAssetDescription_Mesh\n        | GetAssetDescription_Module\n        | GetAssetDescription_PointCloud\n        | GetAssetDescription_RenderGraph\n        | GetAssetDescription_Scene\n        | GetAssetDescription_Script\n        | GetAssetDescription_Shader\n        | GetAssetDescription_Skeleton\n        | GetAssetDescription_Sound\n        | GetAssetDescription_Texture\n        | GetAssetDescription_Texture_1D\n        | GetAssetDescription_Texture_3D\n        | GetAssetDescription_VolumeMaterial\n    >\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/description',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Updates asset description. Supports only updating name.\n */\nexport function renameAsset(\n    {\n        asset_container,\n        asset_id,\n        name,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n        name?: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'patch',\n        url: '/assets/' + asset_container + '/' + asset_id + '/description',\n        data: {\n            name: name,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets the asset payload from the specified asset.\n */\nexport function getAssetPayload<T extends 'arraybuffer' | 'stream' | 'json' | 'text' = 'arraybuffer'>(\n    {\n        asset_container_with_payload,\n        asset_id,\n        sub_resource,\n    }: {\n        asset_container_with_payload:\n            | 'animations'\n            | 'animation_sequences'\n            | 'collision_geometries'\n            | 'meshes'\n            | 'point_clouds'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d';\n        asset_id: string;\n        sub_resource?: StrictUnion<string | 'histogram' | 'position' | 'color'>;\n    },\n    headers?: AxiosRequestHeaders,\n    responseType?: T,\n): AxiosPromise<\n    T extends 'arraybuffer'\n        ? ArrayBuffer\n        : T extends 'json'\n          ? object\n          : T extends 'text'\n            ? string\n            : T extends 'stream'\n              ? ReadableStream\n              : never\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container_with_payload + '/' + asset_id + '/payload',\n        params: {\n            sub_resource: sub_resource,\n        },\n        headers: headers,\n        responseType: responseType || 'arraybuffer',\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets the asset history from the specified asset.\n */\nexport function getAssetHistory(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<object> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/history',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets the asset metadata from the specified asset.\n */\nexport function getAssetMeta(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<object> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/meta',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets the code of the specified asset.\n */\nexport function getAssetCode(\n    {\n        asset_container_with_code,\n        asset_id,\n    }: {\n        asset_container_with_code: 'algorithms' | 'animation_sequences' | 'modules' | 'scripts' | 'shaders';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<string> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container_with_code + '/' + asset_id + '/code',\n        headers: headers,\n        responseType: 'text',\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets the asset thumbnail from the specified asset.\n */\nexport function getAssetThumbnail<T extends 'arraybuffer' | 'stream' | 'json' | 'text' = 'arraybuffer'>(\n    {\n        asset_container,\n        asset_id,\n        size,\n        default_url,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n        size: 'large' | 'medium' | 'small' | 'tiny';\n        default_url?: string;\n    },\n    headers?: AxiosRequestHeaders,\n    responseType?: T,\n): AxiosPromise<\n    T extends 'arraybuffer'\n        ? ArrayBuffer\n        : T extends 'json'\n          ? object\n          : T extends 'text'\n            ? string\n            : T extends 'stream'\n              ? ReadableStream\n              : never\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/thumbnail',\n        params: {\n            size: size,\n            default_url: default_url,\n        },\n        headers: headers,\n        responseType: responseType || 'arraybuffer',\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Assigns a thumbnail to the specified asset.\n */\nexport function setAssetThumbnail(\n    {\n        asset_container,\n        asset_id,\n        body,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n        body: ArrayBuffer | ReadableStream;\n    },\n    contentType: 'image/jpg' | 'image/png',\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'put',\n        url: '/assets/' + asset_container + '/' + asset_id + '/thumbnail',\n        data: body,\n        maxRedirects: 0,\n        headers: {\n            'Content-Type': contentType,\n            ...headers,\n        },\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Gets the asset custom types from the specified asset recursively.\n */\nexport function getAssetCustomTypes(\n    {\n        asset_container_with_custom_types,\n        asset_id,\n    }: {\n        asset_container_with_custom_types: 'modules';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<object> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container_with_custom_types + '/' + asset_id + '/custom-types',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Packages and downloads the target asset.\n */\nexport function packageAsset<T extends 'arraybuffer' | 'stream' | 'json' | 'text' = 'arraybuffer'>(\n    {\n        asset_container,\n        asset_id,\n    }: {\n        asset_container:\n            | 'action_maps'\n            | 'algorithms'\n            | 'animations'\n            | 'animation_graphs'\n            | 'animation_sequences'\n            | 'animation_sets'\n            | 'collision_geometries'\n            | 'cubemaps'\n            | 'event_maps'\n            | 'materials'\n            | 'meshes'\n            | 'modules'\n            | 'point_clouds'\n            | 'render_graphs'\n            | 'scenes'\n            | 'scripts'\n            | 'shaders'\n            | 'skeletons'\n            | 'sounds'\n            | 'textures'\n            | 'textures_1d'\n            | 'textures_3d'\n            | 'volume_materials';\n        asset_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n    responseType?: T,\n): AxiosPromise<\n    T extends 'arraybuffer'\n        ? ArrayBuffer\n        : T extends 'json'\n          ? object\n          : T extends 'text'\n            ? string\n            : T extends 'stream'\n              ? ReadableStream\n              : never\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container + '/' + asset_id + '/package',\n        headers: headers,\n        responseType: responseType || 'arraybuffer',\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Downloads an asset payload in a given format. Only mesh is supported for the moment. This endpoint requires special export permission.\n */\nexport function exportAsset<T extends 'arraybuffer' | 'stream' | 'json' | 'text' = 'arraybuffer'>(\n    {\n        asset_container_exportable,\n        asset_id,\n        format,\n        scale = 1,\n        sub_mesh_index,\n    }: {\n        asset_container_exportable: 'meshes' | 'sounds';\n        asset_id: string;\n        format: 'obj' | 'stl';\n        scale?: number;\n        sub_mesh_index?: number;\n    },\n    headers?: AxiosRequestHeaders,\n    responseType?: T,\n): AxiosPromise<\n    T extends 'arraybuffer'\n        ? ArrayBuffer\n        : T extends 'json'\n          ? object\n          : T extends 'text'\n            ? string\n            : T extends 'stream'\n              ? ReadableStream\n              : never\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/' + asset_container_exportable + '/' + asset_id + '/exports/' + format + '',\n        params: {\n            scale: scale,\n            sub_mesh_index: sub_mesh_index,\n        },\n        headers: headers,\n        responseType: responseType || 'arraybuffer',\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSceneSessions_Session = {\n    session_id: string;\n    scene_id: string;\n    scene_name: string;\n    folder_id: string;\n    max_users: number;\n    creator_user_id: string;\n    created_at: string;\n    country_code: string;\n    continent_code: string;\n    is_transient_session: boolean;\n    clients: Array<GetSceneSessions_Client_UserInfo>;\n};\nexport type GetSceneSessions_Client_UserInfo = {\n    client_id?: string;\n    client_type?: StrictUnion<'user' | 'guest'>;\n    user_id: string;\n    username: string;\n};\n/**\n * Lists all sessions running a specified scene.\n */\nexport function getSceneSessions(\n    {\n        scene_id,\n    }: {\n        scene_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetSceneSessions_Session>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/scenes/' + scene_id + '/sessions',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSceneAabb_Object = {\n    max: Array<number>;\n    min: Array<number>;\n};\n/**\n * Get the axis aligned bounding box of the specified scene.\n */\nexport function getSceneAABB(\n    {\n        scene_id,\n    }: {\n        scene_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetSceneAabb_Object> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/scenes/' + scene_id + '/aabb',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateEntity_animation_controller = {\n    animation_controller: CreateEntity_AnimationController;\n};\nexport type CreateEntity_AnimationController = {\n    animationGraphRef: string;\n    animationSetRef: string;\n    dataJSON: object;\n    rootBoneEntityRef: CreateEntity_EntityReference;\n    rootMotionEnabled: boolean;\n};\nexport type CreateEntity_EntityReference = {\n    originalEUID: string;\n    linkage: Array<string>;\n};\nexport type CreateEntity_bone = {\n    bone: CreateEntity_Bone;\n};\nexport type CreateEntity_Bone = {\n    boneIndex: number;\n};\nexport type CreateEntity_box_geometry = {\n    box_geometry: CreateEntity_BoxGeometry;\n};\nexport type CreateEntity_BoxGeometry = {\n    dimension?: Array<number>;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type CreateEntity_camera = {\n    camera: CreateEntity_Camera;\n};\nexport type CreateEntity_Camera = {\n    renderGraphRef: string;\n    renderTargetIndex?: number;\n    dataJSON: object;\n};\nexport type CreateEntity_capsule_geometry = {\n    capsule_geometry: CreateEntity_CapsuleGeometry;\n};\nexport type CreateEntity_CapsuleGeometry = {\n    radius?: number;\n    height?: number;\n    axis?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type CreateEntity_character_controller = {\n    character_controller: CreateEntity_CharacterController;\n};\nexport type CreateEntity_CharacterController = {\n    stepOffset?: number;\n    slopeLimit?: number;\n    skinWidth?: number;\n    velocity?: Array<number>;\n};\nexport type CreateEntity_collision_geometry_ref = {\n    collision_geometry_ref: CreateEntity_CollisionGeometryRef;\n};\nexport type CreateEntity_CollisionGeometryRef = {\n    collisionGeometryRef: string;\n};\nexport type CreateEntity_cylinder_geometry = {\n    cylinder_geometry: CreateEntity_CylinderGeometry;\n};\nexport type CreateEntity_CylinderGeometry = {\n    radius?: number;\n    height?: number;\n    axis?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type CreateEntity_debug_name = {\n    debug_name: CreateEntity_Name;\n};\nexport type CreateEntity_Name = {\n    value: string;\n};\nexport type CreateEntity_decal_projector = {\n    decal_projector: CreateEntity_DecalProjector;\n};\nexport type CreateEntity_DecalProjector = {\n    zIndex?: number;\n};\nexport type CreateEntity_environment = {\n    environment: CreateEntity_Environment;\n};\nexport type CreateEntity_Environment = {\n    skyboxUUID: string;\n    radianceUUID: string;\n    irradianceUUID: string;\n};\nexport type CreateEntity_joint = {\n    joint: CreateEntity_Joint;\n};\nexport type CreateEntity_Joint = {\n    constrainee: CreateEntity_EntityReference;\n    constrainer: CreateEntity_EntityReference;\n    breakForce?: number;\n    breakTorque?: number;\n};\nexport type CreateEntity_lineage = {\n    lineage: CreateEntity_Lineage;\n};\nexport type CreateEntity_Lineage = {\n    parentUUID: string;\n    ordinal?: number;\n};\nexport type CreateEntity_local_aabb = {\n    local_aabb: CreateEntity_LocalAxisAlignedBoundingBox;\n};\nexport type CreateEntity_LocalAxisAlignedBoundingBox = {\n    min: Array<number>;\n    max: Array<number>;\n};\nexport type CreateEntity_local_transform = {\n    local_transform: CreateEntity_Transform;\n};\nexport type CreateEntity_Transform = {\n    position?: Array<number>;\n    orientation?: Array<number>;\n    scale?: Array<number>;\n    eulerOrientation?: Array<number>;\n    globalEulerOrientation?: Array<number>;\n};\nexport type CreateEntity_material = {\n    material: CreateEntity_Material;\n};\nexport type CreateEntity_Material = {\n    shaderRef: string;\n    transparencyMode: number;\n    isDoubleSided: boolean;\n    dataJSON: object;\n};\nexport type CreateEntity_material_ref = {\n    material_ref: CreateEntity_MaterialReference;\n};\nexport type CreateEntity_MaterialReference = {\n    value: string;\n    faceCulling?: number;\n};\nexport type CreateEntity_mesh_ref = {\n    mesh_ref: CreateEntity_MeshReference;\n};\nexport type CreateEntity_MeshReference = {\n    value: string;\n    submeshIndex?: number;\n};\nexport type CreateEntity_orthographic_lens = {\n    orthographic_lens: CreateEntity_OrthographicLens;\n};\nexport type CreateEntity_OrthographicLens = {\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    zNear?: number;\n    zFar?: number;\n};\nexport type CreateEntity_overrider = {\n    overrider: CreateEntity_Overrider;\n};\nexport type CreateEntity_Overrider = {\n    deleter?: boolean;\n    entityRef: CreateEntity_EntityReference;\n    componentsToDetach: Array<number>;\n};\nexport type CreateEntity_perspective_lens = {\n    perspective_lens: CreateEntity_PerspectiveLens;\n};\nexport type CreateEntity_PerspectiveLens = {\n    aspectRatio?: number;\n    fovy?: number;\n    nearPlane?: number;\n    farPlane?: number;\n};\nexport type CreateEntity_physics_material = {\n    physics_material: CreateEntity_PhysicsMaterial;\n};\nexport type CreateEntity_PhysicsMaterial = {\n    staticFriction?: number;\n    dynamicFriction?: number;\n    restitution?: number;\n    isTrigger?: boolean;\n};\nexport type CreateEntity_plane_geometry = {\n    plane_geometry: CreateEntity_PlaneGeometry;\n};\nexport type CreateEntity_PlaneGeometry = {\n    distance?: number;\n    normal?: Array<number>;\n};\nexport type CreateEntity_point_cloud_ref = {\n    point_cloud_ref: CreateEntity_PointCloudReference;\n};\nexport type CreateEntity_PointCloudReference = {\n    value: string;\n};\nexport type CreateEntity_point_light = {\n    point_light: CreateEntity_Light;\n};\nexport type CreateEntity_Light = {\n    color?: Array<number>;\n    intensity?: number;\n    range?: number;\n    isDirectional?: boolean;\n    isSun?: boolean;\n};\nexport type CreateEntity_reflection_probe = {\n    reflection_probe: CreateEntity_ReflectionProbe;\n};\nexport type CreateEntity_ReflectionProbe = {\n    offset?: Array<number>;\n    nearDist?: number;\n    farDist?: number;\n    quality?: number;\n};\nexport type CreateEntity_revolute_joint = {\n    revolute_joint: CreateEntity_RevoluteJoint;\n};\nexport type CreateEntity_RevoluteJoint = {\n    axis?: Array<number>;\n    anchor?: Array<number>;\n};\nexport type CreateEntity_rigid_body = {\n    rigid_body: CreateEntity_RigidBody;\n};\nexport type CreateEntity_RigidBody = {\n    mass?: number;\n    linearDamping?: number;\n    angularDamping?: number;\n    friction?: number;\n    rollingFriction?: number;\n    spinningFriction?: number;\n    restitution?: number;\n    linearSleepingThreshold?: number;\n    angularSleepingThreshold?: number;\n    isKinematic?: boolean;\n};\nexport type CreateEntity_scene_ref = {\n    scene_ref: CreateEntity_SceneReference;\n};\nexport type CreateEntity_SceneReference = {\n    value: string;\n    maxRecursionCount?: number;\n};\nexport type CreateEntity_script_element = {\n    script_element: CreateEntity_ScriptElement;\n};\nexport type CreateEntity_ScriptElement = {\n    scriptRef: string;\n    dataJSON: object;\n};\nexport type CreateEntity_script_map = {\n    script_map: CreateEntity_ScriptMap;\n};\nexport type CreateEntity_ScriptMap = {\n    elements: object;\n};\nexport type CreateEntity_shadow_caster = {\n    shadow_caster: CreateEntity_ShadowCaster;\n};\nexport type CreateEntity_ShadowCaster = {\n    bias?: number;\n    nearDist?: number;\n    farDist?: number;\n    quality?: number;\n    cascadeSplitLambda?: number;\n    cascadeMaxZ?: number;\n    accumulateShadowCascades?: boolean;\n};\nexport type CreateEntity_skeleton_ref = {\n    skeleton_ref: CreateEntity_SkeletonReference;\n};\nexport type CreateEntity_SkeletonReference = {\n    value: string;\n};\nexport type CreateEntity_sound_ref = {\n    sound_ref: CreateEntity_SoundReference;\n};\nexport type CreateEntity_SoundReference = {\n    value: string;\n    volume?: number;\n    pan?: number;\n    playSpeed?: number;\n    looping?: boolean;\n};\nexport type CreateEntity_sphere_geometry = {\n    sphere_geometry: CreateEntity_SphereGeometry;\n};\nexport type CreateEntity_SphereGeometry = {\n    radius?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type CreateEntity_spot_light = {\n    spot_light: CreateEntity_SpotLight;\n};\nexport type CreateEntity_SpotLight = {\n    cutoff?: number;\n    IESProfile: string;\n};\nexport type CreateEntity_stereoscopic_lens = {\n    stereoscopic_lens: CreateEntity_StereoscopicPerspectiveLens;\n};\nexport type CreateEntity_StereoscopicPerspectiveLens = {\n    angleLeft?: number;\n    angleRight?: number;\n    angleUp?: number;\n    angleDown?: number;\n    nearPlane?: number;\n    farPlane?: number;\n    aspectRatio?: number;\n};\nexport type CreateEntity_tags = {\n    tags: CreateEntity_Tags;\n};\nexport type CreateEntity_Tags = {\n    value: Array<string>;\n};\nexport type CreateEntity_volume_filter = {\n    volume_filter: CreateEntity_VolumeFilter;\n};\nexport type CreateEntity_VolumeFilter = {\n    range?: Array<number>;\n    applyGaussianFiltering?: boolean;\n    sampleUnfiltered?: boolean;\n    enableMPR?: boolean;\n    enable3D?: boolean;\n};\nexport type CreateEntity_volume_material_ref = {\n    volume_material_ref: CreateEntity_VolumeMaterialReference;\n};\nexport type CreateEntity_VolumeMaterialReference = {\n    value: string;\n};\nexport type CreateEntity_volume_ref = {\n    volume_ref: CreateEntity_VolumeReference;\n};\nexport type CreateEntity_VolumeReference = {\n    texture3dRef: string;\n};\nexport type CreateEntity_Object = {\n    entity_id: string;\n};\n/**\n * Create a new entity in a scene.\n */\nexport function createEntity(\n    {\n        scene_id,\n        entity_components,\n    }: {\n        scene_id: string;\n        entity_components:\n            | CreateEntity_animation_controller\n            | CreateEntity_bone\n            | CreateEntity_box_geometry\n            | CreateEntity_camera\n            | CreateEntity_capsule_geometry\n            | CreateEntity_character_controller\n            | CreateEntity_collision_geometry_ref\n            | CreateEntity_cylinder_geometry\n            | CreateEntity_debug_name\n            | CreateEntity_decal_projector\n            | CreateEntity_environment\n            | CreateEntity_joint\n            | CreateEntity_lineage\n            | CreateEntity_local_aabb\n            | CreateEntity_local_transform\n            | CreateEntity_material\n            | CreateEntity_material_ref\n            | CreateEntity_mesh_ref\n            | CreateEntity_orthographic_lens\n            | CreateEntity_overrider\n            | CreateEntity_perspective_lens\n            | CreateEntity_physics_material\n            | CreateEntity_plane_geometry\n            | CreateEntity_point_cloud_ref\n            | CreateEntity_point_light\n            | CreateEntity_reflection_probe\n            | CreateEntity_revolute_joint\n            | CreateEntity_rigid_body\n            | CreateEntity_scene_ref\n            | CreateEntity_script_element\n            | CreateEntity_script_map\n            | CreateEntity_shadow_caster\n            | CreateEntity_skeleton_ref\n            | CreateEntity_sound_ref\n            | CreateEntity_sphere_geometry\n            | CreateEntity_spot_light\n            | CreateEntity_stereoscopic_lens\n            | CreateEntity_tags\n            | CreateEntity_volume_filter\n            | CreateEntity_volume_material_ref\n            | CreateEntity_volume_ref;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateEntity_Object> {\n    return axiosInstance({\n        method: 'post',\n        url: '/assets/scenes/' + scene_id + '/entities',\n        data: entity_components,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetEntity_animation_controller = {\n    animation_controller: GetEntity_AnimationController;\n};\nexport type GetEntity_AnimationController = {\n    animationGraphRef: string;\n    animationSetRef: string;\n    dataJSON: object;\n    rootBoneEntityRef: GetEntity_EntityReference;\n    rootMotionEnabled: boolean;\n};\nexport type GetEntity_EntityReference = {\n    originalEUID: string;\n    linkage: Array<string>;\n};\nexport type GetEntity_bone = {\n    bone: GetEntity_Bone;\n};\nexport type GetEntity_Bone = {\n    boneIndex: number;\n};\nexport type GetEntity_box_geometry = {\n    box_geometry: GetEntity_BoxGeometry;\n};\nexport type GetEntity_BoxGeometry = {\n    dimension?: Array<number>;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type GetEntity_camera = {\n    camera: GetEntity_Camera;\n};\nexport type GetEntity_Camera = {\n    renderGraphRef: string;\n    renderTargetIndex?: number;\n    dataJSON: object;\n};\nexport type GetEntity_capsule_geometry = {\n    capsule_geometry: GetEntity_CapsuleGeometry;\n};\nexport type GetEntity_CapsuleGeometry = {\n    radius?: number;\n    height?: number;\n    axis?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type GetEntity_character_controller = {\n    character_controller: GetEntity_CharacterController;\n};\nexport type GetEntity_CharacterController = {\n    stepOffset?: number;\n    slopeLimit?: number;\n    skinWidth?: number;\n    velocity?: Array<number>;\n};\nexport type GetEntity_collision_geometry_ref = {\n    collision_geometry_ref: GetEntity_CollisionGeometryRef;\n};\nexport type GetEntity_CollisionGeometryRef = {\n    collisionGeometryRef: string;\n};\nexport type GetEntity_cylinder_geometry = {\n    cylinder_geometry: GetEntity_CylinderGeometry;\n};\nexport type GetEntity_CylinderGeometry = {\n    radius?: number;\n    height?: number;\n    axis?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type GetEntity_debug_name = {\n    debug_name: GetEntity_Name;\n};\nexport type GetEntity_Name = {\n    value: string;\n};\nexport type GetEntity_decal_projector = {\n    decal_projector: GetEntity_DecalProjector;\n};\nexport type GetEntity_DecalProjector = {\n    zIndex?: number;\n};\nexport type GetEntity_environment = {\n    environment: GetEntity_Environment;\n};\nexport type GetEntity_Environment = {\n    skyboxUUID: string;\n    radianceUUID: string;\n    irradianceUUID: string;\n};\nexport type GetEntity_joint = {\n    joint: GetEntity_Joint;\n};\nexport type GetEntity_Joint = {\n    constrainee: GetEntity_EntityReference;\n    constrainer: GetEntity_EntityReference;\n    breakForce?: number;\n    breakTorque?: number;\n};\nexport type GetEntity_lineage = {\n    lineage: GetEntity_Lineage;\n};\nexport type GetEntity_Lineage = {\n    parentUUID: string;\n    ordinal?: number;\n};\nexport type GetEntity_local_aabb = {\n    local_aabb: GetEntity_LocalAxisAlignedBoundingBox;\n};\nexport type GetEntity_LocalAxisAlignedBoundingBox = {\n    min: Array<number>;\n    max: Array<number>;\n};\nexport type GetEntity_local_transform = {\n    local_transform: GetEntity_Transform;\n};\nexport type GetEntity_Transform = {\n    position?: Array<number>;\n    orientation?: Array<number>;\n    scale?: Array<number>;\n    eulerOrientation?: Array<number>;\n    globalEulerOrientation?: Array<number>;\n};\nexport type GetEntity_material = {\n    material: GetEntity_Material;\n};\nexport type GetEntity_Material = {\n    shaderRef: string;\n    transparencyMode: number;\n    isDoubleSided: boolean;\n    dataJSON: object;\n};\nexport type GetEntity_material_ref = {\n    material_ref: GetEntity_MaterialReference;\n};\nexport type GetEntity_MaterialReference = {\n    value: string;\n    faceCulling?: number;\n};\nexport type GetEntity_mesh_ref = {\n    mesh_ref: GetEntity_MeshReference;\n};\nexport type GetEntity_MeshReference = {\n    value: string;\n    submeshIndex?: number;\n};\nexport type GetEntity_orthographic_lens = {\n    orthographic_lens: GetEntity_OrthographicLens;\n};\nexport type GetEntity_OrthographicLens = {\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    zNear?: number;\n    zFar?: number;\n};\nexport type GetEntity_overrider = {\n    overrider: GetEntity_Overrider;\n};\nexport type GetEntity_Overrider = {\n    deleter?: boolean;\n    entityRef: GetEntity_EntityReference;\n    componentsToDetach: Array<number>;\n};\nexport type GetEntity_perspective_lens = {\n    perspective_lens: GetEntity_PerspectiveLens;\n};\nexport type GetEntity_PerspectiveLens = {\n    aspectRatio?: number;\n    fovy?: number;\n    nearPlane?: number;\n    farPlane?: number;\n};\nexport type GetEntity_physics_material = {\n    physics_material: GetEntity_PhysicsMaterial;\n};\nexport type GetEntity_PhysicsMaterial = {\n    staticFriction?: number;\n    dynamicFriction?: number;\n    restitution?: number;\n    isTrigger?: boolean;\n};\nexport type GetEntity_plane_geometry = {\n    plane_geometry: GetEntity_PlaneGeometry;\n};\nexport type GetEntity_PlaneGeometry = {\n    distance?: number;\n    normal?: Array<number>;\n};\nexport type GetEntity_point_cloud_ref = {\n    point_cloud_ref: GetEntity_PointCloudReference;\n};\nexport type GetEntity_PointCloudReference = {\n    value: string;\n};\nexport type GetEntity_point_light = {\n    point_light: GetEntity_Light;\n};\nexport type GetEntity_Light = {\n    color?: Array<number>;\n    intensity?: number;\n    range?: number;\n    isDirectional?: boolean;\n    isSun?: boolean;\n};\nexport type GetEntity_reflection_probe = {\n    reflection_probe: GetEntity_ReflectionProbe;\n};\nexport type GetEntity_ReflectionProbe = {\n    offset?: Array<number>;\n    nearDist?: number;\n    farDist?: number;\n    quality?: number;\n};\nexport type GetEntity_revolute_joint = {\n    revolute_joint: GetEntity_RevoluteJoint;\n};\nexport type GetEntity_RevoluteJoint = {\n    axis?: Array<number>;\n    anchor?: Array<number>;\n};\nexport type GetEntity_rigid_body = {\n    rigid_body: GetEntity_RigidBody;\n};\nexport type GetEntity_RigidBody = {\n    mass?: number;\n    linearDamping?: number;\n    angularDamping?: number;\n    friction?: number;\n    rollingFriction?: number;\n    spinningFriction?: number;\n    restitution?: number;\n    linearSleepingThreshold?: number;\n    angularSleepingThreshold?: number;\n    isKinematic?: boolean;\n};\nexport type GetEntity_scene_ref = {\n    scene_ref: GetEntity_SceneReference;\n};\nexport type GetEntity_SceneReference = {\n    value: string;\n    maxRecursionCount?: number;\n};\nexport type GetEntity_script_element = {\n    script_element: GetEntity_ScriptElement;\n};\nexport type GetEntity_ScriptElement = {\n    scriptRef: string;\n    dataJSON: object;\n};\nexport type GetEntity_script_map = {\n    script_map: GetEntity_ScriptMap;\n};\nexport type GetEntity_ScriptMap = {\n    elements: object;\n};\nexport type GetEntity_shadow_caster = {\n    shadow_caster: GetEntity_ShadowCaster;\n};\nexport type GetEntity_ShadowCaster = {\n    bias?: number;\n    nearDist?: number;\n    farDist?: number;\n    quality?: number;\n    cascadeSplitLambda?: number;\n    cascadeMaxZ?: number;\n    accumulateShadowCascades?: boolean;\n};\nexport type GetEntity_skeleton_ref = {\n    skeleton_ref: GetEntity_SkeletonReference;\n};\nexport type GetEntity_SkeletonReference = {\n    value: string;\n};\nexport type GetEntity_sound_ref = {\n    sound_ref: GetEntity_SoundReference;\n};\nexport type GetEntity_SoundReference = {\n    value: string;\n    volume?: number;\n    pan?: number;\n    playSpeed?: number;\n    looping?: boolean;\n};\nexport type GetEntity_sphere_geometry = {\n    sphere_geometry: GetEntity_SphereGeometry;\n};\nexport type GetEntity_SphereGeometry = {\n    radius?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type GetEntity_spot_light = {\n    spot_light: GetEntity_SpotLight;\n};\nexport type GetEntity_SpotLight = {\n    cutoff?: number;\n    IESProfile: string;\n};\nexport type GetEntity_stereoscopic_lens = {\n    stereoscopic_lens: GetEntity_StereoscopicPerspectiveLens;\n};\nexport type GetEntity_StereoscopicPerspectiveLens = {\n    angleLeft?: number;\n    angleRight?: number;\n    angleUp?: number;\n    angleDown?: number;\n    nearPlane?: number;\n    farPlane?: number;\n    aspectRatio?: number;\n};\nexport type GetEntity_tags = {\n    tags: GetEntity_Tags;\n};\nexport type GetEntity_Tags = {\n    value: Array<string>;\n};\nexport type GetEntity_volume_filter = {\n    volume_filter: GetEntity_VolumeFilter;\n};\nexport type GetEntity_VolumeFilter = {\n    range?: Array<number>;\n    applyGaussianFiltering?: boolean;\n    sampleUnfiltered?: boolean;\n    enableMPR?: boolean;\n    enable3D?: boolean;\n};\nexport type GetEntity_volume_material_ref = {\n    volume_material_ref: GetEntity_VolumeMaterialReference;\n};\nexport type GetEntity_VolumeMaterialReference = {\n    value: string;\n};\nexport type GetEntity_volume_ref = {\n    volume_ref: GetEntity_VolumeReference;\n};\nexport type GetEntity_VolumeReference = {\n    texture3dRef: string;\n};\nexport type GetEntity_Entity = {\n    euid: GetEntity_EntityUid;\n};\nexport type GetEntity_EntityUid = {\n    value: string;\n};\n/**\n * Get a specific entity from a scene.\n */\nexport function getEntity(\n    {\n        scene_id,\n        entity_id,\n        compute_global_transform = false,\n    }: {\n        scene_id: string;\n        entity_id: string;\n        compute_global_transform?: boolean;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<\n    (\n        | GetEntity_animation_controller\n        | GetEntity_bone\n        | GetEntity_box_geometry\n        | GetEntity_camera\n        | GetEntity_capsule_geometry\n        | GetEntity_character_controller\n        | GetEntity_collision_geometry_ref\n        | GetEntity_cylinder_geometry\n        | GetEntity_debug_name\n        | GetEntity_decal_projector\n        | GetEntity_environment\n        | GetEntity_joint\n        | GetEntity_lineage\n        | GetEntity_local_aabb\n        | GetEntity_local_transform\n        | GetEntity_material\n        | GetEntity_material_ref\n        | GetEntity_mesh_ref\n        | GetEntity_orthographic_lens\n        | GetEntity_overrider\n        | GetEntity_perspective_lens\n        | GetEntity_physics_material\n        | GetEntity_plane_geometry\n        | GetEntity_point_cloud_ref\n        | GetEntity_point_light\n        | GetEntity_reflection_probe\n        | GetEntity_revolute_joint\n        | GetEntity_rigid_body\n        | GetEntity_scene_ref\n        | GetEntity_script_element\n        | GetEntity_script_map\n        | GetEntity_shadow_caster\n        | GetEntity_skeleton_ref\n        | GetEntity_sound_ref\n        | GetEntity_sphere_geometry\n        | GetEntity_spot_light\n        | GetEntity_stereoscopic_lens\n        | GetEntity_tags\n        | GetEntity_volume_filter\n        | GetEntity_volume_material_ref\n        | GetEntity_volume_ref\n    ) &\n        GetEntity_Entity\n> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/scenes/' + scene_id + '/entities/' + entity_id + '',\n        params: {\n            compute_global_transform: compute_global_transform,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type UpdateEntity_animation_controller = {\n    animation_controller: UpdateEntity_AnimationController;\n};\nexport type UpdateEntity_AnimationController = {\n    animationGraphRef: string;\n    animationSetRef: string;\n    dataJSON: object;\n    rootBoneEntityRef: UpdateEntity_EntityReference;\n    rootMotionEnabled: boolean;\n};\nexport type UpdateEntity_EntityReference = {\n    originalEUID: string;\n    linkage: Array<string>;\n};\nexport type UpdateEntity_bone = {\n    bone: UpdateEntity_Bone;\n};\nexport type UpdateEntity_Bone = {\n    boneIndex: number;\n};\nexport type UpdateEntity_box_geometry = {\n    box_geometry: UpdateEntity_BoxGeometry;\n};\nexport type UpdateEntity_BoxGeometry = {\n    dimension?: Array<number>;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type UpdateEntity_camera = {\n    camera: UpdateEntity_Camera;\n};\nexport type UpdateEntity_Camera = {\n    renderGraphRef: string;\n    renderTargetIndex?: number;\n    dataJSON: object;\n};\nexport type UpdateEntity_capsule_geometry = {\n    capsule_geometry: UpdateEntity_CapsuleGeometry;\n};\nexport type UpdateEntity_CapsuleGeometry = {\n    radius?: number;\n    height?: number;\n    axis?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type UpdateEntity_character_controller = {\n    character_controller: UpdateEntity_CharacterController;\n};\nexport type UpdateEntity_CharacterController = {\n    stepOffset?: number;\n    slopeLimit?: number;\n    skinWidth?: number;\n    velocity?: Array<number>;\n};\nexport type UpdateEntity_collision_geometry_ref = {\n    collision_geometry_ref: UpdateEntity_CollisionGeometryRef;\n};\nexport type UpdateEntity_CollisionGeometryRef = {\n    collisionGeometryRef: string;\n};\nexport type UpdateEntity_cylinder_geometry = {\n    cylinder_geometry: UpdateEntity_CylinderGeometry;\n};\nexport type UpdateEntity_CylinderGeometry = {\n    radius?: number;\n    height?: number;\n    axis?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type UpdateEntity_debug_name = {\n    debug_name: UpdateEntity_Name;\n};\nexport type UpdateEntity_Name = {\n    value: string;\n};\nexport type UpdateEntity_decal_projector = {\n    decal_projector: UpdateEntity_DecalProjector;\n};\nexport type UpdateEntity_DecalProjector = {\n    zIndex?: number;\n};\nexport type UpdateEntity_environment = {\n    environment: UpdateEntity_Environment;\n};\nexport type UpdateEntity_Environment = {\n    skyboxUUID: string;\n    radianceUUID: string;\n    irradianceUUID: string;\n};\nexport type UpdateEntity_joint = {\n    joint: UpdateEntity_Joint;\n};\nexport type UpdateEntity_Joint = {\n    constrainee: UpdateEntity_EntityReference;\n    constrainer: UpdateEntity_EntityReference;\n    breakForce?: number;\n    breakTorque?: number;\n};\nexport type UpdateEntity_lineage = {\n    lineage: UpdateEntity_Lineage;\n};\nexport type UpdateEntity_Lineage = {\n    parentUUID: string;\n    ordinal?: number;\n};\nexport type UpdateEntity_local_aabb = {\n    local_aabb: UpdateEntity_LocalAxisAlignedBoundingBox;\n};\nexport type UpdateEntity_LocalAxisAlignedBoundingBox = {\n    min: Array<number>;\n    max: Array<number>;\n};\nexport type UpdateEntity_local_transform = {\n    local_transform: UpdateEntity_Transform;\n};\nexport type UpdateEntity_Transform = {\n    position?: Array<number>;\n    orientation?: Array<number>;\n    scale?: Array<number>;\n    eulerOrientation?: Array<number>;\n    globalEulerOrientation?: Array<number>;\n};\nexport type UpdateEntity_material = {\n    material: UpdateEntity_Material;\n};\nexport type UpdateEntity_Material = {\n    shaderRef: string;\n    transparencyMode: number;\n    isDoubleSided: boolean;\n    dataJSON: object;\n};\nexport type UpdateEntity_material_ref = {\n    material_ref: UpdateEntity_MaterialReference;\n};\nexport type UpdateEntity_MaterialReference = {\n    value: string;\n    faceCulling?: number;\n};\nexport type UpdateEntity_mesh_ref = {\n    mesh_ref: UpdateEntity_MeshReference;\n};\nexport type UpdateEntity_MeshReference = {\n    value: string;\n    submeshIndex?: number;\n};\nexport type UpdateEntity_orthographic_lens = {\n    orthographic_lens: UpdateEntity_OrthographicLens;\n};\nexport type UpdateEntity_OrthographicLens = {\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    zNear?: number;\n    zFar?: number;\n};\nexport type UpdateEntity_overrider = {\n    overrider: UpdateEntity_Overrider;\n};\nexport type UpdateEntity_Overrider = {\n    deleter?: boolean;\n    entityRef: UpdateEntity_EntityReference;\n    componentsToDetach: Array<number>;\n};\nexport type UpdateEntity_perspective_lens = {\n    perspective_lens: UpdateEntity_PerspectiveLens;\n};\nexport type UpdateEntity_PerspectiveLens = {\n    aspectRatio?: number;\n    fovy?: number;\n    nearPlane?: number;\n    farPlane?: number;\n};\nexport type UpdateEntity_physics_material = {\n    physics_material: UpdateEntity_PhysicsMaterial;\n};\nexport type UpdateEntity_PhysicsMaterial = {\n    staticFriction?: number;\n    dynamicFriction?: number;\n    restitution?: number;\n    isTrigger?: boolean;\n};\nexport type UpdateEntity_plane_geometry = {\n    plane_geometry: UpdateEntity_PlaneGeometry;\n};\nexport type UpdateEntity_PlaneGeometry = {\n    distance?: number;\n    normal?: Array<number>;\n};\nexport type UpdateEntity_point_cloud_ref = {\n    point_cloud_ref: UpdateEntity_PointCloudReference;\n};\nexport type UpdateEntity_PointCloudReference = {\n    value: string;\n};\nexport type UpdateEntity_point_light = {\n    point_light: UpdateEntity_Light;\n};\nexport type UpdateEntity_Light = {\n    color?: Array<number>;\n    intensity?: number;\n    range?: number;\n    isDirectional?: boolean;\n    isSun?: boolean;\n};\nexport type UpdateEntity_reflection_probe = {\n    reflection_probe: UpdateEntity_ReflectionProbe;\n};\nexport type UpdateEntity_ReflectionProbe = {\n    offset?: Array<number>;\n    nearDist?: number;\n    farDist?: number;\n    quality?: number;\n};\nexport type UpdateEntity_revolute_joint = {\n    revolute_joint: UpdateEntity_RevoluteJoint;\n};\nexport type UpdateEntity_RevoluteJoint = {\n    axis?: Array<number>;\n    anchor?: Array<number>;\n};\nexport type UpdateEntity_rigid_body = {\n    rigid_body: UpdateEntity_RigidBody;\n};\nexport type UpdateEntity_RigidBody = {\n    mass?: number;\n    linearDamping?: number;\n    angularDamping?: number;\n    friction?: number;\n    rollingFriction?: number;\n    spinningFriction?: number;\n    restitution?: number;\n    linearSleepingThreshold?: number;\n    angularSleepingThreshold?: number;\n    isKinematic?: boolean;\n};\nexport type UpdateEntity_scene_ref = {\n    scene_ref: UpdateEntity_SceneReference;\n};\nexport type UpdateEntity_SceneReference = {\n    value: string;\n    maxRecursionCount?: number;\n};\nexport type UpdateEntity_script_element = {\n    script_element: UpdateEntity_ScriptElement;\n};\nexport type UpdateEntity_ScriptElement = {\n    scriptRef: string;\n    dataJSON: object;\n};\nexport type UpdateEntity_script_map = {\n    script_map: UpdateEntity_ScriptMap;\n};\nexport type UpdateEntity_ScriptMap = {\n    elements: object;\n};\nexport type UpdateEntity_shadow_caster = {\n    shadow_caster: UpdateEntity_ShadowCaster;\n};\nexport type UpdateEntity_ShadowCaster = {\n    bias?: number;\n    nearDist?: number;\n    farDist?: number;\n    quality?: number;\n    cascadeSplitLambda?: number;\n    cascadeMaxZ?: number;\n    accumulateShadowCascades?: boolean;\n};\nexport type UpdateEntity_skeleton_ref = {\n    skeleton_ref: UpdateEntity_SkeletonReference;\n};\nexport type UpdateEntity_SkeletonReference = {\n    value: string;\n};\nexport type UpdateEntity_sound_ref = {\n    sound_ref: UpdateEntity_SoundReference;\n};\nexport type UpdateEntity_SoundReference = {\n    value: string;\n    volume?: number;\n    pan?: number;\n    playSpeed?: number;\n    looping?: boolean;\n};\nexport type UpdateEntity_sphere_geometry = {\n    sphere_geometry: UpdateEntity_SphereGeometry;\n};\nexport type UpdateEntity_SphereGeometry = {\n    radius?: number;\n    isAdditive?: boolean;\n    offset?: Array<number>;\n};\nexport type UpdateEntity_spot_light = {\n    spot_light: UpdateEntity_SpotLight;\n};\nexport type UpdateEntity_SpotLight = {\n    cutoff?: number;\n    IESProfile: string;\n};\nexport type UpdateEntity_stereoscopic_lens = {\n    stereoscopic_lens: UpdateEntity_StereoscopicPerspectiveLens;\n};\nexport type UpdateEntity_StereoscopicPerspectiveLens = {\n    angleLeft?: number;\n    angleRight?: number;\n    angleUp?: number;\n    angleDown?: number;\n    nearPlane?: number;\n    farPlane?: number;\n    aspectRatio?: number;\n};\nexport type UpdateEntity_tags = {\n    tags: UpdateEntity_Tags;\n};\nexport type UpdateEntity_Tags = {\n    value: Array<string>;\n};\nexport type UpdateEntity_volume_filter = {\n    volume_filter: UpdateEntity_VolumeFilter;\n};\nexport type UpdateEntity_VolumeFilter = {\n    range?: Array<number>;\n    applyGaussianFiltering?: boolean;\n    sampleUnfiltered?: boolean;\n    enableMPR?: boolean;\n    enable3D?: boolean;\n};\nexport type UpdateEntity_volume_material_ref = {\n    volume_material_ref: UpdateEntity_VolumeMaterialReference;\n};\nexport type UpdateEntity_VolumeMaterialReference = {\n    value: string;\n};\nexport type UpdateEntity_volume_ref = {\n    volume_ref: UpdateEntity_VolumeReference;\n};\nexport type UpdateEntity_VolumeReference = {\n    texture3dRef: string;\n};\n/**\n * Update a specific entity from a scene.\n */\nexport function updateEntity(\n    {\n        scene_id,\n        entity_id,\n        entity_components,\n    }: {\n        scene_id: string;\n        entity_id: string;\n        entity_components:\n            | UpdateEntity_animation_controller\n            | UpdateEntity_bone\n            | UpdateEntity_box_geometry\n            | UpdateEntity_camera\n            | UpdateEntity_capsule_geometry\n            | UpdateEntity_character_controller\n            | UpdateEntity_collision_geometry_ref\n            | UpdateEntity_cylinder_geometry\n            | UpdateEntity_debug_name\n            | UpdateEntity_decal_projector\n            | UpdateEntity_environment\n            | UpdateEntity_joint\n            | UpdateEntity_lineage\n            | UpdateEntity_local_aabb\n            | UpdateEntity_local_transform\n            | UpdateEntity_material\n            | UpdateEntity_material_ref\n            | UpdateEntity_mesh_ref\n            | UpdateEntity_orthographic_lens\n            | UpdateEntity_overrider\n            | UpdateEntity_perspective_lens\n            | UpdateEntity_physics_material\n            | UpdateEntity_plane_geometry\n            | UpdateEntity_point_cloud_ref\n            | UpdateEntity_point_light\n            | UpdateEntity_reflection_probe\n            | UpdateEntity_revolute_joint\n            | UpdateEntity_rigid_body\n            | UpdateEntity_scene_ref\n            | UpdateEntity_script_element\n            | UpdateEntity_script_map\n            | UpdateEntity_shadow_caster\n            | UpdateEntity_skeleton_ref\n            | UpdateEntity_sound_ref\n            | UpdateEntity_sphere_geometry\n            | UpdateEntity_spot_light\n            | UpdateEntity_stereoscopic_lens\n            | UpdateEntity_tags\n            | UpdateEntity_volume_filter\n            | UpdateEntity_volume_material_ref\n            | UpdateEntity_volume_ref;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'patch',\n        url: '/assets/scenes/' + scene_id + '/entities/' + entity_id + '',\n        data: entity_components,\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Delete a specific entity from a scene.\n */\nexport function deleteEntity(\n    {\n        scene_id,\n        entity_id,\n    }: {\n        scene_id: string;\n        entity_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/assets/scenes/' + scene_id + '/entities/' + entity_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Get the settings of a scene.\n */\nexport function getSceneSettings(\n    {\n        scene_id,\n    }: {\n        scene_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<object> {\n    return axiosInstance({\n        method: 'get',\n        url: '/assets/scenes/' + scene_id + '/settings',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetRunningSessions_Filter = {\n    user_id?: string;\n    scene_id?: string;\n    folder_id?: string;\n};\nexport type GetRunningSessions_Session = {\n    session_id: string;\n    scene_id: string;\n    scene_name: string;\n    folder_id: string;\n    max_users: number;\n    creator_user_id: string;\n    created_at: string;\n    country_code: string;\n    continent_code: string;\n    is_transient_session: boolean;\n    clients: Array<GetRunningSessions_Client_UserInfo>;\n};\nexport type GetRunningSessions_Client_UserInfo = {\n    client_id?: string;\n    client_type?: StrictUnion<'user' | 'guest'>;\n    user_id: string;\n    username: string;\n};\n/**\n * Lists all running rendering sessions.\n */\nexport function getRunningSessions(\n    {\n        filters,\n    }: {\n        filters?: GetRunningSessions_Filter;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<Array<GetRunningSessions_Session>> {\n    return axiosInstance({\n        method: 'get',\n        url: '/sessions',\n        params: {\n            filters: filters,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type CreateSession_Object = {\n    session_id: string;\n};\n/**\n * Create a new rendering session.\n */\nexport function createSession(\n    {\n        scene_id,\n        renderer_version,\n        is_transient = false,\n        options,\n    }: {\n        scene_id: string;\n        renderer_version?: string;\n        is_transient?: boolean;\n        options?: object;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<CreateSession_Object> {\n    return axiosInstance({\n        method: 'post',\n        url: '/sessions',\n        data: {\n            scene_id: scene_id,\n            renderer_version: renderer_version,\n            is_transient: is_transient,\n            options: options,\n        },\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetSession_Session = {\n    session_id: string;\n    scene_id: string;\n    scene_name: string;\n    folder_id: string;\n    max_users: number;\n    creator_user_id: string;\n    created_at: string;\n    country_code: string;\n    continent_code: string;\n    is_transient_session: boolean;\n    clients: Array<GetSession_Client_UserInfo>;\n};\nexport type GetSession_Client_UserInfo = {\n    client_id?: string;\n    client_type?: StrictUnion<'user' | 'guest'>;\n    user_id: string;\n    username: string;\n};\n/**\n * Retrieves details about the target session.\n */\nexport function getSession(\n    {\n        session_id,\n    }: {\n        session_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetSession_Session> {\n    return axiosInstance({\n        method: 'get',\n        url: '/sessions/' + session_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Forcefully terminates a session.\n */\nexport function killSession(\n    {\n        session_id,\n    }: {\n        session_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/sessions/' + session_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type JoinSession_SessionToken = {\n    session_token: string;\n    endpoint_info: JoinSession_Object;\n};\nexport type JoinSession_Object = {\n    ip: string;\n    port: number;\n    ssl_port: number;\n};\n/**\n * Creates a new client for the user and returns a token to join the session.\n */\nexport function joinSession(\n    {\n        session_id,\n    }: {\n        session_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<JoinSession_SessionToken> {\n    return axiosInstance({\n        method: 'post',\n        url: '/sessions/' + session_id + '/clients',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GetClient_Client_UserInfo = {\n    client_id?: string;\n    client_type?: StrictUnion<'user' | 'guest'>;\n    user_id: string;\n    username: string;\n};\n/**\n * Retrieves details about the target client.\n */\nexport function getClient(\n    {\n        session_id,\n        client_id,\n    }: {\n        session_id: string;\n        client_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GetClient_Client_UserInfo> {\n    return axiosInstance({\n        method: 'get',\n        url: '/sessions/' + session_id + '/clients/' + client_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\n/**\n * Kick a client from a running session.\n */\nexport function kickClientFromSession(\n    {\n        session_id,\n        client_id,\n    }: {\n        session_id: string;\n        client_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n) {\n    return axiosInstance({\n        method: 'delete',\n        url: '/sessions/' + session_id + '/clients/' + client_id + '',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type JoinSessionAsGuest_SessionToken = {\n    session_token: string;\n    endpoint_info: JoinSessionAsGuest_Object;\n};\nexport type JoinSessionAsGuest_Object = {\n    ip: string;\n    port: number;\n    ssl_port: number;\n};\n/**\n * Join a session as guest.\n */\nexport function joinSessionAsGuest(headers?: AxiosRequestHeaders): AxiosPromise<JoinSessionAsGuest_SessionToken> {\n    return axiosInstance({\n        method: 'post',\n        url: '/sessions/guests',\n        headers: headers,\n    });\n}\n\n//--------------------------------------------------------------------------\nexport type GenerateGuestToken_GuestToken = {\n    guest_token?: string;\n};\n/**\n * Generates a token to join the session as a guest.\n */\nexport function generateGuestToken(\n    {\n        session_id,\n    }: {\n        session_id: string;\n    },\n    headers?: AxiosRequestHeaders,\n): AxiosPromise<GenerateGuestToken_GuestToken> {\n    return axiosInstance({\n        method: 'post',\n        url: '/sessions/' + session_id + '/guests',\n        headers: headers,\n    });\n}\n"],
  "mappings": "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",
  "names": ["axios", "axiosRetry"]
}
