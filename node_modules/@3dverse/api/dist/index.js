var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var library_exports = {};
__export(library_exports, {
  ApiError: () => ApiError,
  UnexpectedServiceError: () => UnexpectedServiceError,
  axiosInstance: () => axiosInstance,
  createAsset: () => createAsset,
  createCubemap: () => createCubemap,
  createEntity: () => createEntity,
  createFolder: () => createFolder,
  createGroup: () => createGroup,
  createMaterial: () => createMaterial,
  createSession: () => createSession,
  createSubfolder: () => createSubfolder,
  deleteAsset: () => deleteAsset,
  deleteAssets: () => deleteAssets,
  deleteEntity: () => deleteEntity,
  deleteFolder: () => deleteFolder,
  deleteGroup: () => deleteGroup,
  deleteSourceFiles: () => deleteSourceFiles,
  deleteUser: () => deleteUser,
  downloadSourceFile: () => downloadSourceFile,
  exportAsset: () => exportAsset,
  generateGuestToken: () => generateGuestToken,
  generateUserToken: () => generateUserToken,
  getAssetCode: () => getAssetCode,
  getAssetCustomTypes: () => getAssetCustomTypes,
  getAssetDependencies: () => getAssetDependencies,
  getAssetDescription: () => getAssetDescription,
  getAssetDetails: () => getAssetDetails,
  getAssetFolder: () => getAssetFolder,
  getAssetHistory: () => getAssetHistory,
  getAssetMeta: () => getAssetMeta,
  getAssetPayload: () => getAssetPayload,
  getAssetReferences: () => getAssetReferences,
  getAssetSourceFile: () => getAssetSourceFile,
  getAssetThumbnail: () => getAssetThumbnail,
  getClient: () => getClient,
  getConversionTaskMetadata: () => getConversionTaskMetadata,
  getEntity: () => getEntity,
  getFolderAssets: () => getFolderAssets,
  getFolderInfo: () => getFolderInfo,
  getGroup: () => getGroup,
  getRunningSessions: () => getRunningSessions,
  getSceneAABB: () => getSceneAABB,
  getSceneSessions: () => getSceneSessions,
  getSceneSettings: () => getSceneSettings,
  getSession: () => getSession,
  getSessionsInFolder: () => getSessionsInFolder,
  getSourceFileAssets: () => getSourceFileAssets,
  getSourceFileDetails: () => getSourceFileDetails,
  getSourceFilesInFolder: () => getSourceFilesInFolder,
  getUploadTask: () => getUploadTask,
  getUploadTasks: () => getUploadTasks,
  getUploadTasksInFolder: () => getUploadTasksInFolder,
  getUser: () => getUser,
  getUserGroups: () => getUserGroups,
  getUserUploadTasks: () => getUserUploadTasks,
  grantMemberAccessToFolder: () => grantMemberAccessToFolder,
  grantMemberAccessToGroup: () => grantMemberAccessToGroup,
  importAssets: () => importAssets,
  joinSession: () => joinSession,
  joinSessionAsGuest: () => joinSessionAsGuest,
  kickClientFromSession: () => kickClientFromSession,
  killSession: () => killSession,
  listAssets: () => listAssets,
  listFolderAccesses: () => listFolderAccesses,
  listFolderSubFolders: () => listFolderSubFolders,
  listFolders: () => listFolders,
  listSourceFiles: () => listSourceFiles,
  listUsers: () => listUsers,
  moveAssets: () => moveAssets,
  moveFolders: () => moveFolders,
  moveSourceFiles: () => moveSourceFiles,
  packageAsset: () => packageAsset,
  registerUser: () => registerUser,
  renameAsset: () => renameAsset,
  revokeMemberAccessToFolder: () => revokeMemberAccessToFolder,
  revokeMemberAccessToGroup: () => revokeMemberAccessToGroup,
  setApiKey: () => setApiKey,
  setAssetThumbnail: () => setAssetThumbnail,
  setBaseURL: () => setBaseURL,
  setUserToken: () => setUserToken,
  updateEntity: () => updateEntity,
  updateFolder: () => updateFolder,
  updateGroupDescription: () => updateGroupDescription,
  updateSourceFileDetails: () => updateSourceFileDetails,
  updateUser: () => updateUser,
  uploadSourceFiles: () => uploadSourceFiles
});
module.exports = __toCommonJS(library_exports);
var import_axios_retry = __toESM(require("axios-retry"));

// _prebuild/wrapper.ts
var import_axios = __toESM(require("axios"));
var axiosInstance = import_axios.default.create({
  baseURL: "https://api.3dverse.com/app/v1"
});
function setBaseURL(baseURL) {
  axiosInstance.defaults.baseURL = baseURL;
}
function listUsers({
  offset = 0,
  limit = 10
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/users",
    params: {
      offset,
      limit
    },
    headers
  });
}
function registerUser({
  username
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/users",
    data: {
      username
    },
    headers
  });
}
function getUser({
  user_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/users/" + user_id,
    headers
  });
}
function updateUser({
  user_id,
  username
}, headers) {
  return axiosInstance({
    method: "patch",
    url: "/users/" + user_id,
    data: {
      username
    },
    headers
  });
}
function deleteUser({
  user_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/users/" + user_id,
    headers
  });
}
function generateUserToken({
  user_id,
  scope,
  ttl = "1h"
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/users/" + user_id + "/tokens",
    data: {
      scope,
      ttl
    },
    headers
  });
}
function getUserGroups({
  user_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/users/" + user_id + "/groups",
    headers
  });
}
function getUserUploadTasks({
  user_id,
  offset = 0,
  limit = 10
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/users/" + user_id + "/upload-tasks",
    params: {
      offset,
      limit
    },
    headers
  });
}
function createGroup({
  name,
  description,
  members
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/groups",
    data: {
      name,
      description,
      members
    },
    headers
  });
}
function getGroup({
  group_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/groups/" + group_id,
    headers
  });
}
function updateGroupDescription({
  group_id,
  name,
  description
}, headers) {
  return axiosInstance({
    method: "patch",
    url: "/groups/" + group_id,
    data: {
      name,
      description
    },
    headers
  });
}
function deleteGroup({
  group_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/groups/" + group_id,
    headers
  });
}
function grantMemberAccessToGroup({
  group_id,
  member_type,
  member_id,
  group_access,
  folder_access
}, headers) {
  return axiosInstance({
    method: "put",
    url: "/groups/" + group_id + "/members/" + member_type + "/" + member_id,
    data: {
      group_access,
      folder_access
    },
    headers
  });
}
function revokeMemberAccessToGroup({
  group_id,
  member_type,
  member_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/groups/" + group_id + "/members/" + member_type + "/" + member_id,
    headers
  });
}
function listFolders({
  offset = 0,
  limit = 10
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders",
    params: {
      offset,
      limit
    },
    headers
  });
}
function createFolder({
  name,
  subfolders
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/folders",
    data: {
      name,
      subfolders
    },
    headers
  });
}
function getFolderInfo({
  folder_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id,
    headers
  });
}
function moveFolders({
  folder_id,
  folder_ids
}, headers) {
  return axiosInstance({
    method: "put",
    url: "/folders/" + folder_id,
    data: folder_ids,
    headers
  });
}
function updateFolder({
  folder_id,
  name
}, headers) {
  return axiosInstance({
    method: "patch",
    url: "/folders/" + folder_id,
    data: {
      name
    },
    headers
  });
}
function deleteFolder({
  folder_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/folders/" + folder_id,
    headers
  });
}
function listFolderAccesses({
  folder_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id + "/access",
    headers
  });
}
function grantMemberAccessToFolder({
  folder_id,
  member_type,
  member_id,
  access
}, headers) {
  return axiosInstance({
    method: "put",
    url: "/folders/" + folder_id + "/access/" + member_type + "/" + member_id,
    data: {
      access
    },
    headers
  });
}
function revokeMemberAccessToFolder({
  folder_id,
  member_type,
  member_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/folders/" + folder_id + "/access/" + member_type + "/" + member_id,
    headers
  });
}
function createSubfolder({
  folder_id,
  name,
  subfolders
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/folders/" + folder_id + "/folders",
    data: {
      name,
      subfolders
    },
    headers
  });
}
function listFolderSubFolders({
  folder_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id + "/folders",
    headers
  });
}
function uploadSourceFiles({
  folder_id,
  body
}, onUploadProgress, headers) {
  return axiosInstance({
    method: "post",
    url: "/folders/" + folder_id + "/source-files",
    data: body,
    onUploadProgress,
    headers: {
      "Content-Type": "multipart/form-data",
      ...headers
    }
  });
}
function getSourceFilesInFolder({
  folder_id,
  offset = 0,
  limit = 10,
  filters
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id + "/source-files",
    params: {
      offset,
      limit,
      filters
    },
    headers
  }).then((response) => {
    response.headers["x-source-files-count"] = JSON.parse(response.headers["x-source-files-count"]);
    return response;
  });
}
function moveSourceFiles({
  folder_id,
  source_file_ids
}, headers) {
  return axiosInstance({
    method: "put",
    url: "/folders/" + folder_id + "/source-files",
    data: source_file_ids,
    headers
  });
}
function getUploadTasksInFolder({
  folder_id,
  offset = 0,
  limit = 10
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id + "/upload-tasks",
    params: {
      offset,
      limit
    },
    headers
  });
}
function getFolderAssets({
  folder_id,
  offset = 0,
  limit = 10,
  filter,
  recursive = false
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id + "/assets",
    params: {
      offset,
      limit,
      filter,
      recursive
    },
    headers
  }).then((response) => {
    response.headers["x-assets-count"] = JSON.parse(
      response.headers["x-assets-count"]
    );
    return response;
  });
}
function createAsset({
  folder_id,
  asset_creation_options
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/folders/" + folder_id + "/assets",
    data: asset_creation_options,
    headers
  });
}
function moveAssets({
  folder_id,
  asset_ids
}, headers) {
  return axiosInstance({
    method: "put",
    url: "/folders/" + folder_id + "/assets",
    data: asset_ids,
    headers
  });
}
function createMaterial({
  folder_id,
  dataJson,
  isDoubleSided,
  name,
  shaderRef
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/folders/" + folder_id + "/assets/materials",
    data: {
      dataJson,
      isDoubleSided,
      name,
      shaderRef
    },
    headers
  });
}
function createCubemap({
  folder_id,
  faces,
  name
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/folders/" + folder_id + "/assets/cubemaps",
    data: {
      faces,
      name
    },
    headers
  });
}
function importAssets({
  folder_id,
  overwrite = "never",
  body
}, onUploadProgress, headers) {
  return axiosInstance({
    method: "put",
    url: "/folders/" + folder_id + "/packages",
    params: {
      overwrite
    },
    data: body,
    maxRedirects: 0,
    onUploadProgress,
    headers: {
      "Content-Type": "application/zip",
      ...headers
    }
  });
}
function getSessionsInFolder({
  folder_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/folders/" + folder_id + "/sessions",
    headers
  });
}
function listSourceFiles({
  offset = 0,
  limit = 10,
  filters
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/source-files",
    params: {
      offset,
      limit,
      filters
    },
    headers
  }).then((response) => {
    response.headers["x-source-files-count"] = JSON.parse(response.headers["x-source-files-count"]);
    return response;
  });
}
function deleteSourceFiles({
  source_file_ids,
  delete_assets = false
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/source-files",
    data: {
      source_file_ids,
      delete_assets
    },
    headers
  });
}
function downloadSourceFile({
  source_file_id
}, headers, responseType) {
  return axiosInstance({
    method: "get",
    url: "/source-files/" + source_file_id,
    headers,
    responseType: responseType || "arraybuffer"
  });
}
function getSourceFileDetails({
  source_file_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/source-files/" + source_file_id + "/details",
    headers
  });
}
function updateSourceFileDetails({
  source_file_id,
  name
}, headers) {
  return axiosInstance({
    method: "patch",
    url: "/source-files/" + source_file_id + "/details",
    data: {
      name
    },
    headers
  });
}
function getSourceFileAssets({
  source_file_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/source-files/" + source_file_id + "/assets",
    headers
  });
}
function getUploadTasks({
  offset = 0,
  limit = 10
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/upload-tasks",
    params: {
      offset,
      limit
    },
    headers
  });
}
function getUploadTask({
  upload_task_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/upload-tasks/" + upload_task_id,
    headers
  });
}
function getConversionTaskMetadata({
  conversion_task_id,
  filename
}, headers, responseType) {
  return axiosInstance({
    method: "get",
    url: "/conversion_tasks/" + conversion_task_id + "/metadata/" + filename,
    headers,
    responseType: responseType || "arraybuffer"
  });
}
function listAssets({
  offset = 0,
  limit = 10,
  filter
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets",
    params: {
      offset,
      limit,
      filter
    },
    headers
  });
}
function deleteAssets({
  asset_ids
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/assets",
    data: asset_ids,
    headers
  });
}
function deleteAsset({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/assets/" + asset_container + "/" + asset_id,
    headers
  });
}
function getAssetSourceFile({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/source-file",
    headers
  });
}
function getAssetDetails({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/details",
    headers
  });
}
function getAssetFolder({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/folder",
    headers
  });
}
function getAssetDependencies({
  asset_container,
  asset_id,
  offset = 0,
  limit = 10,
  depth = "all",
  filters,
  properties
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/dependencies",
    params: {
      offset,
      limit,
      depth,
      filters,
      properties
    },
    headers
  });
}
function getAssetReferences({
  asset_container,
  asset_id,
  offset = 0,
  limit = 10,
  properties
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/references",
    params: {
      offset,
      limit,
      properties
    },
    headers
  });
}
function getAssetDescription({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/description",
    headers
  });
}
function renameAsset({
  asset_container,
  asset_id,
  name
}, headers) {
  return axiosInstance({
    method: "patch",
    url: "/assets/" + asset_container + "/" + asset_id + "/description",
    data: {
      name
    },
    headers
  });
}
function getAssetPayload({
  asset_container_with_payload,
  asset_id,
  sub_resource
}, headers, responseType) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container_with_payload + "/" + asset_id + "/payload",
    params: {
      sub_resource
    },
    headers,
    responseType: responseType || "arraybuffer"
  });
}
function getAssetHistory({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/history",
    headers
  });
}
function getAssetMeta({
  asset_container,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/meta",
    headers
  });
}
function getAssetCode({
  asset_container_with_code,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container_with_code + "/" + asset_id + "/code",
    headers,
    responseType: "text"
  });
}
function getAssetThumbnail({
  asset_container,
  asset_id,
  size,
  default_url
}, headers, responseType) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/thumbnail",
    params: {
      size,
      default_url
    },
    headers,
    responseType: responseType || "arraybuffer"
  });
}
function setAssetThumbnail({
  asset_container,
  asset_id,
  body
}, contentType, headers) {
  return axiosInstance({
    method: "put",
    url: "/assets/" + asset_container + "/" + asset_id + "/thumbnail",
    data: body,
    maxRedirects: 0,
    headers: {
      "Content-Type": contentType,
      ...headers
    }
  });
}
function getAssetCustomTypes({
  asset_container_with_custom_types,
  asset_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container_with_custom_types + "/" + asset_id + "/custom-types",
    headers
  });
}
function packageAsset({
  asset_container,
  asset_id
}, headers, responseType) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container + "/" + asset_id + "/package",
    headers,
    responseType: responseType || "arraybuffer"
  });
}
function exportAsset({
  asset_container_exportable,
  asset_id,
  format,
  scale = 1,
  sub_mesh_index
}, headers, responseType) {
  return axiosInstance({
    method: "get",
    url: "/assets/" + asset_container_exportable + "/" + asset_id + "/exports/" + format,
    params: {
      scale,
      sub_mesh_index
    },
    headers,
    responseType: responseType || "arraybuffer"
  });
}
function getSceneSessions({
  scene_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/scenes/" + scene_id + "/sessions",
    headers
  });
}
function getSceneAABB({
  scene_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/scenes/" + scene_id + "/aabb",
    headers
  });
}
function createEntity({
  scene_id,
  entity_components
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/assets/scenes/" + scene_id + "/entities",
    data: entity_components,
    headers
  });
}
function getEntity({
  scene_id,
  entity_id,
  compute_global_transform = false
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/scenes/" + scene_id + "/entities/" + entity_id,
    params: {
      compute_global_transform
    },
    headers
  });
}
function updateEntity({
  scene_id,
  entity_id,
  entity_components
}, headers) {
  return axiosInstance({
    method: "patch",
    url: "/assets/scenes/" + scene_id + "/entities/" + entity_id,
    data: entity_components,
    headers
  });
}
function deleteEntity({
  scene_id,
  entity_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/assets/scenes/" + scene_id + "/entities/" + entity_id,
    headers
  });
}
function getSceneSettings({
  scene_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/assets/scenes/" + scene_id + "/settings",
    headers
  });
}
function getRunningSessions({
  filters
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/sessions",
    params: {
      filters
    },
    headers
  });
}
function createSession({
  scene_id,
  renderer_version,
  is_transient = false,
  options
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/sessions",
    data: {
      scene_id,
      renderer_version,
      is_transient,
      options
    },
    headers
  });
}
function getSession({
  session_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/sessions/" + session_id,
    headers
  });
}
function killSession({
  session_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/sessions/" + session_id,
    headers
  });
}
function joinSession({
  session_id
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/sessions/" + session_id + "/clients",
    headers
  });
}
function getClient({
  session_id,
  client_id
}, headers) {
  return axiosInstance({
    method: "get",
    url: "/sessions/" + session_id + "/clients/" + client_id,
    headers
  });
}
function kickClientFromSession({
  session_id,
  client_id
}, headers) {
  return axiosInstance({
    method: "delete",
    url: "/sessions/" + session_id + "/clients/" + client_id,
    headers
  });
}
function joinSessionAsGuest(headers) {
  return axiosInstance({
    method: "post",
    url: "/sessions/guests",
    headers
  });
}
function generateGuestToken({
  session_id
}, headers) {
  return axiosInstance({
    method: "post",
    url: "/sessions/" + session_id + "/guests",
    headers
  });
}

// index.ts
function setApiKey(apiKey) {
  axiosInstance.defaults.headers.common["api_key"] = apiKey;
  delete axiosInstance.defaults.headers.common["user_token"];
}
function setUserToken(userToken) {
  axiosInstance.defaults.headers.common["user_token"] = userToken;
  delete axiosInstance.defaults.headers.common["api_key"];
}
var ServiceError = class extends Error {
  errorCode;
  httpCode;
  message;
  //--------------------------------------------------------------------------
  constructor(errorCode, httpCode, message) {
    super();
    this.errorCode = errorCode;
    this.httpCode = httpCode;
    this.message = message;
  }
};
var ApiError = class extends ServiceError {
  serviceError;
  constructor(errorCode, status, message, serviceError) {
    super(errorCode, status, message);
    this.serviceError = serviceError;
  }
};
var UnexpectedServiceError = class extends ServiceError {
  unexpectedError;
  constructor(status, unexpectedError) {
    super(0, status, "Unexpected service error error");
    this.unexpectedError = unexpectedError;
  }
};
function installInterceptors() {
  const CLIENT_ERROR = 400;
  const INTERNAL_SERVER_ERROR = 500;
  (0, import_axios_retry.default)(axiosInstance, {
    retries: 5,
    retryDelay: import_axios_retry.default.exponentialDelay,
    retryCondition: shouldRetryRequest
  });
  axiosInstance.interceptors.response.use(
    (successFulResponse) => {
      if (successFulResponse.config.responseType === "stream") {
        successFulResponse.data.pause();
      }
      return successFulResponse;
    },
    (error) => {
      if (!error.response) {
        return Promise.reject(error);
      }
      const axiosError = error;
      const status = axiosError.response?.status || INTERNAL_SERVER_ERROR;
      const errorData = axiosError.response?.data;
      if (!errorData && axiosError.request.method === "HEAD" && status >= CLIENT_ERROR && status < INTERNAL_SERVER_ERROR) {
        return axiosError.response;
      }
      if (!errorData || typeof errorData !== "object") {
        return Promise.reject(new UnexpectedServiceError(status, errorData));
      }
      const serviceError = errorData;
      return Promise.reject(new ApiError(serviceError.errorCode, status, serviceError.message, serviceError));
    }
  );
}
function shouldRetryRequest(error) {
  const status = error.response?.status;
  switch (status) {
    case 403:
    case 404:
      return true;
    default:
      return (0, import_axios_retry.isNetworkError)(error) || (0, import_axios_retry.isIdempotentRequestError)(error);
  }
}
installInterceptors();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiError,
  UnexpectedServiceError,
  axiosInstance,
  createAsset,
  createCubemap,
  createEntity,
  createFolder,
  createGroup,
  createMaterial,
  createSession,
  createSubfolder,
  deleteAsset,
  deleteAssets,
  deleteEntity,
  deleteFolder,
  deleteGroup,
  deleteSourceFiles,
  deleteUser,
  downloadSourceFile,
  exportAsset,
  generateGuestToken,
  generateUserToken,
  getAssetCode,
  getAssetCustomTypes,
  getAssetDependencies,
  getAssetDescription,
  getAssetDetails,
  getAssetFolder,
  getAssetHistory,
  getAssetMeta,
  getAssetPayload,
  getAssetReferences,
  getAssetSourceFile,
  getAssetThumbnail,
  getClient,
  getConversionTaskMetadata,
  getEntity,
  getFolderAssets,
  getFolderInfo,
  getGroup,
  getRunningSessions,
  getSceneAABB,
  getSceneSessions,
  getSceneSettings,
  getSession,
  getSessionsInFolder,
  getSourceFileAssets,
  getSourceFileDetails,
  getSourceFilesInFolder,
  getUploadTask,
  getUploadTasks,
  getUploadTasksInFolder,
  getUser,
  getUserGroups,
  getUserUploadTasks,
  grantMemberAccessToFolder,
  grantMemberAccessToGroup,
  importAssets,
  joinSession,
  joinSessionAsGuest,
  kickClientFromSession,
  killSession,
  listAssets,
  listFolderAccesses,
  listFolderSubFolders,
  listFolders,
  listSourceFiles,
  listUsers,
  moveAssets,
  moveFolders,
  moveSourceFiles,
  packageAsset,
  registerUser,
  renameAsset,
  revokeMemberAccessToFolder,
  revokeMemberAccessToGroup,
  setApiKey,
  setAssetThumbnail,
  setBaseURL,
  setUserToken,
  updateEntity,
  updateFolder,
  updateGroupDescription,
  updateSourceFileDetails,
  updateUser,
  uploadSourceFiles
});
//# sourceMappingURL=index.js.map
