# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import gRPCCom_pb2 as gRPCCom__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in gRPCCom_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CLMServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsConnected = channel.unary_unary(
                '/CLMService/IsConnected',
                request_serializer=gRPCCom__pb2.IsConnectedRequest.SerializeToString,
                response_deserializer=gRPCCom__pb2.IsConnectedReply.FromString,
                _registered_method=True)
        self.ReadHeader = channel.unary_unary(
                '/CLMService/ReadHeader',
                request_serializer=gRPCCom__pb2.ReadRequest.SerializeToString,
                response_deserializer=gRPCCom__pb2.ReadReply.FromString,
                _registered_method=True)
        self.ReadData = channel.unary_unary(
                '/CLMService/ReadData',
                request_serializer=gRPCCom__pb2.ReadRequest.SerializeToString,
                response_deserializer=gRPCCom__pb2.ReadReply.FromString,
                _registered_method=True)
        self.Read = channel.unary_unary(
                '/CLMService/Read',
                request_serializer=gRPCCom__pb2.ReadFinal.SerializeToString,
                response_deserializer=gRPCCom__pb2.ReadReply.FromString,
                _registered_method=True)
        self.Write = channel.unary_unary(
                '/CLMService/Write',
                request_serializer=gRPCCom__pb2.WriteRequest.SerializeToString,
                response_deserializer=gRPCCom__pb2.WriteReply.FromString,
                _registered_method=True)
        self.SendAcquisition = channel.unary_unary(
                '/CLMService/SendAcquisition',
                request_serializer=gRPCCom__pb2.AcquisitionData.SerializeToString,
                response_deserializer=gRPCCom__pb2.AcquisitionReply.FromString,
                _registered_method=True)
        self.ReadAcquisition = channel.unary_unary(
                '/CLMService/ReadAcquisition',
                request_serializer=gRPCCom__pb2.ReadRequest.SerializeToString,
                response_deserializer=gRPCCom__pb2.AcquisitionData.FromString,
                _registered_method=True)


class CLMServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsConnected(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadHeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Private : This function sould not be called by user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAcquisition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAcquisition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsConnected': grpc.unary_unary_rpc_method_handler(
                    servicer.IsConnected,
                    request_deserializer=gRPCCom__pb2.IsConnectedRequest.FromString,
                    response_serializer=gRPCCom__pb2.IsConnectedReply.SerializeToString,
            ),
            'ReadHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadHeader,
                    request_deserializer=gRPCCom__pb2.ReadRequest.FromString,
                    response_serializer=gRPCCom__pb2.ReadReply.SerializeToString,
            ),
            'ReadData': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadData,
                    request_deserializer=gRPCCom__pb2.ReadRequest.FromString,
                    response_serializer=gRPCCom__pb2.ReadReply.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=gRPCCom__pb2.ReadFinal.FromString,
                    response_serializer=gRPCCom__pb2.ReadReply.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=gRPCCom__pb2.WriteRequest.FromString,
                    response_serializer=gRPCCom__pb2.WriteReply.SerializeToString,
            ),
            'SendAcquisition': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAcquisition,
                    request_deserializer=gRPCCom__pb2.AcquisitionData.FromString,
                    response_serializer=gRPCCom__pb2.AcquisitionReply.SerializeToString,
            ),
            'ReadAcquisition': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAcquisition,
                    request_deserializer=gRPCCom__pb2.ReadRequest.FromString,
                    response_serializer=gRPCCom__pb2.AcquisitionData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('CLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CLMService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsConnected(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/IsConnected',
            gRPCCom__pb2.IsConnectedRequest.SerializeToString,
            gRPCCom__pb2.IsConnectedReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/ReadHeader',
            gRPCCom__pb2.ReadRequest.SerializeToString,
            gRPCCom__pb2.ReadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/ReadData',
            gRPCCom__pb2.ReadRequest.SerializeToString,
            gRPCCom__pb2.ReadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/Read',
            gRPCCom__pb2.ReadFinal.SerializeToString,
            gRPCCom__pb2.ReadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/Write',
            gRPCCom__pb2.WriteRequest.SerializeToString,
            gRPCCom__pb2.WriteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendAcquisition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/SendAcquisition',
            gRPCCom__pb2.AcquisitionData.SerializeToString,
            gRPCCom__pb2.AcquisitionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadAcquisition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CLMService/ReadAcquisition',
            gRPCCom__pb2.ReadRequest.SerializeToString,
            gRPCCom__pb2.AcquisitionData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
